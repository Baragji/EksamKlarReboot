This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
21principper/
  21autonomprincipper.md
Contextsystem/
  ‚ö†Ô∏è_READ_FIRST_‚ö†Ô∏è.md
  check_context.py
  current-session.md
  NEXT_ACTIONS.md
  project-status.json
  update_context.py
examklar-tdd/
  coverage/
    examklar-tdd/
      src/
        components/
          layout/
            index.html
            Layout.tsx.html
          ui/
            Button.tsx.html
            index.html
            Input.tsx.html
          index.html
          SubjectCard.tsx.html
        pages/
          DashboardPage.tsx.html
          FlashcardsPage.tsx.html
          index.html
          NotFoundPage.tsx.html
          OnboardingPage.tsx.html
          QuizPage.tsx.html
          StudyPage.tsx.html
        stores/
          examStore.ts.html
          index.html
        types/
          index.html
          index.ts.html
        App.tsx.html
        index.html
        main.tsx.html
      index.html
      postcss.config.js.html
      tailwind.config.js.html
    base.css
    block-navigation.js
    coverage-final.json
    index.html
    prettify.css
    prettify.js
    sorter.js
  public/
    vite.svg
  src/
    assets/
      react.svg
    components/
      layout/
        Layout.tsx
      ui/
        Button.tsx
        Input.tsx
      Flashcard.tsx
      FlashcardDeck.tsx
      QuizEngine.tsx
      StudyTimer.tsx
      SubjectCard.tsx
    pages/
      DashboardPage.tsx
      FlashcardsPage.tsx
      NotFoundPage.tsx
      OnboardingPage.tsx
      QuizPage.tsx
      StudyPage.tsx
    stores/
      examStore.ts
    types/
      index.ts
    App.css
    App.tsx
    index.css
    main.tsx
    test-setup.ts
    vite-env.d.ts
  tests/
    components/
      ui/
        Button.test.tsx
        Input.test.tsx
      Flashcard.test.tsx
      FlashcardDeck.test.tsx
      Quiz.test.tsx
      QuizEngine.test.tsx
      StudyTimer.test.tsx
      SubjectCard.test.tsx
    pages/
      DashboardPage.test.tsx
      FlashcardsPage.test.tsx
      NotFoundPage.test.tsx
      OnboardingPage.integration.test.tsx
      OnboardingPage.test.tsx
      QuizPage.test.tsx
      StudyPage.test.tsx
    stores/
      examStore.test.ts
    App.test.tsx
  .gitignore
  eslint.config.js
  index.html
  package.json
  postcss.config.js
  README.md
  tailwind.config.js
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vite.config.ts
  vitest.config.ts
Plan/
  EXAMKLAR_TDD_MASTER_PLAN.md
current-session.md
NEXT_ACTIONS.md
project-status.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Contextsystem/‚ö†Ô∏è_READ_FIRST_‚ö†Ô∏è.md">
# ‚ö†Ô∏è CRITICAL INSTRUCTIONS FOR ALL AIs ‚ö†Ô∏è

## üß™ EXAMKLAR TDD PROJECT - MANDATORY RULES

**THIS IS A TEST-DRIVEN DEVELOPMENT PROJECT**

**AFTER EVERY ACTION YOU TAKE, YOU MUST RUN:**

```bash
python3 update_context.py "description of what you just did"
```

## üß™ TDD Examples:
- Wrote test: `python3 update_context.py "Created failing test for Button component click handler"`
- Made test pass: `python3 update_context.py "Implemented Button onClick functionality - test now passes"`
- Refactored: `python3 update_context.py "Refactored Button component for better maintainability"`
- Added feature: `python3 update_context.py "Added new flashcard component with tests"`

## üî¥üü¢üîµ TDD Workflow:
1. **RED**: Write a failing test first
2. **GREEN**: Write minimal code to make it pass  
3. **REFACTOR**: Improve code quality
4. **REPEAT**: Continue the cycle

## Why TDD + Context Updates Are Critical:
- **Prevents context loss** - the #1 problem with AI coding assistants
- **Ensures quality** - tests catch regressions and validate implementations
- **Enables seamless handoffs** between AI sessions
- **Maintains project continuity** across interruptions
- **Provides recovery instructions** for new AIs

## Check Context Status:
```bash
python3 check_context.py
```

## If You're a New AI Taking Over:
1. **FIRST**: Read `current-session.md` to understand what was last done
2. **THEN**: Read `NEXT_ACTIONS.md` for immediate next steps
3. **ALWAYS**: Follow TDD workflow - write tests first!
4. **ALWAYS**: Update context after every action you take

## This File Exists Because:
We cannot hardcode rules into AI coding assistants, so we rely on:
- Prominent visual reminders (this file)
- Simple, easy-to-use update scripts
- Self-checking context systems
- **TDD methodology** for quality assurance

**üö® REMEMBER: TDD + Context updates are NOT optional - they are MANDATORY for system quality and continuity!**
</file>

<file path="examklar-tdd/src/components/Flashcard.tsx">
import React, { useState } from 'react'
import type { Flashcard as FlashcardType } from '../types'

export interface FlashcardProps {
  card: FlashcardType
  onFlip?: (cardId: string, showingBack: boolean) => void
  isFlipping?: boolean
}

export const Flashcard: React.FC<FlashcardProps> = ({ 
  card, 
  onFlip,
  isFlipping = false 
}) => {
  const [showingBack, setShowingBack] = useState(false)

  const handleFlip = () => {
    if (isFlipping) return
    
    const newShowingBack = !showingBack
    setShowingBack(newShowingBack)
    
    if (onFlip) {
      onFlip(card.id, newShowingBack)
    }
  }

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      handleFlip()
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy':
        return 'bg-green-100 text-green-800'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800'
      case 'hard':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const formatDifficulty = (difficulty: string) => {
    return difficulty.charAt(0).toUpperCase() + difficulty.slice(1)
  }

  if (isFlipping) {
    return (
      <div className="w-full max-w-lg mx-auto bg-white rounded-lg shadow-lg p-8 min-h-64 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Flipping...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="w-full max-w-lg mx-auto">
      {/* Card */}
      <button
        onClick={handleFlip}
        onKeyDown={handleKeyDown}
        aria-label="Flip card"
        tabIndex={0}
        className="w-full bg-white rounded-lg shadow-lg p-8 min-h-64 transition-all duration-300 hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        {/* Card Content */}
        <div className="text-center">
          {showingBack ? (
            <div>
              {/* Back of card */}
              <div className="text-2xl font-semibold text-gray-900 mb-6">
                {card.back}
              </div>
              
              {/* Review stats */}
              <div className="text-sm text-gray-600 space-y-2">
                <p>Streak: {card.correctStreak}</p>
                <p>Reviews: {card.totalReviews}</p>
              </div>
            </div>
          ) : (
            <div>
              {/* Front of card */}
              <div className="text-xl font-medium text-gray-900 mb-8">
                {card.front}
              </div>
              
              {/* Flip indicator */}
              <div className="text-sm text-gray-500">
                Click to flip
              </div>
            </div>
          )}
        </div>
      </button>

      {/* Card metadata */}
      <div className="mt-4 flex items-center justify-between">
        {/* Difficulty badge */}
        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(card.difficulty)}`}>
          {formatDifficulty(card.difficulty)}
        </span>

        {/* Tags */}
        <div className="flex flex-wrap gap-2">
          {card.tags.map((tag, index) => (
            <span
              key={index}
              className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-md"
            >
              {tag}
            </span>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="examklar-tdd/src/components/FlashcardDeck.tsx">
import React, { useState, useEffect, useRef, useCallback } from 'react'
import type { Flashcard as FlashcardType, FlashcardSession } from '../types'
import { Flashcard } from './Flashcard'
import { Button } from './ui/Button'

export interface FlashcardDeckProps {
  cards: FlashcardType[]
  onCardComplete?: (cardId: string, result: 'correct' | 'incorrect') => void
  onDeckComplete?: (session: Omit<FlashcardSession, 'id' | 'flashcardIds' | 'startedAt'>) => void
  autoAdvance?: boolean
  autoAdvanceDelay?: number
}

export const FlashcardDeck: React.FC<FlashcardDeckProps> = ({
  cards,
  onCardComplete,
  onDeckComplete,
  autoAdvance = false,
  autoAdvanceDelay = 3000
}) => {
  const [currentCardIndex, setCurrentCardIndex] = useState(0)
  const [completedCards, setCompletedCards] = useState<string[]>([])
  const [correctCards, setCorrectCards] = useState<string[]>([])
  const [shuffledCards, setShuffledCards] = useState<FlashcardType[]>(cards)
  const [sessionStartTime] = useState(new Date())
  const autoAdvanceTimerRef = useRef<NodeJS.Timeout | null>(null)

  const handleNext = useCallback(() => {
    if (currentCardIndex < shuffledCards.length - 1) {
      setCurrentCardIndex(prev => prev + 1)
    }
  }, [currentCardIndex, shuffledCards.length])

  const handlePrevious = useCallback(() => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(prev => prev - 1)
    }
  }, [currentCardIndex])

  // Update shuffled cards when cards prop changes
  useEffect(() => {
    setShuffledCards([...cards])
    setCurrentCardIndex(0)
    setCompletedCards([])
    setCorrectCards([])
  }, [cards])

  // Auto-advance functionality
  useEffect(() => {
    if (autoAdvance && shuffledCards.length > 0 && currentCardIndex < shuffledCards.length - 1) {
      autoAdvanceTimerRef.current = setTimeout(() => {
        setCurrentCardIndex(prev => Math.min(prev + 1, shuffledCards.length - 1))
      }, autoAdvanceDelay)
    }

    return () => {
      if (autoAdvanceTimerRef.current) {
        clearTimeout(autoAdvanceTimerRef.current)
      }
    }
  }, [autoAdvance, autoAdvanceDelay, currentCardIndex, shuffledCards.length])

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'ArrowRight') {
        event.preventDefault()
        handleNext()
      } else if (event.key === 'ArrowLeft') {
        event.preventDefault()
        handlePrevious()
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [handleNext, handlePrevious])

  // Check if deck is complete
  useEffect(() => {
    if (completedCards.length === shuffledCards.length && shuffledCards.length > 0 && onDeckComplete) {
      const timeSpent = Math.floor((new Date().getTime() - sessionStartTime.getTime()) / 1000)
      onDeckComplete({
        totalCards: shuffledCards.length,
        correctCards: correctCards.length,
        incorrectCards: completedCards.length - correctCards.length,
        timeSpent
      })
    }
  }, [completedCards.length, shuffledCards.length, correctCards.length, onDeckComplete, sessionStartTime])

  if (shuffledCards.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-500 text-lg">No flashcards available</div>
        <p className="text-gray-400 mt-2">Add some flashcards to get started with studying!</p>
      </div>
    )
  }

  const currentCard = shuffledCards[currentCardIndex]

  const handleCardComplete = (result: 'correct' | 'incorrect') => {
    const cardId = currentCard.id
    
    if (!completedCards.includes(cardId)) {
      setCompletedCards(prev => [...prev, cardId])
    }
    
    if (result === 'correct' && !correctCards.includes(cardId)) {
      setCorrectCards(prev => [...prev, cardId])
    }
    
    if (onCardComplete) {
      onCardComplete(cardId, result)
    }
  }

  const handleShuffle = () => {
    const shuffled = [...shuffledCards].sort(() => Math.random() - 0.5)
    setShuffledCards(shuffled)
    setCurrentCardIndex(0)
  }

  // Calculate difficulty distribution
  const difficultyCount = shuffledCards.reduce((acc, card) => {
    acc[card.difficulty] = (acc[card.difficulty] || 0) + 1
    return acc
  }, {} as Record<string, number>)

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Progress and stats */}
      <div className="mb-6">
        {/* Progress bar */}
        <div className="mb-4">
          <div className="flex justify-between text-sm text-gray-600 mb-2">
            <span>{currentCardIndex + 1} of {shuffledCards.length}</span>
            <span>Progress: {Math.round(((currentCardIndex + 1) / shuffledCards.length) * 100)}%</span>
          </div>
          <div 
            className="w-full bg-gray-200 rounded-full h-2"
            role="progressbar"
            aria-valuenow={currentCardIndex + 1}
            aria-valuemax={shuffledCards.length}
          >
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentCardIndex + 1) / shuffledCards.length) * 100}%` }}
            />
          </div>
        </div>

        {/* Difficulty distribution */}
        <div className="flex items-center justify-center gap-4 text-sm text-gray-600">
          <span>Easy: {difficultyCount.easy || 0}</span>
          <span>Medium: {difficultyCount.medium || 0}</span>
          <span>Hard: {difficultyCount.hard || 0}</span>
        </div>
      </div>

      {/* Main flashcard */}
      <div className="mb-6">
        <Flashcard card={currentCard} />
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between">
        {/* Navigation */}
        <div className="flex items-center gap-2">
          <Button
            onClick={handlePrevious}
            disabled={currentCardIndex === 0}
            aria-label="Previous card"
            variant="outline"
          >
            ‚Üê Previous
          </Button>
          
          <Button
            onClick={handleNext}
            disabled={currentCardIndex === shuffledCards.length - 1}
            aria-label="Next card"
            variant="outline"
          >
            Next ‚Üí
          </Button>
        </div>

        {/* Actions */}
        <div className="flex items-center gap-2">
          <Button
            onClick={() => handleCardComplete('incorrect')}
            aria-label="Mark as incorrect"
            variant="outline"
            className="text-red-600 border-red-300 hover:bg-red-50"
          >
            ‚úó Incorrect
          </Button>
          
          <Button
            onClick={() => handleCardComplete('correct')}
            aria-label="Mark as correct"
            className="bg-green-600 hover:bg-green-700 text-white"
          >
            ‚úì Correct
          </Button>
        </div>

        {/* Utility */}
        <Button
          onClick={handleShuffle}
          aria-label="Shuffle cards"
          variant="outline"
        >
          üîÄ Shuffle
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="examklar-tdd/src/components/QuizEngine.tsx">
import React, { useState, useMemo } from 'react'
import type { Quiz, QuizHistory, QuizResult } from '../types'
import { Quiz as QuizComponent } from './Quiz'
import { Button } from './ui/Button'
import { Input } from './ui/Input'

interface QuizEngineProps {
  quizzes: Quiz[]
  history?: QuizHistory[]
  onQuizComplete?: (result: QuizResult & { completedAt: Date }) => void
}

type DifficultyFilter = 'all' | 'easy' | 'medium' | 'hard'
type ViewMode = 'list' | 'quiz'

export const QuizEngine: React.FC<QuizEngineProps> = ({ 
  quizzes, 
  history = [], 
  onQuizComplete 
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>('list')
  const [activeQuiz, setActiveQuiz] = useState<Quiz | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [difficultyFilter, setDifficultyFilter] = useState<DifficultyFilter>('all')

  // Calculate overall statistics
  const statistics = useMemo(() => {
    if (history.length === 0) {
      return { averageScore: 0, completionRate: 0 }
    }

    const totalScore = history.reduce((sum, h) => sum + h.score, 0)
    const averageScore = Math.round(totalScore / history.length)
    const passedQuizzes = history.filter(h => h.passed).length
    const completionRate = Math.round((passedQuizzes / history.length) * 100)

    return { averageScore, completionRate }
  }, [history])

  // Filter and search quizzes
  const filteredQuizzes = useMemo(() => {
    return quizzes.filter(quiz => {
      // Search filter
      const matchesSearch = quiz.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           quiz.description.toLowerCase().includes(searchQuery.toLowerCase())

      // Difficulty filter
      const quizDifficulty = quiz.questions.length > 0 ? quiz.questions[0].difficulty : 'easy'
      const matchesDifficulty = difficultyFilter === 'all' || quizDifficulty === difficultyFilter

      return matchesSearch && matchesDifficulty
    })
  }, [quizzes, searchQuery, difficultyFilter])

  const handleStartQuiz = (quiz: Quiz) => {
    setActiveQuiz(quiz)
    setViewMode('quiz')
  }

  const handleQuizComplete = (result: QuizResult) => {
    const completedResult = {
      ...result,
      completedAt: new Date()
    }
    onQuizComplete?.(completedResult)
    setViewMode('list')
    setActiveQuiz(null)
  }

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60)
    return mins === 1 ? '1 min' : `${mins} min`
  }

  const getQuizHistory = (quizId: string) => {
    return history.filter(h => h.quizId === quizId)
  }

  const hasFailedAttempts = (quizId: string) => {
    const quizHistory = getQuizHistory(quizId)
    return quizHistory.some(h => !h.passed)
  }

  if (viewMode === 'quiz' && activeQuiz) {
    return <QuizComponent quiz={activeQuiz} onComplete={handleQuizComplete} />
  }

  return (
    <main className="max-w-4xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Quiz Center</h1>
        <p className="text-gray-600">Test your knowledge and track your progress</p>
      </div>

      {/* Statistics */}
      {history.length > 0 && (
        <div className="mb-8 p-4 bg-blue-50 rounded-lg">
          <h2 className="text-lg font-semibold mb-2">Your Statistics</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-600">Average Score</p>
              <p className="text-2xl font-bold text-blue-600">{statistics.averageScore}%</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Completion Rate</p>
              <p className="text-2xl font-bold text-green-600">{statistics.completionRate}%</p>
            </div>
          </div>
        </div>
      )}

      {/* Search and Filters */}
      <div className="mb-6 space-y-4">
        <Input
          type="text"
          placeholder="Search quizzes..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          aria-label="Search quizzes"
        />
        
        <div className="flex gap-2">
          {(['all', 'easy', 'medium', 'hard'] as DifficultyFilter[]).map(difficulty => (
            <Button
              key={difficulty}
              variant={difficultyFilter === difficulty ? 'primary' : 'secondary'}
              onClick={() => setDifficultyFilter(difficulty)}
              className="capitalize"
            >
              {difficulty === 'all' ? 'All' : difficulty}
            </Button>
          ))}
        </div>
      </div>

      {/* Recent Attempts */}
      {history.length > 0 && (
        <div className="mb-8">
          <h2 className="text-lg font-semibold mb-4">Recent Attempts</h2>
          <div className="bg-white rounded-lg border divide-y">
            {history.slice(-3).reverse().map((attempt, index) => {
              const quiz = quizzes.find(q => q.id === attempt.quizId)
              return (
                <div key={index} className="p-4 flex justify-between items-center">
                  <div>
                    <p className="font-medium">{quiz?.title || 'Unknown Quiz'}</p>
                    <p className="text-sm text-gray-500">
                      {attempt.completedAt.toLocaleDateString()}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className={`font-bold ${attempt.passed ? 'text-green-600' : 'text-red-600'}`}>
                      {attempt.score}%
                    </p>
                    <p className="text-sm text-gray-500">
                      {attempt.passed ? 'Passed' : 'Failed'}
                    </p>
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      )}

      {/* Quiz List */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Available Quizzes</h2>
        
        {filteredQuizzes.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            No quizzes available
          </div>
        ) : (
          <div className="grid gap-4">
            {filteredQuizzes.map(quiz => {
              const quizHistory = getQuizHistory(quiz.id)
              const lastAttempt = quizHistory[quizHistory.length - 1]
              const failed = hasFailedAttempts(quiz.id)
              
              return (
                <div key={quiz.id} className="bg-white rounded-lg border p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1">
                      <h3 className="text-xl font-semibold mb-2">{quiz.title}</h3>
                      <p className="text-gray-600 mb-3">{quiz.description}</p>
                      
                      <div className="flex gap-4 text-sm text-gray-500 mb-4">
                        <span>{quiz.questions.length} question{quiz.questions.length !== 1 ? 's' : ''}</span>
                        {quiz.timeLimit && <span>{formatTime(quiz.timeLimit)}</span>}
                        <span>Pass: {quiz.passingScore}%</span>
                      </div>

                      {lastAttempt && (
                        <div className="text-sm">
                          <span className="text-gray-500">Last attempt: </span>
                          <span className={lastAttempt.passed ? 'text-green-600' : 'text-red-600'}>
                            {lastAttempt.score}% ({lastAttempt.passed ? 'Passed' : 'Failed'})
                          </span>
                        </div>
                      )}
                    </div>
                    
                    <div className="ml-4">
                      <Button
                        onClick={() => handleStartQuiz(quiz)}
                        variant="primary"
                        aria-label={`Start ${quiz.title} quiz`}
                      >
                        {failed && !lastAttempt?.passed ? 'Retake Quiz' : 'Start Quiz'}
                      </Button>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}
      </div>
    </main>
  )
}
</file>

<file path="examklar-tdd/src/components/StudyTimer.tsx">
import React, { useState, useEffect, useRef } from 'react'
import type { Subject } from '../types'
import { Button } from './ui/Button'

export interface StudySession {
  duration: number // in seconds
  startTime: Date
  endTime: Date
}

export interface StudyTimerProps {
  subject?: Subject
  onSessionEnd?: (session: StudySession) => void
}

export const StudyTimer: React.FC<StudyTimerProps> = ({ 
  subject, 
  onSessionEnd 
}) => {
  const [elapsedSeconds, setElapsedSeconds] = useState(0)
  const [isRunning, setIsRunning] = useState(false)
  const [startTime, setStartTime] = useState<Date | null>(null)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  // Start timer
  const handleStart = () => {
    setIsRunning(true)
    if (!startTime) {
      setStartTime(new Date())
    }
  }

  // Pause timer
  const handlePause = () => {
    setIsRunning(false)
    
    // If we have a valid session, call onSessionEnd
    if (startTime && elapsedSeconds > 0 && onSessionEnd) {
      onSessionEnd({
        duration: elapsedSeconds,
        startTime,
        endTime: new Date()
      })
    }
  }

  // Reset timer
  const handleReset = () => {
    setIsRunning(false)
    setElapsedSeconds(0)
    setStartTime(null)
    
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }

  // Timer effect
  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(() => {
        setElapsedSeconds(prev => prev + 1)
      }, 1000)
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [isRunning])

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [])

  // Format time as HH:MM:SS
  const formatTime = (totalSeconds: number): string => {
    const hours = Math.floor(totalSeconds / 3600)
    const minutes = Math.floor((totalSeconds % 3600) / 60)
    const seconds = totalSeconds % 60

    return [hours, minutes, seconds]
      .map(unit => unit.toString().padStart(2, '0'))
      .join(':')
  }

  return (
    <div className="flex flex-col items-center space-y-6 p-6 bg-white rounded-lg shadow-md">
      {/* Subject display */}
      {subject && (
        <div className="text-center">
          <div className="text-2xl mb-2">{subject.emoji}</div>
          <h2 className="text-lg font-semibold text-gray-800">{subject.name}</h2>
        </div>
      )}

      {/* Timer display */}
      <div
        role="timer"
        aria-label="Study timer"
        className="text-4xl font-mono font-bold text-gray-900 bg-gray-100 px-8 py-4 rounded-lg"
      >
        {formatTime(elapsedSeconds)}
      </div>

      {/* Control buttons */}
      <div className="flex space-x-4">
        {!isRunning ? (
          <Button
            onClick={handleStart}
            aria-label="Start timer"
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-2"
          >
            Start
          </Button>
        ) : (
          <Button
            onClick={handlePause}
            aria-label="Pause timer"
            className="bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-2"
          >
            Pause
          </Button>
        )}
        
        <Button
          onClick={handleReset}
          aria-label="Reset timer"
          variant="outline"
          className="px-6 py-2"
        >
          Reset
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="examklar-tdd/tests/components/Flashcard.test.tsx">
import { render, screen, act, fireEvent } from '@testing-library/react'
import { vi, beforeEach, afterEach } from 'vitest'
import { Flashcard } from '../../src/components/Flashcard'

describe('Flashcard Component - TDD', () => {
  const mockCard = {
    id: '1',
    front: 'What is the capital of France?',
    back: 'Paris',
    difficulty: 'easy' as const,
    tags: ['geography', 'capitals'],
    lastReviewed: new Date('2025-06-20'),
    nextReview: new Date('2025-06-25'),
    correctStreak: 2,
    totalReviews: 5
  }

  it('should display front of card initially', () => {
    render(<Flashcard card={mockCard} />)
    expect(screen.getByText('What is the capital of France?')).toBeInTheDocument()
    expect(screen.queryByText('Paris')).not.toBeInTheDocument()
  })

  it('should show flip indicator when card can be flipped', () => {
    render(<Flashcard card={mockCard} />)
    expect(screen.getByLabelText('Flip card')).toBeInTheDocument()
    expect(screen.getByText(/click to flip/i)).toBeInTheDocument()
  })

  it('should flip to back when clicked', () => {
    render(<Flashcard card={mockCard} />)
    
    act(() => {
      fireEvent.click(screen.getByRole('button', { name: /flip card/i }))
    })
    
    expect(screen.getByText('Paris')).toBeInTheDocument()
    expect(screen.queryByText('What is the capital of France?')).not.toBeInTheDocument()
  })

  it('should flip back to front when clicked again', () => {
    render(<Flashcard card={mockCard} />)
    
    // Flip to back
    act(() => {
      fireEvent.click(screen.getByRole('button', { name: /flip card/i }))
    })
    expect(screen.getByText('Paris')).toBeInTheDocument()
    
    // Flip back to front
    act(() => {
      fireEvent.click(screen.getByRole('button', { name: /flip card/i }))
    })
    expect(screen.getByText('What is the capital of France?')).toBeInTheDocument()
    expect(screen.queryByText('Paris')).not.toBeInTheDocument()
  })

  it('should show difficulty indicator', () => {
    render(<Flashcard card={mockCard} />)
    expect(screen.getByText('Easy')).toBeInTheDocument()
  })

  it('should display tags when provided', () => {
    render(<Flashcard card={mockCard} />)
    expect(screen.getByText('geography')).toBeInTheDocument()
    expect(screen.getByText('capitals')).toBeInTheDocument()
  })

  it('should show review stats on back of card', () => {
    render(<Flashcard card={mockCard} />)
    
    // Flip to back
    act(() => {
      fireEvent.click(screen.getByRole('button', { name: /flip card/i }))
    })
    
    expect(screen.getByText(/streak: 2/i)).toBeInTheDocument()
    expect(screen.getByText(/reviews: 5/i)).toBeInTheDocument()
  })

  it('should call onFlip callback when flipped', () => {
    const handleFlip = vi.fn()
    render(<Flashcard card={mockCard} onFlip={handleFlip} />)
    
    act(() => {
      fireEvent.click(screen.getByRole('button', { name: /flip card/i }))
    })
    
    expect(handleFlip).toHaveBeenCalledWith(mockCard.id, true) // true = showing back
  })

  it('should be keyboard accessible', () => {
    render(<Flashcard card={mockCard} />)
    
    const cardButton = screen.getByRole('button', { name: /flip card/i })
    expect(cardButton).toBeInTheDocument()
    
    // Test keyboard interaction
    act(() => {
      fireEvent.keyDown(cardButton, { key: 'Enter' })
    })
    
    expect(screen.getByText('Paris')).toBeInTheDocument()
  })

  it('should have proper ARIA attributes', () => {
    render(<Flashcard card={mockCard} />)
    
    const cardButton = screen.getByRole('button', { name: /flip card/i })
    expect(cardButton).toHaveAttribute('aria-label', 'Flip card')
    expect(cardButton).toHaveAttribute('tabIndex', '0')
  })

  it('should show loading state when flipping', () => {
    render(<Flashcard card={mockCard} isFlipping />)
    expect(screen.getByText(/flipping.../i)).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/components/FlashcardDeck.test.tsx">
import { render, screen, act, fireEvent } from '@testing-library/react'
import { vi } from 'vitest'
import { FlashcardDeck } from '../../src/components/FlashcardDeck'

describe('FlashcardDeck Component - TDD', () => {
  const mockCards = [
    {
      id: '1',
      front: 'What is 2+2?',
      back: '4',
      difficulty: 'easy' as const,
      tags: ['math'],
      lastReviewed: new Date('2025-06-20'),
      nextReview: new Date('2025-06-25'),
      correctStreak: 1,
      totalReviews: 3
    },
    {
      id: '2',
      front: 'What is the capital of Spain?',
      back: 'Madrid',
      difficulty: 'medium' as const,
      tags: ['geography'],
      lastReviewed: new Date('2025-06-19'),
      nextReview: new Date('2025-06-26'),
      correctStreak: 0,
      totalReviews: 2
    },
    {
      id: '3',
      front: 'What is photosynthesis?',
      back: 'The process by which plants make food using sunlight',
      difficulty: 'hard' as const,
      tags: ['biology', 'science'],
      lastReviewed: new Date('2025-06-18'),
      nextReview: new Date('2025-06-27'),
      correctStreak: 3,
      totalReviews: 8
    }
  ]

  it('should display first card initially', () => {
    render(<FlashcardDeck cards={mockCards} />)
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
  })

  it('should show current card position', () => {
    render(<FlashcardDeck cards={mockCards} />)
    expect(screen.getByText('1 of 3')).toBeInTheDocument()
  })

  it('should navigate to next card when next button clicked', () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    act(() => {
      fireEvent.click(screen.getByLabelText('Next card'))
    })
    
    expect(screen.getByText('What is the capital of Spain?')).toBeInTheDocument()
    expect(screen.getByText('2 of 3')).toBeInTheDocument()
  })

  it('should navigate to previous card when previous button clicked', () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    // Go to second card
    act(() => {
      fireEvent.click(screen.getByLabelText('Next card'))
    })
    expect(screen.getByText('2 of 3')).toBeInTheDocument()
    
    // Go back to first card
    act(() => {
      fireEvent.click(screen.getByLabelText('Previous card'))
    })
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
    expect(screen.getByText('1 of 3')).toBeInTheDocument()
  })

  it('should disable previous button on first card', () => {
    render(<FlashcardDeck cards={mockCards} />)
    expect(screen.getByLabelText('Previous card')).toBeDisabled()
  })

  it('should disable next button on last card', () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    // Navigate to last card
    act(() => {
      fireEvent.click(screen.getByLabelText('Next card'))
    })
    act(() => {
      fireEvent.click(screen.getByLabelText('Next card'))
    })
    
    expect(screen.getByText('3 of 3')).toBeInTheDocument()
    expect(screen.getByLabelText('Next card')).toBeDisabled()
  })

  it('should show difficulty distribution', () => {
    render(<FlashcardDeck cards={mockCards} />)
    expect(screen.getByText(/easy: 1/i)).toBeInTheDocument()
    expect(screen.getByText(/medium: 1/i)).toBeInTheDocument()
    expect(screen.getByText(/hard: 1/i)).toBeInTheDocument()
  })

  it('should show progress bar', () => {
    render(<FlashcardDeck cards={mockCards} />)
    const progressBar = screen.getByRole('progressbar')
    expect(progressBar).toBeInTheDocument()
    expect(progressBar).toHaveAttribute('aria-valuenow', '1')
    expect(progressBar).toHaveAttribute('aria-valuemax', '3')
  })

  it('should call onCardComplete when card is marked as complete', () => {
    const handleCardComplete = vi.fn()
    render(<FlashcardDeck cards={mockCards} onCardComplete={handleCardComplete} />)
    
    act(() => {
      fireEvent.click(screen.getByLabelText('Mark as correct'))
    })
    
    expect(handleCardComplete).toHaveBeenCalledWith(mockCards[0].id, 'correct')
  })

  it('should call onDeckComplete when all cards are reviewed', () => {
    const handleDeckComplete = vi.fn()
    render(<FlashcardDeck cards={mockCards} onDeckComplete={handleDeckComplete} />)
    
    // Mark all cards as complete
    mockCards.forEach(() => {
      act(() => {
        fireEvent.click(screen.getByLabelText('Mark as correct'))
      })
      if (screen.queryByLabelText('Next card') && !screen.getByLabelText('Next card').hasAttribute('disabled')) {
        act(() => {
          fireEvent.click(screen.getByLabelText('Next card'))
        })
      }
    })
    
    expect(handleDeckComplete).toHaveBeenCalledWith({
      totalCards: 3,
      correctCards: 3,
      incorrectCards: 0,
      timeSpent: expect.any(Number)
    })
  })

  it('should shuffle cards when shuffle button clicked', () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    const firstCardText = screen.getByText('What is 2+2?')
    expect(firstCardText).toBeInTheDocument()
    
    act(() => {
      fireEvent.click(screen.getByLabelText('Shuffle cards'))
    })
    
    // After shuffle, the order might be different
    // We just check that some card content is still present
    expect(screen.getByText(/What is|Madrid|photosynthesis/)).toBeInTheDocument()
  })

  it('should show empty state when no cards provided', () => {
    render(<FlashcardDeck cards={[]} />)
    expect(screen.getByText(/no flashcards available/i)).toBeInTheDocument()
  })

  it('should have keyboard navigation support', () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    // Test arrow key navigation
    act(() => {
      fireEvent.keyDown(document.body, { key: 'ArrowRight' })
    })
    expect(screen.getByText('What is the capital of Spain?')).toBeInTheDocument()
    
    act(() => {
      fireEvent.keyDown(document.body, { key: 'ArrowLeft' })
    })
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
  })

  it('should support auto-advance mode', () => {
    vi.useFakeTimers()
    
    render(<FlashcardDeck cards={mockCards} autoAdvance autoAdvanceDelay={3000} />)
    
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
    
    // Fast forward time
    act(() => {
      vi.advanceTimersByTime(3000)
    })
    
    expect(screen.getByText('What is the capital of Spain?')).toBeInTheDocument()
    
    vi.useRealTimers()
  })
})
</file>

<file path="examklar-tdd/tests/components/Quiz.test.tsx">
import { render, screen, act, fireEvent } from '@testing-library/react'
import { vi } from 'vitest'
import { Quiz } from '../../src/components/Quiz'

describe('Quiz Component - TDD', () => {
  const mockQuiz = {
    id: '1',
    title: 'Mathematics Quiz',
    description: 'Test your math skills',
    questions: [
      {
        id: '1',
        question: 'What is 2 + 2?',
        options: ['3', '4', '5', '6'],
        correctAnswer: 1,
        explanation: 'Basic addition: 2 + 2 = 4',
        difficulty: 'easy' as const,
        points: 10
      },
      {
        id: '2',
        question: 'What is 5 √ó 7?',
        options: ['30', '32', '35', '40'],
        correctAnswer: 2,
        explanation: 'Multiplication: 5 √ó 7 = 35',
        difficulty: 'medium' as const,
        points: 20
      }
    ],
    timeLimit: 300, // 5 minutes in seconds
    passingScore: 60
  }

  it('should display quiz title and description', () => {
    render(<Quiz quiz={mockQuiz} />)
    expect(screen.getByText('Mathematics Quiz')).toBeInTheDocument()
    expect(screen.getByText('Test your math skills')).toBeInTheDocument()
  })

  it('should display first question initially', () => {
    render(<Quiz quiz={mockQuiz} />)
    expect(screen.getByText('What is 2 + 2?')).toBeInTheDocument()
    expect(screen.getByText('3')).toBeInTheDocument()
    expect(screen.getByText('4')).toBeInTheDocument()
    expect(screen.getByText('5')).toBeInTheDocument()
    expect(screen.getByText('6')).toBeInTheDocument()
  })

  it('should show question progress', () => {
    render(<Quiz quiz={mockQuiz} />)
    expect(screen.getByText('Question 1 of 2')).toBeInTheDocument()
  })

  it('should display timer when quiz has time limit', () => {
    render(<Quiz quiz={mockQuiz} />)
    expect(screen.getByText(/05:00/)).toBeInTheDocument()
    expect(screen.getByLabelText('Quiz timer')).toBeInTheDocument()
  })

  it('should allow selecting an answer', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    const option = screen.getByLabelText('Option B: 4')
    fireEvent.click(option)
    
    expect(option).toBeChecked()
  })

  it('should highlight selected answer', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    const optionButton = screen.getByText('4')
    act(() => {
      fireEvent.click(optionButton)
    })
    
    expect(optionButton.closest('button')).toHaveClass('bg-blue-100')
  })

  it('should advance to next question when next button clicked', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    // Select an answer
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    
    // Click next
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    
    expect(screen.getByText('What is 5 √ó 7?')).toBeInTheDocument()
    expect(screen.getByText('Question 2 of 2')).toBeInTheDocument()
  })

  it('should disable next button when no answer selected', () => {
    render(<Quiz quiz={mockQuiz} />)
    expect(screen.getByText('Next Question')).toBeDisabled()
  })

  it('should show finish button on last question', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    // Go to last question
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    
    // Select answer on last question
    act(() => {
      fireEvent.click(screen.getByText('35'))
    })
    
    expect(screen.getByText('Finish Quiz')).toBeInTheDocument()
  })

  it('should show confirmation dialog before finishing', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    // Complete quiz
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    act(() => {
      fireEvent.click(screen.getByText('35'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Finish Quiz'))
    })
    
    expect(screen.getByText(/are you sure you want to finish/i)).toBeInTheDocument()
    expect(screen.getByText('Yes, Finish Quiz')).toBeInTheDocument()
    expect(screen.getByText('Continue Quiz')).toBeInTheDocument()
  })

  it('should call onComplete with quiz results', () => {
    const handleComplete = vi.fn()
    render(<Quiz quiz={mockQuiz} onComplete={handleComplete} />)
    
    // Complete quiz
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    act(() => {
      fireEvent.click(screen.getByText('35'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Finish Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Yes, Finish Quiz'))
    })
    
    expect(handleComplete).toHaveBeenCalledWith({
      quizId: mockQuiz.id,
      score: 100, // Both answers correct
      totalQuestions: 2,
      correctAnswers: 2,
      incorrectAnswers: 0,
      timeSpent: expect.any(Number),
      passed: true,
      answers: expect.any(Array)
    })
  })

  it('should show review mode after completion', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    // Complete quiz
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    act(() => {
      fireEvent.click(screen.getByText('35'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Finish Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Yes, Finish Quiz'))
    })
    
    expect(screen.getByText('Quiz Complete!')).toBeInTheDocument()
    expect(screen.getByText(/score: 100%/i)).toBeInTheDocument()
    expect(screen.getByText('Review Answers')).toBeInTheDocument()
  })

  it('should show explanations in review mode', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    // Complete quiz and enter review
    act(() => {
      fireEvent.click(screen.getByText('4'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Next Question'))
    })
    act(() => {
      fireEvent.click(screen.getByText('35'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Finish Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Yes, Finish Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Review Answers'))
    })
    
    expect(screen.getByText('Basic addition: 2 + 2 = 4')).toBeInTheDocument()
  })

  it('should handle timer expiration', () => {
    vi.useFakeTimers()
    const handleComplete = vi.fn()
    
    render(<Quiz quiz={mockQuiz} onComplete={handleComplete} />)
    
    // Fast forward time past limit
    act(() => {
      vi.advanceTimersByTime(300000) // 5 minutes
    })
    
    expect(handleComplete).toHaveBeenCalled()
    expect(screen.getByText(/time's up/i)).toBeInTheDocument()
    
    vi.useRealTimers()
  })

  it('should have proper accessibility attributes', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    expect(screen.getByRole('radiogroup')).toBeInTheDocument()
    expect(screen.getByLabelText('Option A: 3')).toBeInTheDocument()
    expect(screen.getByLabelText('Option B: 4')).toBeInTheDocument()
    expect(screen.getByLabelText('Quiz timer')).toBeInTheDocument()
  })

  it('should support keyboard navigation', () => {
    render(<Quiz quiz={mockQuiz} />)
    
    const firstOption = screen.getByLabelText('Option A: 3')
    
    // Test keyboard selection
    act(() => {
      fireEvent.keyDown(firstOption, { key: 'ArrowDown' })
    })
    
    expect(screen.getByLabelText('Option B: 4')).toHaveFocus()
  })
})
</file>

<file path="examklar-tdd/tests/components/QuizEngine.test.tsx">
import { render, screen, act, fireEvent } from '@testing-library/react'
import { vi } from 'vitest'
import { QuizEngine } from '../../src/components/QuizEngine'

describe('QuizEngine Component - TDD', () => {
  const mockQuizzes = [
    {
      id: '1',
      title: 'Math Basics',
      description: 'Basic mathematics',
      questions: [
        {
          id: '1',
          question: 'What is 1 + 1?',
          options: ['1', '2', '3', '4'],
          correctAnswer: 1,
          explanation: '1 + 1 = 2',
          difficulty: 'easy' as const,
          points: 10
        }
      ],
      timeLimit: 60,
      passingScore: 50
    },
    {
      id: '2',
      title: 'Advanced Math',
      description: 'Advanced mathematics',
      questions: [
        {
          id: '2',
          question: 'What is the derivative of x¬≤?',
          options: ['x', '2x', 'x¬≤', '2x¬≤'],
          correctAnswer: 1,
          explanation: 'd/dx(x¬≤) = 2x',
          difficulty: 'hard' as const,
          points: 30
        }
      ],
      timeLimit: 120,
      passingScore: 70
    }
  ]

  it('should display list of available quizzes', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    expect(screen.getByText('Math Basics')).toBeInTheDocument()
    expect(screen.getByText('Advanced Math')).toBeInTheDocument()
  })

  it('should show quiz details for each quiz', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    expect(screen.getByText('Basic mathematics')).toBeInTheDocument()
    expect(screen.getByText('1 question')).toBeInTheDocument()
    expect(screen.getByText('1 min')).toBeInTheDocument()
  })

  it('should allow starting a quiz', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    
    act(() => {
      fireEvent.click(screen.getByText('Start Quiz'))
    })
    
    expect(screen.getByText('What is 1 + 1?')).toBeInTheDocument()
  })

  it('should track quiz completion history', () => {
    const handleQuizComplete = vi.fn()
    render(<QuizEngine quizzes={mockQuizzes} onQuizComplete={handleQuizComplete} />)
    
    // Start and complete quiz
    act(() => {
      fireEvent.click(screen.getByText('Start Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('2'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Finish Quiz'))
    })
    act(() => {
      fireEvent.click(screen.getByText('Yes, Finish Quiz'))
    })
    
    expect(handleQuizComplete).toHaveBeenCalledWith({
      quizId: '1',
      score: 100,
      passed: true,
      completedAt: expect.any(Date)
    })
  })

  it('should show quiz history and statistics', () => {
    const history = [
      {
        quizId: '1',
        score: 85,
        passed: true,
        completedAt: new Date('2025-06-20'),
        timeSpent: 45
      }
    ]
    
    render(<QuizEngine quizzes={mockQuizzes} history={history} />)
    expect(screen.getByText(/recent attempts/i)).toBeInTheDocument()
    expect(screen.getByText('85%')).toBeInTheDocument()
  })

  it('should filter quizzes by difficulty', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    
    act(() => {
      fireEvent.click(screen.getByText('Easy'))
    })
    
    expect(screen.getByText('Math Basics')).toBeInTheDocument()
    expect(screen.queryByText('Advanced Math')).not.toBeInTheDocument()
  })

  it('should search quizzes by title', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    
    act(() => {
      fireEvent.change(screen.getByPlaceholderText('Search quizzes...'), {
        target: { value: 'Advanced' }
      })
    })
    
    expect(screen.queryByText('Math Basics')).not.toBeInTheDocument()
    expect(screen.getByText('Advanced Math')).toBeInTheDocument()
  })

  it('should show empty state when no quizzes available', () => {
    render(<QuizEngine quizzes={[]} />)
    expect(screen.getByText(/no quizzes available/i)).toBeInTheDocument()
  })

  it('should display overall statistics', () => {
    const history = [
      { quizId: '1', score: 85, passed: true, completedAt: new Date() },
      { quizId: '2', score: 65, passed: false, completedAt: new Date() }
    ]
    
    render(<QuizEngine quizzes={mockQuizzes} history={history} />)
    expect(screen.getByText(/average score: 75%/i)).toBeInTheDocument()
    expect(screen.getByText(/completion rate: 50%/i)).toBeInTheDocument()
  })

  it('should allow retaking failed quizzes', () => {
    const history = [
      { quizId: '1', score: 30, passed: false, completedAt: new Date() }
    ]
    
    render(<QuizEngine quizzes={mockQuizzes} history={history} />)
    expect(screen.getByText('Retake Quiz')).toBeInTheDocument()
  })

  it('should have proper accessibility attributes', () => {
    render(<QuizEngine quizzes={mockQuizzes} />)
    
    expect(screen.getByRole('main')).toBeInTheDocument()
    expect(screen.getByLabelText('Search quizzes')).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /start quiz/i })).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/components/StudyTimer.test.tsx">
import { render, screen, act, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { vi, beforeEach, afterEach } from 'vitest'
import { StudyTimer } from '../../src/components/StudyTimer'

describe('StudyTimer Component - TDD', () => {
  beforeEach(() => {
    vi.useFakeTimers()
    vi.setSystemTime(new Date('2025-06-22T10:00:00.000Z'))
  })

  afterEach(() => {
    vi.runOnlyPendingTimers()
    vi.useRealTimers()
  })

  it('should display initial time as 00:00:00', () => {
    render(<StudyTimer />)
    expect(screen.getByText('00:00:00')).toBeInTheDocument()
  })

  it('should display play button initially', () => {
    render(<StudyTimer />)
    expect(screen.getByLabelText('Start timer')).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /start/i })).toBeInTheDocument()
  })

  it('should start timer when play button is clicked', async () => {
    render(<StudyTimer />)
    
    const startButton = screen.getByLabelText('Start timer')
    
    act(() => {
      fireEvent.click(startButton)
    })
    
    // Timer should start and show pause button
    expect(screen.getByLabelText('Pause timer')).toBeInTheDocument()
    expect(screen.queryByLabelText('Start timer')).not.toBeInTheDocument()
  })

  it('should update timer display every second when running', async () => {
    render(<StudyTimer />)
    
    // Start timer
    act(() => {
      fireEvent.click(screen.getByLabelText('Start timer'))
    })
    
    // Advance time by 1 second
    act(() => {
      vi.advanceTimersByTime(1000)
    })
    expect(screen.getByText('00:00:01')).toBeInTheDocument()
    
    // Advance time by 1 minute
    act(() => {
      vi.advanceTimersByTime(59000)
    })
    expect(screen.getByText('00:01:00')).toBeInTheDocument()
  })

  it('should pause timer when pause button is clicked', async () => {
    render(<StudyTimer />)
    
    // Start timer
    act(() => {
      fireEvent.click(screen.getByLabelText('Start timer'))
    })
    
    // Advance time
    act(() => {
      vi.advanceTimersByTime(5000)
    })
    expect(screen.getByText('00:00:05')).toBeInTheDocument()
    
    // Pause timer
    act(() => {
      fireEvent.click(screen.getByLabelText('Pause timer'))
    })
    
    // Should show start button and time should stop progressing
    expect(screen.getByLabelText('Start timer')).toBeInTheDocument()
    
    // Advance more time - timer should not update
    act(() => {
      vi.advanceTimersByTime(3000)
    })
    expect(screen.getByText('00:00:05')).toBeInTheDocument()
  })

  it('should reset timer when reset button is clicked', async () => {
    render(<StudyTimer />)
    
    // Start timer and let it run
    act(() => {
      fireEvent.click(screen.getByLabelText('Start timer'))
    })
    act(() => {
      vi.advanceTimersByTime(30000)
    })
    expect(screen.getByText('00:00:30')).toBeInTheDocument()
    
    // Reset timer
    act(() => {
      fireEvent.click(screen.getByLabelText('Reset timer'))
    })
    
    expect(screen.getByText('00:00:00')).toBeInTheDocument()
    expect(screen.getByLabelText('Start timer')).toBeInTheDocument()
  })

  it('should call onSessionEnd when timer stops after running', async () => {
    const handleSessionEnd = vi.fn()
    
    render(<StudyTimer onSessionEnd={handleSessionEnd} />)
    
    // Start timer, let it run, then pause
    act(() => {
      fireEvent.click(screen.getByLabelText('Start timer'))
    })
    act(() => {
      vi.advanceTimersByTime(120000) // 2 minutes
    })
    act(() => {
      fireEvent.click(screen.getByLabelText('Pause timer'))
    })
    
    expect(handleSessionEnd).toHaveBeenCalledWith({
      duration: 120, // seconds
      startTime: expect.any(Date),
      endTime: expect.any(Date)
    })
  })

  it('should display current subject when provided', () => {
    const subject = {
      id: '1',
      name: 'Mathematics',
      description: 'Calculus and Algebra',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date()
    }
    
    render(<StudyTimer subject={subject} />)
    expect(screen.getByText('Mathematics')).toBeInTheDocument()
    expect(screen.getByText('üìä')).toBeInTheDocument()
  })

  it('should have proper accessibility attributes', () => {
    render(<StudyTimer />)
    
    // Timer display should have proper role and label
    expect(screen.getByRole('timer')).toBeInTheDocument()
    expect(screen.getByLabelText('Study timer')).toBeInTheDocument()
    
    // Buttons should have proper labels
    expect(screen.getByLabelText('Start timer')).toBeInTheDocument()
    expect(screen.getByLabelText('Reset timer')).toBeInTheDocument()
  })

  it('should format time correctly for hours', async () => {
    render(<StudyTimer />)
    
    act(() => {
      fireEvent.click(screen.getByLabelText('Start timer'))
    })
    
    // Test 1 hour 30 minutes 45 seconds
    act(() => {
      vi.advanceTimersByTime(5445000) // 1:30:45
    })
    
    expect(screen.getByText('01:30:45')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/OnboardingPage.integration.test.tsx">
import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { BrowserRouter } from 'react-router-dom'
import OnboardingPage from '../../src/pages/OnboardingPage'
import { useExamStore } from '../../src/stores/examStore'

// Mock the examStore to test integration
const renderOnboardingPage = () => {
  return render(
    <BrowserRouter>
      <OnboardingPage />
    </BrowserRouter>
  )
}

describe('Onboarding Integration Flow', () => {
  beforeEach(() => {
    // Reset store state before each test
    useExamStore.getState().reset()
  })

  it('should complete step 1: welcome screen interaction', async () => {
    renderOnboardingPage()
    
    // Should show welcome message
    expect(screen.getByText(/welcome to examklar/i)).toBeInTheDocument()
    
    // Should have get started button
    expect(screen.getByRole('button', { name: /get started/i })).toBeInTheDocument()
    
    // Should show current step indicator
    expect(screen.getByText(/step 1/i)).toBeInTheDocument()
  })

  it('should advance to step 2 when get started is clicked', async () => {
    const user = userEvent.setup()
    renderOnboardingPage()
    
    // Click get started button
    await user.click(screen.getByRole('button', { name: /get started/i }))
    
    // Should advance to step 2
    await waitFor(() => {
      expect(screen.getByText(/step 2/i)).toBeInTheDocument()
    })
    
    // Should show subject selection form
    expect(screen.getByText(/add your first subject/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/subject name/i)).toBeInTheDocument()
  })

  it('should complete step 2: add subject and advance to step 3', async () => {
    const user = userEvent.setup()
    renderOnboardingPage()
    
    // Advance to step 2
    await user.click(screen.getByRole('button', { name: /get started/i }))
    
    await waitFor(() => {
      expect(screen.getByLabelText(/subject name/i)).toBeInTheDocument()
    })
    
    // Fill out subject form
    await user.type(screen.getByLabelText(/subject name/i), 'Mathematics')
    await user.type(screen.getByLabelText(/exam date/i), '2025-08-01')
    await user.type(screen.getByLabelText(/estimated hours/i), '40')
    
    // Click next to advance
    await user.click(screen.getByRole('button', { name: /next/i }))
    
    // Should advance to step 3
    await waitFor(() => {
      expect(screen.getByText(/step 3/i)).toBeInTheDocument()
    })
    
    // Should show completion screen
    expect(screen.getByText(/you're all set/i)).toBeInTheDocument()
    
    // Should show the added subject in store
    expect(useExamStore.getState().subjects).toHaveLength(1)
    expect(useExamStore.getState().subjects[0].name).toBe('Mathematics')
  })

  it('should complete full onboarding flow and redirect to dashboard', async () => {
    const user = userEvent.setup()
    renderOnboardingPage()
    
    // Step 1: Welcome
    await user.click(screen.getByRole('button', { name: /get started/i }))
    
    // Step 2: Add subject
    await waitFor(() => {
      expect(screen.getByLabelText(/subject name/i)).toBeInTheDocument()
    })
    
    await user.type(screen.getByLabelText(/subject name/i), 'Physics')
    await user.type(screen.getByLabelText(/exam date/i), '2025-09-15')
    await user.type(screen.getByLabelText(/estimated hours/i), '60')
    await user.click(screen.getByRole('button', { name: /next/i }))
    
    // Step 3: Completion
    await waitFor(() => {
      expect(screen.getByText(/you're all set/i)).toBeInTheDocument()
    })
    
    // Should have button to go to dashboard
    expect(screen.getByRole('button', { name: /go to dashboard/i })).toBeInTheDocument()
    
    // Verify final state
    const finalState = useExamStore.getState()
    expect(finalState.subjects).toHaveLength(1)
    expect(finalState.subjects[0]).toMatchObject({
      name: 'Physics',
      estimatedHours: 60
    })
    expect(finalState.onboardingCompleted).toBe(true)
  })

  it('should allow going back to previous steps', async () => {
    const user = userEvent.setup()
    renderOnboardingPage()
    
    // Advance to step 2
    await user.click(screen.getByRole('button', { name: /get started/i }))
    
    await waitFor(() => {
      expect(screen.getByText(/step 2/i)).toBeInTheDocument()
    })
    
    // Should have back button
    expect(screen.getByRole('button', { name: /back/i })).toBeInTheDocument()
    
    // Click back
    await user.click(screen.getByRole('button', { name: /back/i }))
    
    // Should return to step 1
    await waitFor(() => {
      expect(screen.getByText(/step 1/i)).toBeInTheDocument()
    })
    expect(screen.getByText(/welcome to examklar/i)).toBeInTheDocument()
  })

  it('should validate required fields in step 2', async () => {
    const user = userEvent.setup()
    renderOnboardingPage()
    
    // Advance to step 2
    await user.click(screen.getByRole('button', { name: /get started/i }))
    
    await waitFor(() => {
      expect(screen.getByLabelText(/subject name/i)).toBeInTheDocument()
    })
    
    // Try to advance without filling required fields
    await user.click(screen.getByRole('button', { name: /next/i }))
    
    // Should show validation errors
    expect(screen.getByText(/subject name is required/i)).toBeInTheDocument()
    expect(screen.getByText(/exam date is required/i)).toBeInTheDocument()
    
    // Should not advance to step 3
    expect(screen.getByText(/step 2/i)).toBeInTheDocument()
  })
})
</file>

<file path="current-session.md">
[2025-06-22T23:17:37.515277] üß™ TDD CYCLE 7 COMPLETE: Study Timer Component - 89/89 tests passing! Successfully implemented study timer following TDD methodology: RED (10 failing tests) ‚Üí GREEN (implemented StudyTimer with start/pause/reset, real-time updates, session tracking) ‚Üí REFACTOR (proper TypeScript types, accessibility, memory cleanup). Features: timer display, controls, subject integration, time formatting, session callbacks. Ready for next TDD cycle: Flashcard System.
[2025-06-22T23:25:35.328542] üß™ TDD CYCLE 8 COMPLETE: Flashcard System - 114/114 tests passing! Successfully implemented comprehensive flashcard system following TDD methodology: RED (25 failing tests) ‚Üí GREEN (implemented Flashcard + FlashcardDeck with interactive flipping, navigation, keyboard shortcuts, auto-advance, session tracking) ‚Üí REFACTOR (TypeScript types, useCallback optimization, accessibility). Features: card flipping, difficulty indicators, deck navigation, progress tracking, keyboard navigation, shuffle, session analytics. Ready for next TDD cycle: Quiz Engine.
</file>

<file path="NEXT_ACTIONS.md">
# NEXT ACTIONS - ExamKlar TDD Project

## LAST ACTION COMPLETED
‚úÖ üß™ TDD CYCLE 8 COMPLETE: Flashcard System - 114/114 tests passing! Successfully implemented comprehensive flashcard system following TDD methodology: RED (25 failing tests) ‚Üí GREEN (implemented Flashcard + FlashcardDeck with interactive flipping, navigation, keyboard shortcuts, auto-advance, session tracking) ‚Üí REFACTOR (TypeScript types, useCallback optimization, accessibility). Features: card flipping, difficulty indicators, deck navigation, progress tracking, keyboard navigation, shuffle, session analytics. Ready for next TDD cycle: Quiz Engine. (at 2025-06-22T23:25:35.328542)

## IMMEDIATE NEXT STEPS
1. Continue with TDD development workflow
2. **CRITICAL**: After your next action, run:
   ```bash
   python3 update_context.py "description of what you did"
   ```

## TDD WORKFLOW REMINDER
üß™ **RED-GREEN-REFACTOR**:
1. Write a failing test first
2. Write minimal code to make it pass
3. Refactor to improve code quality
4. Repeat

## MANDATORY RULE FOR ALL AIs
üö® **YOU MUST ALWAYS**:
1. After creating/modifying ANY file
2. After running ANY test
3. After ANY significant action
4. Run: `python3 update_context.py "what you just did"`

## Test Status Tracking
- **Unit Tests**: Run `npm test` to check current status
- **Coverage**: Aim for >90% coverage
- **TDD Cycle**: Always write tests before implementation

## Recovery Instructions
If you're a new AI taking over:
1. Read this file to see what was last done
2. Check current-session.md for full context
3. Continue with TDD workflow
4. **REMEMBER**: Update context after every action!

## Context Last Updated
2025-06-22T23:25:35.328542 - üß™ TDD CYCLE 8 COMPLETE: Flashcard System - 114/114 tests passing! Successfully implemented comprehensive flashcard system following TDD methodology: RED (25 failing tests) ‚Üí GREEN (implemented Flashcard + FlashcardDeck with interactive flipping, navigation, keyboard shortcuts, auto-advance, session tracking) ‚Üí REFACTOR (TypeScript types, useCallback optimization, accessibility). Features: card flipping, difficulty indicators, deck navigation, progress tracking, keyboard navigation, shuffle, session analytics. Ready for next TDD cycle: Quiz Engine.
</file>

<file path="project-status.json">
{
  "project_name": "ExamKlar - React TDD Project",
  "last_update": "2025-06-22T23:25:35.328542",
  "last_action": "\ud83e\uddea TDD CYCLE 8 COMPLETE: Flashcard System - 114/114 tests passing! Successfully implemented comprehensive flashcard system following TDD methodology: RED (25 failing tests) \u2192 GREEN (implemented Flashcard + FlashcardDeck with interactive flipping, navigation, keyboard shortcuts, auto-advance, session tracking) \u2192 REFACTOR (TypeScript types, useCallback optimization, accessibility). Features: card flipping, difficulty indicators, deck navigation, progress tracking, keyboard navigation, shuffle, session analytics. Ready for next TDD cycle: Quiz Engine.",
  "status": "active",
  "context_system": "tdd-focused",
  "methodology": "test-driven-development",
  "instructions": "Always run 'python3 update_context.py \"action\"' after any action"
}
</file>

<file path="21principper/21autonomprincipper.md">
Perfekt! Her er **DE KOMPLETTE 20 PRINCIPPER** for fejlfri autonom AI-kodning (uden overlap):

## **FUNDAMENTALE ARKITEKTUR (1-5)**

**1. Test-Driven Development (TDD)**  
Skriv tests f√∏rst, s√• koden. Giver AI klare, verificerbare m√•l.

**2. Atomic Commits & Continuous Integration**  
Sm√•, hyppige commits med automatisk test-k√∏rsel sikrer isoleret og verificerbar udvikling.

**3. Clear Specification-Driven Development**  
AI kr√¶ver utvetydige krav. Vage beskrivelser = uforudsigelige resultater.

**4. Dependency Isolation & Mocking**  
Mock eksterne afh√¶ngigheder s√• AI kan fokusere p√• √©n ting ad gangen.

**5. Contract-Based Programming**  
Definer pr√¶cise input/output kontrakter - typer, validering, fejlh√•ndtering.

## **KVALITETSSIKRING (6-10)**

**6. Regression Testing Suite**  
Trust, but verify - AI kan hj√¶lpe med at producere kode, men du skal rigo√∏st gennemg√• og teste output.

**7. Static Code Analysis Integration**  
Automatiserede code quality checks fanger fejl som AI overser - formatering, sikkerhed, performance.

**8. Code Coverage Monitoring**  
Minimum 80% coverage, fokus p√• kritiske business logic paths.

**9. Multi-File Context Preservation**  
Coherent, cross-file modifications mens dyb kode-kontekst bevares.

**10. Performance Profiling Integration**  
AI skal automatisk tjekke for performance-regression efter hver √¶ndring.

## **SIKKERHED & COMPLIANCE (11-15)**

**11. Security Vulnerability Scanning**  
AI kan foresl√• usikker kode, hardcoded secrets eller for√¶ldede biblioteker - automatisk scanning er kritisk.

**12. Secrets Management Validation**  
AI kan utilsigtet introducere sikkerhedss√•rbarheder - gennemg√• grundigt for security best practices.

**13. Data Privacy & Encryption Compliance**  
Sikr dataprivatliv gennem kryptering, anonymisering og strenge adgangskontroller.

**14. AI System Security Design**  
Design dit AI-system for sikkerhed s√•vel som funktionalitet og performance.

**15. Human-in-the-Loop Validation Points**  
Kritiske arkitektoniske beslutninger og sikkerhedsrelevant kode skal altid gennemg√•s af mennesker.

## **UDVIKLINGSFLOW (16-20)**

**16. Incremental Refactoring Cycles**  
AI arbejder bedst med sm√• dele ad gangen - Red-Green-Refactor cyklussen.

**17. Fail-Fast Design Patterns**  
Byg kode der fejler hurtigt og tydeligt frem for at skjule problemer.

**18. Rollback & Recovery Mechanisms**  
Hver AI-√¶ndring skal kunne rulles tilbage √∏jeblikkeligt hvis den introducerer fejl.

**19. Documentation-as-Code Integration**  
AI skal automatisk opdatere dokumentation sammen med kode√¶ndringer.

**20. Continuous Learning Feedback Loops**  
Analyser bugs og regressionsm√∏nstre for at forbedre AI's fremtidige kode-generering.

## **BONUS: Det 21. Princip**

**21. Context Window Management**  
AI har begr√¶nsede context-vinduer - prioriter den mest kritiske information og del store opgaver op i mindre, h√•ndterbare chunks.

**Der du har det!** Alle 20+ validerede principper for fejlfri autonom AI-kodning. Din React Clean Slate plan f√∏lger allerede mange af disse - det er derfor den er s√• solid! üöÄ
</file>

<file path="Contextsystem/check_context.py">
#!/usr/bin/env python3
"""
ExamKlar Context Checker
Displays current project status and TDD progress
"""

import json
import os
from datetime import datetime

def check_context():
    """Display current project context and status"""
    
    print("üß™ EXAMKLAR TDD PROJECT STATUS")
    print("=" * 50)
    
    # Check if project status exists
    if os.path.exists('project-status.json'):
        with open('project-status.json', 'r') as f:
            status = json.load(f)
        
        print(f"üìã Project: {status.get('project_name', 'Unknown')}")
        print(f"üìÖ Last Update: {status.get('last_update', 'Unknown')}")
        print(f"üéØ Status: {status.get('status', 'Unknown')}")
        print(f"‚ö° Methodology: {status.get('methodology', 'Unknown')}")
        print(f"üîß Last Action: {status.get('last_action', 'Unknown')}")
    else:
        print("‚ùå No project status found!")
    
    print("\n" + "=" * 50)
    print("üß™ TDD WORKFLOW CHECKLIST")
    print("=" * 50)
    
    # Check for package.json (project setup)
    if os.path.exists('../package.json'):
        print("‚úÖ React project structure exists")
    else:
        print("‚ùå No package.json found - project not initialized")
    
    # Check for test directory
    if os.path.exists('../tests') or os.path.exists('../src/__tests__'):
        print("‚úÖ Test directory structure exists")
    else:
        print("‚ùå No test directory found")
    
    # Check for vitest config
    if os.path.exists('../vitest.config.ts') or os.path.exists('../vite.config.ts'):
        print("‚úÖ Test configuration found")
    else:
        print("‚ùå No test configuration found")
    
    print("\n" + "=" * 50)
    print("üìã CURRENT SESSION LOG")
    print("=" * 50)
    
    if os.path.exists('current-session.md'):
        with open('current-session.md', 'r') as f:
            content = f.read()
        if content.strip():
            print(content)
        else:
            print("üìù No session activity logged yet")
    else:
        print("üìù No session log found")
    
    print("\n" + "=" * 50)
    print("üöÄ NEXT STEPS")
    print("=" * 50)
    
    if os.path.exists('NEXT_ACTIONS.md'):
        with open('NEXT_ACTIONS.md', 'r') as f:
            lines = f.readlines()
        
        # Find the immediate next steps section
        in_next_steps = False
        for line in lines:
            if "IMMEDIATE NEXT STEPS" in line:
                in_next_steps = True
                continue
            elif in_next_steps and line.startswith("##"):
                break
            elif in_next_steps and line.strip():
                print(line.strip())
    else:
        print("üìù No next actions file found")
    
    print("\n" + "=" * 50)
    print("üß™ TDD REMINDER")
    print("=" * 50)
    print("1. üî¥ RED: Write a failing test")
    print("2. üü¢ GREEN: Write minimal code to pass")
    print("3. üîµ REFACTOR: Improve code quality")
    print("4. üîÑ REPEAT: Continue the cycle")
    print("\nüí° Remember: Update context after every action!")

if __name__ == "__main__":
    check_context()
</file>

<file path="Contextsystem/update_context.py">
#!/usr/bin/env python3
"""
ExamKlar Context Management System
Ensures continuity between AI coding sessions with TDD focus
"""

import json
import os
from datetime import datetime
import sys

def update_context(action_description):
    """Update project context with latest action"""
    timestamp = datetime.now().isoformat()
    
    # Update project status
    status_data = {
        "project_name": "ExamKlar - React TDD Project",
        "last_update": timestamp,
        "last_action": action_description,
        "status": "active",
        "context_system": "tdd-focused",
        "methodology": "test-driven-development",
        "instructions": "Always run 'python3 update_context.py \"action\"' after any action"
    }
    
    with open('project-status.json', 'w') as f:
        json.dump(status_data, f, indent=2)
    
    # Update NEXT_ACTIONS.md
    next_actions_content = f"""# NEXT ACTIONS - ExamKlar TDD Project

## LAST ACTION COMPLETED
‚úÖ {action_description} (at {timestamp})

## IMMEDIATE NEXT STEPS
1. Continue with TDD development workflow
2. **CRITICAL**: After your next action, run:
   ```bash
   python3 update_context.py "description of what you did"
   ```

## TDD WORKFLOW REMINDER
üß™ **RED-GREEN-REFACTOR**:
1. Write a failing test first
2. Write minimal code to make it pass
3. Refactor to improve code quality
4. Repeat

## MANDATORY RULE FOR ALL AIs
üö® **YOU MUST ALWAYS**:
1. After creating/modifying ANY file
2. After running ANY test
3. After ANY significant action
4. Run: `python3 update_context.py "what you just did"`

## Test Status Tracking
- **Unit Tests**: Run `npm test` to check current status
- **Coverage**: Aim for >90% coverage
- **TDD Cycle**: Always write tests before implementation

## Recovery Instructions
If you're a new AI taking over:
1. Read this file to see what was last done
2. Check current-session.md for full context
3. Continue with TDD workflow
4. **REMEMBER**: Update context after every action!

## Context Last Updated
{timestamp} - {action_description}

"""
    
    with open('NEXT_ACTIONS.md', 'w') as f:
        f.write(next_actions_content)
    
    # Update current session log
    session_log_entry = f"[{timestamp}] {action_description}\n"
    
    with open('current-session.md', 'a') as f:
        f.write(session_log_entry)
    
    print(f"‚úÖ Context updated: {action_description}")
    print(f"üìù Timestamp: {timestamp}")
    print(f"üß™ Remember: Follow TDD - write tests first!")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùå Error: Please provide an action description")
        print("Usage: python3 update_context.py \"description of what you did\"")
        sys.exit(1)
    
    action = " ".join(sys.argv[1:])
    update_context(action)
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/layout/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/layout</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../../prettify.css" />
    <link rel="stylesheet" href="../../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../../index.html">All files</a> examklar-tdd/src/components/layout</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="Layout.tsx"><a href="Layout.tsx.html">Layout.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="21" class="abs high">21/21</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="21" class="abs high">21/21</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../../sorter.js"></script>
        <script src="../../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/layout/Layout.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/layout/Layout.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../../prettify.css" />
    <link rel="stylesheet" href="../../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/components/layout</a> Layout.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { type ReactNode } from 'react'
&nbsp;
interface LayoutProps {
  children: ReactNode
}
&nbsp;
const Layout = ({ children }: LayoutProps) =&gt; {
  return (
    &lt;div className="min-h-screen bg-gray-50"&gt;
      &lt;nav role="navigation" className="bg-white shadow-lg"&gt;
        &lt;div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"&gt;
          &lt;div className="flex justify-between h-16"&gt;
            &lt;div className="flex items-center"&gt;
              &lt;h1 className="text-xl font-bold text-blue-600"&gt;ExamKlar&lt;/h1&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/nav&gt;
      
      &lt;main role="main" className="py-8"&gt;
        &lt;div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"&gt;
          {children}
        &lt;/div&gt;
      &lt;/main&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default Layout
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../../sorter.js"></script>
        <script src="../../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> examklar-tdd/src/components</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>93/93</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">94.73% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>18/19</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>93/93</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="SubjectCard.tsx"><a href="SubjectCard.tsx.html">SubjectCard.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="93" class="abs high">93/93</td>
	<td data-value="94.73" class="pct high">94.73%</td>
	<td data-value="19" class="abs high">18/19</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="93" class="abs high">93/93</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/SubjectCard.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/SubjectCard.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/components</a> SubjectCard.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>93/93</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">94.73% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>18/19</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>93/93</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import React from 'react'
import type { Subject } from '../types'
&nbsp;
/**
 * SubjectCard component props
 */
export interface SubjectCardProps {
  /** Subject data to display */
  subject: Subject
  /** Progress percentage (0-100) */
  progress?: number
  /** Callback when card is selected */
  onSelect?: (subject: Subject) =&gt; void
  /** Additional CSS classes */
  className?: string
}
&nbsp;
/**
 * Format date to readable string
 */
const formatDate = (date: Date): string =&gt; {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}
&nbsp;
/**
 * Calculate days until exam
 */
const getDaysUntilExam = (examDate: Date): number =&gt; {
  const today = new Date()
  const timeDiff = examDate.getTime() - today.getTime()
  return Math.ceil(timeDiff / (1000 * 3600 * 24))
}
&nbsp;
/**
 * Get urgency styling based on days until exam
 */
const getUrgencyStyle = (daysLeft: number): string =&gt; {
  if (daysLeft &lt; 0) return 'border-red-500 bg-red-50' // Overdue
  if (daysLeft &lt;= 7) return 'border-red-200 bg-red-25' // Urgent
  if (daysLeft &lt;= 30) return 'border-yellow-200 bg-yellow-25' // Soon
  return 'border-gray-200 bg-white' // Normal
}
&nbsp;
/**
 * SubjectCard component displays subject information with progress and status
 * 
 * @example
 * &lt;SubjectCard 
 *   subject={mathSubject}
 *   progress={75}
 *   onSelect={handleSubjectSelect}
 * /&gt;
 */
export const SubjectCard: React.FC&lt;SubjectCardProps&gt; = ({
  subject,
  progress,
  onSelect,
  className = ''
}) =&gt; {
  const daysLeft = getDaysUntilExam(subject.examDate)
  const urgencyStyle = getUrgencyStyle(daysLeft)
  
  const handleClick = () =&gt; {
    onSelect?.(subject)
  }
  
  const handleKeyDown = (event: React.KeyboardEvent) =&gt; {
    if (event.key === <span class="branch-0 cbranch-no" title="branch not covered" >'Enter' || event.key === ' ') {</span>
      event.preventDefault()
      onSelect?.(subject)
    }
  }
  
  const cardAriaLabel = `${subject.name} subject card. Exam on ${formatDate(subject.examDate)}. ${subject.estimatedHours} hours estimated study time.${progress ? ` ${progress}% complete.` : ''}`
&nbsp;
  return (
    &lt;button
      className={`w-full p-6 rounded-lg border-2 text-left transition-all hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${urgencyStyle} ${className}`}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      aria-label={cardAriaLabel}
      role="button"
      tabIndex={0}
    &gt;
      {/* Header with emoji and title */}
      &lt;div className="flex items-start justify-between mb-3"&gt;
        &lt;div className="flex items-center space-x-3"&gt;
          &lt;span className="text-2xl" role="img" aria-label={`${subject.name} emoji`}&gt;
            {subject.emoji}
          &lt;/span&gt;
          &lt;div&gt;
            &lt;h3 className="text-lg font-semibold text-gray-900"&gt;
              {subject.name}
            &lt;/h3&gt;
            {subject.description &amp;&amp; (
              &lt;p className="text-sm text-gray-600 mt-1"&gt;
                {subject.description}
              &lt;/p&gt;
            )}
          &lt;/div&gt;
        &lt;/div&gt;
        
        {/* Status badge */}
        &lt;div className="flex flex-col items-end"&gt;
          {daysLeft &lt; 0 ? (
            &lt;span className="text-xs font-medium text-red-600 bg-red-100 px-2 py-1 rounded"&gt;
              Overdue
            &lt;/span&gt;
          ) : (
            &lt;span className="text-xs text-gray-500"&gt;
              {daysLeft} days left
            &lt;/span&gt;
          )}
        &lt;/div&gt;
      &lt;/div&gt;
      
      {/* Exam date and study time */}
      &lt;div className="flex justify-between items-center mb-3 text-sm text-gray-600"&gt;
        &lt;span&gt;Exam: {formatDate(subject.examDate)}&lt;/span&gt;
        &lt;span&gt;{subject.estimatedHours} hours&lt;/span&gt;
      &lt;/div&gt;
      
      {/* Progress bar */}
      {progress !== undefined &amp;&amp; (
        &lt;div className="mt-4"&gt;
          &lt;div className="flex justify-between items-center mb-1"&gt;
            &lt;span className="text-xs text-gray-600"&gt;Progress&lt;/span&gt;
            &lt;span className="text-xs font-medium text-gray-900"&gt;{progress}%&lt;/span&gt;
          &lt;/div&gt;
          &lt;div className="w-full bg-gray-200 rounded-full h-2"&gt;
            &lt;div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${Math.min(Math.max(progress, 0), 100)}%` }}
              role="progressbar"
              aria-valuenow={progress}
              aria-valuemin={0}
              aria-valuemax={100}
              aria-label={`Study progress: ${progress}% complete`}
            /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      )}
    &lt;/button&gt;
  )
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/DashboardPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/DashboardPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> DashboardPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const DashboardPage = () =&gt; {
  return (
    &lt;div className="py-8"&gt;
      &lt;h1 className="text-3xl font-bold text-gray-900 mb-6"&gt;
        Dashboard
      &lt;/h1&gt;
      &lt;div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"&gt;
        &lt;div className="bg-white rounded-lg shadow p-6"&gt;
          &lt;h2 className="text-xl font-semibold mb-4"&gt;Study Progress&lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;Track your learning journey&lt;/p&gt;
        &lt;/div&gt;
        &lt;div className="bg-white rounded-lg shadow p-6"&gt;
          &lt;h2 className="text-xl font-semibold mb-4"&gt;Upcoming Exams&lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;Stay on top of your schedule&lt;/p&gt;
        &lt;/div&gt;
        &lt;div className="bg-white rounded-lg shadow p-6"&gt;
          &lt;h2 className="text-xl font-semibold mb-4"&gt;Quick Actions&lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;Start studying or reviewing&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div className="mt-8"&gt;
        &lt;h2 className="text-xl font-semibold mb-4"&gt;Study Overview&lt;/h2&gt;
        &lt;p className="text-gray-600"&gt;Overview of your current study status&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default DashboardPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/FlashcardsPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/FlashcardsPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> FlashcardsPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const FlashcardsPage = () =&gt; {
  return (
    &lt;div className="py-8"&gt;
      &lt;h1 className="text-3xl font-bold text-gray-900 mb-6"&gt;
        Flashcards
      &lt;/h1&gt;
      &lt;div className="bg-white rounded-lg shadow-lg p-8 max-w-2xl mx-auto"&gt;
        &lt;div className="text-center mb-8"&gt;
          &lt;h2 className="text-2xl font-semibold text-gray-800 mb-4"&gt;
            Interactive Flashcards
          &lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;
            Review key concepts with our smart flashcard system
          &lt;/p&gt;
        &lt;/div&gt;
        &lt;div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-8 text-center"&gt;
          &lt;div className="bg-white rounded-lg shadow p-6 mb-4"&gt;
            &lt;h3 className="text-lg font-medium text-gray-800 mb-2"&gt;
              Sample Flashcard
            &lt;/h3&gt;
            &lt;p className="text-gray-600"&gt;
              Click to reveal the answer
            &lt;/p&gt;
          &lt;/div&gt;
          &lt;button className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"&gt;
            Flip Card
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default FlashcardsPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> examklar-tdd/src/pages</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>136/136</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>136/136</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="DashboardPage.tsx"><a href="DashboardPage.tsx.html">DashboardPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	</tr>

<tr>
	<td class="file high" data-value="FlashcardsPage.tsx"><a href="FlashcardsPage.tsx.html">FlashcardsPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	</tr>

<tr>
	<td class="file high" data-value="NotFoundPage.tsx"><a href="NotFoundPage.tsx.html">NotFoundPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="12" class="abs high">12/12</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="12" class="abs high">12/12</td>
	</tr>

<tr>
	<td class="file high" data-value="OnboardingPage.tsx"><a href="OnboardingPage.tsx.html">OnboardingPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="14" class="abs high">14/14</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="14" class="abs high">14/14</td>
	</tr>

<tr>
	<td class="file high" data-value="QuizPage.tsx"><a href="QuizPage.tsx.html">QuizPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="32" class="abs high">32/32</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="32" class="abs high">32/32</td>
	</tr>

<tr>
	<td class="file high" data-value="StudyPage.tsx"><a href="StudyPage.tsx.html">StudyPage.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/NotFoundPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/NotFoundPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> NotFoundPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>12/12</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>12/12</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const NotFoundPage = () =&gt; {
  return (
    &lt;div className="py-8 text-center"&gt;
      &lt;h1 className="text-3xl font-bold text-gray-900 mb-6"&gt;
        Page Not Found
      &lt;/h1&gt;
      &lt;div className="bg-white rounded-lg shadow p-6 max-w-md mx-auto"&gt;
        &lt;p className="text-gray-600"&gt;
          The page you're looking for doesn't exist.
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default NotFoundPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/OnboardingPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/OnboardingPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> OnboardingPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>14/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>14/14</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const OnboardingPage = () =&gt; {
  return (
    &lt;div className="text-center py-12"&gt;
      &lt;h1 className="text-4xl font-bold text-gray-900 mb-4"&gt;
        Welcome to ExamKlar
      &lt;/h1&gt;
      &lt;p className="text-xl text-gray-600 mb-8"&gt;
        Your AI-powered study companion
      &lt;/p&gt;
      &lt;div className="bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto"&gt;
        &lt;p className="text-gray-700"&gt;
          Get started with your personalized exam preparation journey
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default OnboardingPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/QuizPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/QuizPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> QuizPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>32/32</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>32/32</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const QuizPage = () =&gt; {
  return (
    &lt;div className="py-8"&gt;
      &lt;h1 className="text-3xl font-bold text-gray-900 mb-6"&gt;
        Quiz
      &lt;/h1&gt;
      &lt;div className="bg-white rounded-lg shadow-lg p-8 max-w-3xl mx-auto"&gt;
        &lt;div className="text-center mb-8"&gt;
          &lt;h2 className="text-2xl font-semibold text-gray-800 mb-4"&gt;
            Test Your Knowledge
          &lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;
            Challenge yourself with personalized quizzes
          &lt;/p&gt;
        &lt;/div&gt;
        &lt;div className="bg-gray-50 rounded-lg p-6"&gt;
          &lt;h3 className="text-lg font-medium text-gray-800 mb-4"&gt;
            Question 1 of 10
          &lt;/h3&gt;
          &lt;p className="text-gray-700 mb-6"&gt;
            Sample quiz question will appear here
          &lt;/p&gt;
          &lt;div className="space-y-3"&gt;
            &lt;button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300"&gt;
              A) Option A
            &lt;/button&gt;
            &lt;button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300"&gt;
              B) Option B
            &lt;/button&gt;
            &lt;button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300"&gt;
              C) Option C
            &lt;/button&gt;
            &lt;button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300"&gt;
              D) Option D
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default QuizPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/pages/StudyPage.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/pages/StudyPage.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/pages</a> StudyPage.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">const StudyPage = () =&gt; {
  return (
    &lt;div className="py-8"&gt;
      &lt;h1 className="text-3xl font-bold text-gray-900 mb-6"&gt;
        Study Session
      &lt;/h1&gt;
      &lt;div className="bg-white rounded-lg shadow-lg p-8 max-w-4xl mx-auto"&gt;
        &lt;div className="text-center mb-8"&gt;
          &lt;h2 className="text-2xl font-semibold text-gray-800 mb-4"&gt;
            Ready to start your study session?
          &lt;/h2&gt;
          &lt;p className="text-gray-600"&gt;
            Choose your subject and dive into focused learning
          &lt;/p&gt;
        &lt;/div&gt;
        &lt;div className="grid grid-cols-1 md:grid-cols-2 gap-6"&gt;
          &lt;div className="bg-blue-50 rounded-lg p-6"&gt;
            &lt;h3 className="text-lg font-medium text-blue-900 mb-2"&gt;Timer&lt;/h3&gt;
            &lt;p className="text-blue-700"&gt;25:00&lt;/p&gt;
          &lt;/div&gt;
          &lt;div className="bg-green-50 rounded-lg p-6"&gt;
            &lt;h3 className="text-lg font-medium text-green-900 mb-2"&gt;Progress&lt;/h3&gt;
            &lt;p className="text-green-700"&gt;0% Complete&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
&nbsp;
export default StudyPage
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/base.css">
body, html {
  margin:0; padding: 0;
  height: 100%;
}
body {
    font-family: Helvetica Neue, Helvetica, Arial;
    font-size: 14px;
    color:#333;
}
.small { font-size: 12px; }
*, *:after, *:before {
  -webkit-box-sizing:border-box;
     -moz-box-sizing:border-box;
          box-sizing:border-box;
  }
h1 { font-size: 20px; margin: 0;}
h2 { font-size: 14px; }
pre {
    font: 12px/1.4 Consolas, "Liberation Mono", Menlo, Courier, monospace;
    margin: 0;
    padding: 0;
    -moz-tab-size: 2;
    -o-tab-size:  2;
    tab-size: 2;
}
a { color:#0074D9; text-decoration:none; }
a:hover { text-decoration:underline; }
.strong { font-weight: bold; }
.space-top1 { padding: 10px 0 0 0; }
.pad2y { padding: 20px 0; }
.pad1y { padding: 10px 0; }
.pad2x { padding: 0 20px; }
.pad2 { padding: 20px; }
.pad1 { padding: 10px; }
.space-left2 { padding-left:55px; }
.space-right2 { padding-right:20px; }
.center { text-align:center; }
.clearfix { display:block; }
.clearfix:after {
  content:'';
  display:block;
  height:0;
  clear:both;
  visibility:hidden;
  }
.fl { float: left; }
@media only screen and (max-width:640px) {
  .col3 { width:100%; max-width:100%; }
  .hide-mobile { display:none!important; }
}

.quiet {
  color: #7f7f7f;
  color: rgba(0,0,0,0.5);
}
.quiet a { opacity: 0.7; }

.fraction {
  font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 10px;
  color: #555;
  background: #E8E8E8;
  padding: 4px 5px;
  border-radius: 3px;
  vertical-align: middle;
}

div.path a:link, div.path a:visited { color: #333; }
table.coverage {
  border-collapse: collapse;
  margin: 10px 0 0 0;
  padding: 0;
}

table.coverage td {
  margin: 0;
  padding: 0;
  vertical-align: top;
}
table.coverage td.line-count {
    text-align: right;
    padding: 0 5px 0 20px;
}
table.coverage td.line-coverage {
    text-align: right;
    padding-right: 10px;
    min-width:20px;
}

table.coverage td span.cline-any {
    display: inline-block;
    padding: 0 5px;
    width: 100%;
}
.missing-if-branch {
    display: inline-block;
    margin-right: 5px;
    border-radius: 3px;
    position: relative;
    padding: 0 4px;
    background: #333;
    color: yellow;
}

.skip-if-branch {
    display: none;
    margin-right: 10px;
    position: relative;
    padding: 0 4px;
    background: #ccc;
    color: white;
}
.missing-if-branch .typ, .skip-if-branch .typ {
    color: inherit !important;
}
.coverage-summary {
  border-collapse: collapse;
  width: 100%;
}
.coverage-summary tr { border-bottom: 1px solid #bbb; }
.keyline-all { border: 1px solid #ddd; }
.coverage-summary td, .coverage-summary th { padding: 10px; }
.coverage-summary tbody { border: 1px solid #bbb; }
.coverage-summary td { border-right: 1px solid #bbb; }
.coverage-summary td:last-child { border-right: none; }
.coverage-summary th {
  text-align: left;
  font-weight: normal;
  white-space: nowrap;
}
.coverage-summary th.file { border-right: none !important; }
.coverage-summary th.pct { }
.coverage-summary th.pic,
.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs { text-align: right; }
.coverage-summary td.file { white-space: nowrap;  }
.coverage-summary td.pic { min-width: 120px !important;  }
.coverage-summary tfoot td { }

.coverage-summary .sorter {
    height: 10px;
    width: 7px;
    display: inline-block;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}
.coverage-summary .sorted .sorter {
    background-position: 0 -20px;
}
.coverage-summary .sorted-desc .sorter {
    background-position: 0 -10px;
}
.status-line {  height: 10px; }
/* yellow */
.cbranch-no { background: yellow !important; color: #111; }
/* dark red */
.red.solid, .status-line.low, .low .cover-fill { background:#C21F39 }
.low .chart { border:1px solid #C21F39 }
.highlighted,
.highlighted .cstat-no, .highlighted .fstat-no, .highlighted .cbranch-no{
  background: #C21F39 !important;
}
/* medium red */
.cstat-no, .fstat-no, .cbranch-no, .cbranch-no { background:#F6C6CE }
/* light red */
.low, .cline-no { background:#FCE1E5 }
/* light green */
.high, .cline-yes { background:rgb(230,245,208) }
/* medium green */
.cstat-yes { background:rgb(161,215,106) }
/* dark green */
.status-line.high, .high .cover-fill { background:rgb(77,146,33) }
.high .chart { border:1px solid rgb(77,146,33) }
/* dark yellow (gold) */
.status-line.medium, .medium .cover-fill { background: #f9cd0b; }
.medium .chart { border:1px solid #f9cd0b; }
/* light yellow */
.medium { background: #fff4c2; }

.cstat-skip { background: #ddd; color: #111; }
.fstat-skip { background: #ddd; color: #111 !important; }
.cbranch-skip { background: #ddd !important; color: #111; }

span.cline-neutral { background: #eaeaea; }

.coverage-summary td.empty {
    opacity: .5;
    padding-top: 4px;
    padding-bottom: 4px;
    line-height: 1;
    color: #888;
}

.cover-fill, .cover-empty {
  display:inline-block;
  height: 12px;
}
.chart {
  line-height: 0;
}
.cover-empty {
    background: white;
}
.cover-full {
    border-right: none !important;
}
pre.prettyprint {
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
}
.com { color: #999 !important; }
.ignore-none { color: #999; font-weight: normal; }

.wrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -48px;
}
.footer, .push {
  height: 48px;
}
</file>

<file path="examklar-tdd/coverage/block-navigation.js">
/* eslint-disable */
var jumpToCode = (function init() {
    // Classes of code we would like to highlight in the file view
    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];

    // Elements to highlight in the file listing view
    var fileListingElements = ['td.pct.low'];

    // We don't want to select elements that are direct descendants of another match
    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `

    // Selecter that finds elements on the page to which we can jump
    var selector =
        fileListingElements.join(', ') +
        ', ' +
        notSelector +
        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`

    // The NodeList of matching elements
    var missingCoverageElements = document.querySelectorAll(selector);

    var currentIndex;

    function toggleClass(index) {
        missingCoverageElements
            .item(currentIndex)
            .classList.remove('highlighted');
        missingCoverageElements.item(index).classList.add('highlighted');
    }

    function makeCurrent(index) {
        toggleClass(index);
        currentIndex = index;
        missingCoverageElements.item(index).scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'center'
        });
    }

    function goToPrevious() {
        var nextIndex = 0;
        if (typeof currentIndex !== 'number' || currentIndex === 0) {
            nextIndex = missingCoverageElements.length - 1;
        } else if (missingCoverageElements.length > 1) {
            nextIndex = currentIndex - 1;
        }

        makeCurrent(nextIndex);
    }

    function goToNext() {
        var nextIndex = 0;

        if (
            typeof currentIndex === 'number' &&
            currentIndex < missingCoverageElements.length - 1
        ) {
            nextIndex = currentIndex + 1;
        }

        makeCurrent(nextIndex);
    }

    return function jump(event) {
        if (
            document.getElementById('fileSearch') === document.activeElement &&
            document.activeElement != null
        ) {
            // if we're currently focused on the search input, we don't want to navigate
            return;
        }

        switch (event.which) {
            case 78: // n
            case 74: // j
                goToNext();
                break;
            case 66: // b
            case 75: // k
            case 80: // p
                goToPrevious();
                break;
        }
    };
})();
window.addEventListener('keydown', jumpToCode);
</file>

<file path="examklar-tdd/coverage/prettify.css">
.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</file>

<file path="examklar-tdd/coverage/prettify.js">
/* eslint-disable */
window.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=["break,continue,do,else,for,if,return,while"];var u=[h,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"];var p=[u,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"];var l=[p,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"];var x=[p,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"];var R=[x,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"];var r="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes";var w=[p,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"];var s="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END";var I=[h,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"];var f=[h,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"];var H=[h,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/;var C="str";var z="kwd";var j="com";var O="typ";var G="lit";var L="pun";var F="pln";var m="tag";var E="dec";var J="src";var P="atn";var n="atv";var N="nocode";var M="(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?"\\x0":"\\x")+af.toString(16)}var ag=String.fromCharCode(af);if(ag==="\\"||ag==="-"||ag==="["||ag==="]"){ag="\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g"));var ak=[];var af=[];var ao=aq[0]==="^";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&"-"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=["["];if(ao){an.push("^")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push("-")}an.push(T(at[1]))}}an.push("]");return an.join("")}function W(al){var aj=al.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am;if(an[am]===undefined){aj[ak]="(?:"}}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]="\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if("^"===aj[ak]&&"^"!==aj[ak+1]){aj[ak]=""}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai==="["){aj[ak]=X(ag)}else{if(ai!=="\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return"["+String.fromCharCode(ap&~32,ap|32)+"]"})}}}}return aj.join("")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(""+ae)}aa.push("(?:"+W(ae)+")")}return new RegExp(aa.join("|"),ac?"gi":"g")}function a(V){var U=/(?:^|\s)nocode(?:\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Y=S&&"pre"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if("BR"===ad||"LI"===ad){X[W]="\n";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \t\r\n]+/g," ")}else{ac=ac.replace(/\r\n?/g,"\n")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join("").replace(/\n$/,""),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=""+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\0-\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap==="string"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&"lang-"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]==="string")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""])}else{if(T.multiLineStrings){W.push([C,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"])}else{W.push([C,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"])}}if(T.verbatimStrings){S.push([C,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"])}S.push([C,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,null])}else{W.push([j,/^#[^\r\n]*/,null,"#"])}}if(T.cStyleComments){S.push([j,/^\/\/[^\r\n]*/,null]);S.push([j,/^\/\*[\s\S]*?(?:\*\/|$)/,null])}if(T.regexLiterals){var X=("/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/");S.push(["lang-regex",new RegExp("^"+M+"("+X+")")])}var V=T.types;if(V){S.push([O,V])}var U=(""+T.keywords).replace(/^ | $/g,"");if(U.length){S.push([z,new RegExp("^(?:"+U.replace(/[\s,]+/g,"|")+")\\b"),null])}W.push([F,/^\s+/,null," \r\n\t\xA0"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[F,/^\\[\s\S]?/,null],[L,/^.[^\s\w\.$@\'\"\`\/\#\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\s)nocode(?:\s|$)/;var ab=/\r\n?|\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Z=S&&"pre"===S.substring(0,3);var af=ac.createElement("LI");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if("BR"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute("value",ag)}var aa=ac.createElement("OL");aa.className="linenums";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className="L"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode("\xA0"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\bMSIE\b/.test(navigator.userAgent);var am=/\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,"\r")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement("SPAN");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn("cannot override language handler %s",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\s*</.test(S)?"default-markup":"default-code"}return t[T]}c(K,["default-code"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\w[^>]*(?:>|$)/],[j,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);c(g([[F,/^[\s]+/,null," \t\r\n"],[n,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[m,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[P,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[L,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]);c(g([],[[n,/^[\s\S]+/]]),["uq.val"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),["c","cc","cpp","cxx","cyc","m"]);c(i({keywords:"null,true,false"}),["json"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),["cs"]);c(i({keywords:x,cStyleComments:true}),["java"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),["bsh","csh","sh"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),["cv","py"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),["perl","pl","pm"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),["rb"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),["js"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),["coffee"]);c(g([],[[C,/^[\s\S]+/]]),["regex"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if("console" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement("PRE");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y("pre"),Y("code"),Y("xmp")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\blang(?:uage)?-([\w.]+)(?!\S)/;var ae=/\bprettyprint\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf("prettyprint")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&"CODE"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName==="pre"||ak.tagName==="code"||ak.tagName==="xmp")&&ak.className&&ak.className.indexOf("prettyprint")>=0){al=true;break}}if(!al){var af=aj.className.match(/\blinenums\b(?::(\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\!--[\s\S]*?(?:-\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-handlebars",/^<script\b[^>]*type\s*=\s*['"]?text\/x-handlebars-template['"]?\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\s*[\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),["handlebars","hbs"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \t\r\n\f]+/,null," \t\r\n\f"]],[[PR.PR_STRING,/^\"(?:[^\n\r\f\\\"]|\\(?:\r\n?|\n|\f)|\\[\s\S])*\"/,null],[PR.PR_STRING,/^\'(?:[^\n\r\f\\\']|\\(?:\r\n?|\n|\f)|\\[\s\S])*\'/,null],["lang-css-str",/^url\(([^\)\"\']*)\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\!important|@import|@page|@media|@charset|inherit)(?=[^\-\w]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|(?:\\[0-9a-f]+ ?))(?:[_a-z0-9\-]|\\(?:\\[0-9a-f]+ ?))*)\s*:/i],[PR.PR_COMMENT,/^\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\s\w\'\"]+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\)\"\']+/]]),["css-str"]);
</file>

<file path="examklar-tdd/coverage/sorter.js">
/* eslint-disable */
var addSorting = (function() {
    'use strict';
    var cols,
        currentSort = {
            index: 0,
            desc: false
        };

    // returns the summary table element
    function getTable() {
        return document.querySelector('.coverage-summary');
    }
    // returns the thead element of the summary table
    function getTableHeader() {
        return getTable().querySelector('thead tr');
    }
    // returns the tbody element of the summary table
    function getTableBody() {
        return getTable().querySelector('tbody');
    }
    // returns the th element for nth column
    function getNthColumn(n) {
        return getTableHeader().querySelectorAll('th')[n];
    }

    function onFilterInput() {
        const searchValue = document.getElementById('fileSearch').value;
        const rows = document.getElementsByTagName('tbody')[0].children;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            if (
                row.textContent
                    .toLowerCase()
                    .includes(searchValue.toLowerCase())
            ) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    }

    // loads the search box
    function addSearchBox() {
        var template = document.getElementById('filterTemplate');
        var templateClone = template.content.cloneNode(true);
        templateClone.getElementById('fileSearch').oninput = onFilterInput;
        template.parentElement.appendChild(templateClone);
    }

    // loads all columns
    function loadColumns() {
        var colNodes = getTableHeader().querySelectorAll('th'),
            colNode,
            cols = [],
            col,
            i;

        for (i = 0; i < colNodes.length; i += 1) {
            colNode = colNodes[i];
            col = {
                key: colNode.getAttribute('data-col'),
                sortable: !colNode.getAttribute('data-nosort'),
                type: colNode.getAttribute('data-type') || 'string'
            };
            cols.push(col);
            if (col.sortable) {
                col.defaultDescSort = col.type === 'number';
                colNode.innerHTML =
                    colNode.innerHTML + '<span class="sorter"></span>';
            }
        }
        return cols;
    }
    // attaches a data attribute to every tr element with an object
    // of data values keyed by column name
    function loadRowData(tableRow) {
        var tableCols = tableRow.querySelectorAll('td'),
            colNode,
            col,
            data = {},
            i,
            val;
        for (i = 0; i < tableCols.length; i += 1) {
            colNode = tableCols[i];
            col = cols[i];
            val = colNode.getAttribute('data-value');
            if (col.type === 'number') {
                val = Number(val);
            }
            data[col.key] = val;
        }
        return data;
    }
    // loads all row data
    function loadData() {
        var rows = getTableBody().querySelectorAll('tr'),
            i;

        for (i = 0; i < rows.length; i += 1) {
            rows[i].data = loadRowData(rows[i]);
        }
    }
    // sorts the table using the data for the ith column
    function sortByIndex(index, desc) {
        var key = cols[index].key,
            sorter = function(a, b) {
                a = a.data[key];
                b = b.data[key];
                return a < b ? -1 : a > b ? 1 : 0;
            },
            finalSorter = sorter,
            tableBody = document.querySelector('.coverage-summary tbody'),
            rowNodes = tableBody.querySelectorAll('tr'),
            rows = [],
            i;

        if (desc) {
            finalSorter = function(a, b) {
                return -1 * sorter(a, b);
            };
        }

        for (i = 0; i < rowNodes.length; i += 1) {
            rows.push(rowNodes[i]);
            tableBody.removeChild(rowNodes[i]);
        }

        rows.sort(finalSorter);

        for (i = 0; i < rows.length; i += 1) {
            tableBody.appendChild(rows[i]);
        }
    }
    // removes sort indicators for current column being sorted
    function removeSortIndicators() {
        var col = getNthColumn(currentSort.index),
            cls = col.className;

        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');
        col.className = cls;
    }
    // adds sort indicators for current column being sorted
    function addSortIndicators() {
        getNthColumn(currentSort.index).className += currentSort.desc
            ? ' sorted-desc'
            : ' sorted';
    }
    // adds event listeners for all sorter widgets
    function enableUI() {
        var i,
            el,
            ithSorter = function ithSorter(i) {
                var col = cols[i];

                return function() {
                    var desc = col.defaultDescSort;

                    if (currentSort.index === i) {
                        desc = !currentSort.desc;
                    }
                    sortByIndex(i, desc);
                    removeSortIndicators();
                    currentSort.index = i;
                    currentSort.desc = desc;
                    addSortIndicators();
                };
            };
        for (i = 0; i < cols.length; i += 1) {
            if (cols[i].sortable) {
                // add the click event handler on the th so users
                // dont have to click on those tiny arrows
                el = getNthColumn(i).querySelector('.sorter').parentElement;
                if (el.addEventListener) {
                    el.addEventListener('click', ithSorter(i));
                } else {
                    el.attachEvent('onclick', ithSorter(i));
                }
            }
        }
    }
    // adds sorting functionality to the UI
    return function() {
        if (!getTable()) {
            return;
        }
        cols = loadColumns();
        loadData();
        addSearchBox();
        addSortIndicators();
        enableUI();
    };
})();

window.addEventListener('load', addSorting);
</file>

<file path="examklar-tdd/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="examklar-tdd/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="examklar-tdd/src/components/layout/Layout.tsx">
import { type ReactNode } from 'react'

interface LayoutProps {
  children: ReactNode
}

const Layout = ({ children }: LayoutProps) => {
  return (
    <div className="min-h-screen bg-gray-50">
      <nav role="navigation" className="bg-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-blue-600">ExamKlar</h1>
            </div>
          </div>
        </div>
      </nav>
      
      <main role="main" className="py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {children}
        </div>
      </main>
    </div>
  )
}

export default Layout
</file>

<file path="examklar-tdd/src/components/ui/Input.tsx">
import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

/**
 * Input component variants using class-variance-authority
 * Provides consistent styling and behavior across the application
 */
const inputVariants = cva(
  // Base styles applied to all inputs
  'w-full rounded-md border px-3 py-2 text-sm transition-colors placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed',
  {
    variants: {
      variant: {
        default: 'border-gray-300 focus:border-blue-500',
        error: 'border-red-500 focus:border-red-500 focus:ring-red-500',
        success: 'border-green-500 focus:border-green-500 focus:ring-green-500'
      },
      size: {
        sm: 'h-8 text-xs px-2',
        md: 'h-10 text-sm px-3',
        lg: 'h-12 text-base px-4'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'md'
    }
  }
)

/**
 * Input component props extending HTML input attributes
 * with custom styling and validation options
 */
export interface InputProps 
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,
    VariantProps<typeof inputVariants> {
  /** Label text for the input */
  label?: string
  /** Error message to display */
  error?: string
  /** Success state indicator */
  success?: boolean
  /** Help text to display below the input */
  helpText?: string
  /** Additional CSS classes to apply */
  className?: string
}

/**
 * Input component with label, validation states, and help text
 * 
 * @example
 * <Input 
 *   label="Email"
 *   type="email"
 *   required
 *   error="Please enter a valid email"
 *   helpText="We'll never share your email"
 * />
 */
export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ 
    className, 
    variant, 
    size, 
    label, 
    error, 
    success, 
    helpText, 
    required,
    id,
    ...props 
  }, ref) => {
    // Generate unique ID - call hook unconditionally
    const generatedId = React.useId()
    const inputId = id || generatedId
    
    // Determine variant based on error/success state
    const computedVariant = error ? 'error' : success ? 'success' : variant || 'default'
    
    // Generate describedBy ID for accessibility
    const describedBy = [
      error && `${inputId}-error`,
      helpText && `${inputId}-help`
    ].filter(Boolean).join(' ') || undefined

    return (
      <div className="space-y-1">
        {/* Label */}
        {label && (
          <label 
            htmlFor={inputId}
            className="block text-sm font-medium text-gray-700"
          >
            {label}
            {required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        
        {/* Input */}
        <input
          ref={ref}
          id={inputId}
          className={inputVariants({ variant: computedVariant, size, className })}
          aria-required={required}
          aria-invalid={!!error}
          aria-describedby={describedBy}
          {...props}
        />
        
        {/* Error Message */}
        {error && (
          <p 
            id={`${inputId}-error`}
            className="text-sm text-red-600"
            role="alert"
          >
            {error}
          </p>
        )}
        
        {/* Help Text */}
        {helpText && !error && (
          <p 
            id={`${inputId}-help`}
            className="text-sm text-gray-500"
          >
            {helpText}
          </p>
        )}
      </div>
    )
  }
)

Input.displayName = 'Input'
</file>

<file path="examklar-tdd/src/components/SubjectCard.tsx">
import React from 'react'
import type { Subject } from '../types'

/**
 * SubjectCard component props
 */
export interface SubjectCardProps {
  /** Subject data to display */
  subject: Subject
  /** Progress percentage (0-100) */
  progress?: number
  /** Callback when card is selected */
  onSelect?: (subject: Subject) => void
  /** Additional CSS classes */
  className?: string
}

/**
 * Format date to readable string
 */
const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

/**
 * Calculate days until exam
 */
const getDaysUntilExam = (examDate: Date): number => {
  const today = new Date()
  const timeDiff = examDate.getTime() - today.getTime()
  return Math.ceil(timeDiff / (1000 * 3600 * 24))
}

/**
 * Get urgency styling based on days until exam
 */
const getUrgencyStyle = (daysLeft: number): string => {
  if (daysLeft < 0) return 'border-red-500 bg-red-50' // Overdue
  if (daysLeft <= 7) return 'border-red-200 bg-red-25' // Urgent
  if (daysLeft <= 30) return 'border-yellow-200 bg-yellow-25' // Soon
  return 'border-gray-200 bg-white' // Normal
}

/**
 * SubjectCard component displays subject information with progress and status
 * 
 * @example
 * <SubjectCard 
 *   subject={mathSubject}
 *   progress={75}
 *   onSelect={handleSubjectSelect}
 * />
 */
export const SubjectCard: React.FC<SubjectCardProps> = ({
  subject,
  progress,
  onSelect,
  className = ''
}) => {
  const daysLeft = getDaysUntilExam(subject.examDate)
  const urgencyStyle = getUrgencyStyle(daysLeft)
  
  const handleClick = () => {
    onSelect?.(subject)
  }
  
  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      onSelect?.(subject)
    }
  }
  
  const cardAriaLabel = `${subject.name} subject card. Exam on ${formatDate(subject.examDate)}. ${subject.estimatedHours} hours estimated study time.${progress ? ` ${progress}% complete.` : ''}`

  return (
    <button
      className={`w-full p-6 rounded-lg border-2 text-left transition-all hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${urgencyStyle} ${className}`}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      aria-label={cardAriaLabel}
      role="button"
      tabIndex={0}
    >
      {/* Header with emoji and title */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-center space-x-3">
          <span className="text-2xl" role="img" aria-label={`${subject.name} emoji`}>
            {subject.emoji}
          </span>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              {subject.name}
            </h3>
            {subject.description && (
              <p className="text-sm text-gray-600 mt-1">
                {subject.description}
              </p>
            )}
          </div>
        </div>
        
        {/* Status badge */}
        <div className="flex flex-col items-end">
          {daysLeft < 0 ? (
            <span className="text-xs font-medium text-red-600 bg-red-100 px-2 py-1 rounded">
              Overdue
            </span>
          ) : (
            <span className="text-xs text-gray-500">
              {daysLeft} days left
            </span>
          )}
        </div>
      </div>
      
      {/* Exam date and study time */}
      <div className="flex justify-between items-center mb-3 text-sm text-gray-600">
        <span>Exam: {formatDate(subject.examDate)}</span>
        <span>{subject.estimatedHours} hours</span>
      </div>
      
      {/* Progress bar */}
      {progress !== undefined && (
        <div className="mt-4">
          <div className="flex justify-between items-center mb-1">
            <span className="text-xs text-gray-600">Progress</span>
            <span className="text-xs font-medium text-gray-900">{progress}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${Math.min(Math.max(progress, 0), 100)}%` }}
              role="progressbar"
              aria-valuenow={progress}
              aria-valuemin={0}
              aria-valuemax={100}
              aria-label={`Study progress: ${progress}% complete`}
            />
          </div>
        </div>
      )}
    </button>
  )
}
</file>

<file path="examklar-tdd/src/pages/FlashcardsPage.tsx">
const FlashcardsPage = () => {
  return (
    <div className="py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Flashcards
      </h1>
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-2xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Interactive Flashcards
          </h2>
          <p className="text-gray-600">
            Review key concepts with our smart flashcard system
          </p>
        </div>
        <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-8 text-center">
          <div className="bg-white rounded-lg shadow p-6 mb-4">
            <h3 className="text-lg font-medium text-gray-800 mb-2">
              Sample Flashcard
            </h3>
            <p className="text-gray-600">
              Click to reveal the answer
            </p>
          </div>
          <button className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
            Flip Card
          </button>
        </div>
      </div>
    </div>
  )
}

export default FlashcardsPage
</file>

<file path="examklar-tdd/src/pages/NotFoundPage.tsx">
const NotFoundPage = () => {
  return (
    <div className="py-8 text-center">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Page Not Found
      </h1>
      <div className="bg-white rounded-lg shadow p-6 max-w-md mx-auto">
        <p className="text-gray-600">
          The page you're looking for doesn't exist.
        </p>
      </div>
    </div>
  )
}

export default NotFoundPage
</file>

<file path="examklar-tdd/src/pages/QuizPage.tsx">
const QuizPage = () => {
  return (
    <div className="py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Quiz
      </h1>
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-3xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Test Your Knowledge
          </h2>
          <p className="text-gray-600">
            Challenge yourself with personalized quizzes
          </p>
        </div>
        <div className="bg-gray-50 rounded-lg p-6">
          <h3 className="text-lg font-medium text-gray-800 mb-4">
            Question 1 of 10
          </h3>
          <p className="text-gray-700 mb-6">
            Sample quiz question will appear here
          </p>
          <div className="space-y-3">
            <button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300">
              A) Option A
            </button>
            <button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300">
              B) Option B
            </button>
            <button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300">
              C) Option C
            </button>
            <button className="w-full text-left bg-white border border-gray-200 rounded-lg p-3 hover:bg-blue-50 hover:border-blue-300">
              D) Option D
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default QuizPage
</file>

<file path="examklar-tdd/src/stores/examStore.ts">
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import type { User, Subject, StudyPlan, Progress } from '../types'

/**
 * ExamKlar application state store
 * Manages user data, subjects, study plans, and progress tracking
 */
interface ExamStore {
  // State
  user: User | null
  subjects: Subject[]
  currentSubject: Subject | null
  studyPlan: StudyPlan | null
  progress: Progress | null
  onboardingCompleted: boolean
  
  // Actions
  setUser: (user: User) => void
  addSubject: (subject: Subject) => void
  removeSubject: (subjectId: string) => void
  setCurrentSubject: (subject: Subject) => void
  updateStudyPlan: (plan: StudyPlan) => void
  updateProgress: (progress: Progress) => void
  completeOnboarding: () => void
  
  // Computed getters
  getUpcomingDeadlines: () => Subject[]
  getCurrentProgress: () => number
  getTodaysGoal: () => number
  
  // Utility
  reset: () => void
}

const initialState = {
  user: null,
  subjects: [],
  currentSubject: null,
  studyPlan: null,
  progress: null,
  onboardingCompleted: false
}

/**
 * ExamKlar Zustand store with persistence and devtools
 */
export const useExamStore = create<ExamStore>()(
  devtools(
    persist(
      (set, get) => ({
        ...initialState,
        
        // User management
        setUser: (user) => set({ user }, false, 'setUser'),
        
        // Subject management
        addSubject: (subject) => set((state) => ({
          subjects: [...state.subjects, subject]
        }), false, 'addSubject'),
        
        removeSubject: (subjectId) => set((state) => {
          const updatedSubjects = state.subjects.filter(s => s.id !== subjectId)
          const currentSubject = state.currentSubject?.id === subjectId 
            ? null 
            : state.currentSubject
            
          return {
            subjects: updatedSubjects,
            currentSubject
          }
        }, false, 'removeSubject'),
        
        setCurrentSubject: (subject) => set({ currentSubject: subject }, false, 'setCurrentSubject'),
        
        // Study plan management
        updateStudyPlan: (plan) => set({ studyPlan: plan }, false, 'updateStudyPlan'),
        
        // Progress management
        updateProgress: (progress) => set({ progress }, false, 'updateProgress'),
        
        // Computed getters
        getUpcomingDeadlines: () => {
          const state = get()
          const now = new Date()
          
          return state.subjects
            .filter(subject => subject.examDate > now)
            .sort((a, b) => a.examDate.getTime() - b.examDate.getTime())
        },
        
        getCurrentProgress: () => {
          const state = get()
          // Calculate current progress based on study sessions and goals
          // This is a simplified implementation
          return state.progress?.weeklyProgress || 0
        },
        
        getTodaysGoal: () => {
          const state = get()
          return state.studyPlan?.dailyGoalMinutes || 30
        },
        
        // Onboarding management
        completeOnboarding: () => set({ onboardingCompleted: true }, false, 'completeOnboarding'),
        
        // Utility functions
        reset: () => set(initialState, false, 'reset')
      }),
      {
        name: 'examklar-storage',
        version: 1,
        // Serialize/deserialize dates properly
        partialize: (state) => ({
          ...state,
          user: state.user ? {
            ...state.user,
            createdAt: state.user.createdAt.toISOString()
          } : null,
          subjects: state.subjects.map(subject => ({
            ...subject,
            examDate: subject.examDate.toISOString(),
            createdAt: subject.createdAt.toISOString()
          })),
          currentSubject: state.currentSubject ? {
            ...state.currentSubject,
            examDate: state.currentSubject.examDate.toISOString(),
            createdAt: state.currentSubject.createdAt.toISOString()
          } : null,
          studyPlan: state.studyPlan ? {
            ...state.studyPlan,
            createdAt: state.studyPlan.createdAt.toISOString()
          } : null
        }),
        onRehydrateStorage: () => (state) => {
          if (state) {
            // Rehydrate dates from strings
            if (state.user) {
              state.user.createdAt = new Date(state.user.createdAt)
            }
            
            state.subjects = state.subjects.map(subject => ({
              ...subject,
              examDate: new Date(subject.examDate),
              createdAt: new Date(subject.createdAt)
            }))
            
            if (state.currentSubject) {
              state.currentSubject.examDate = new Date(state.currentSubject.examDate)
              state.currentSubject.createdAt = new Date(state.currentSubject.createdAt)
            }
            
            if (state.studyPlan) {
              state.studyPlan.createdAt = new Date(state.studyPlan.createdAt)
            }
          }
        }
      }
    ),
    {
      name: 'examklar-store'
    }
  )
)
</file>

<file path="examklar-tdd/src/types/index.ts">
/**
 * Core type definitions for ExamKlar application
 */

export interface User {
  id: string
  name: string
  email: string
  createdAt: Date
}

export interface Subject {
  id: string
  name: string
  description: string
  emoji: string
  examDate: Date
  estimatedHours: number
  createdAt: Date
}

export interface WeeklyGoal {
  week: number
  targetHours: number
  targetTopics: string[]
  milestones: string[]
}

export interface Milestone {
  id: string
  title: string
  description: string
  targetDate: Date
  completed: boolean
  completedAt?: Date
}

export interface StudyPlan {
  id: string
  subjectId: string
  totalDays: number
  dailyGoalMinutes: number
  weeklyGoals: WeeklyGoal[]
  milestones: Milestone[]
  createdAt: Date
}

export interface Content {
  id: string
  subjectId: string
  title: string
  type: 'document' | 'video' | 'article' | 'notes'
  content: string
  processingStatus: 'pending' | 'processed' | 'failed'
  extractedKeyPoints: string[]
  estimatedReadTime: number
  createdAt: Date
}

export interface FlashcardDeck {
  id: string
  subjectId: string
  name: string
  description: string
  cards: Flashcard[]
  createdAt: Date
}

export interface Flashcard {
  id: string
  front: string
  back: string
  difficulty: 'easy' | 'medium' | 'hard'
  tags: string[]
  lastReviewed: Date
  nextReview: Date
  correctStreak: number
  totalReviews: number
  subjectId?: string
  createdAt?: Date
}

export interface FlashcardSession {
  id: string
  flashcardIds: string[]
  startedAt: Date
  completedAt?: Date
  totalCards: number
  correctCards: number
  incorrectCards: number
  timeSpent: number // in seconds
}

export interface Quiz {
  id: string
  subjectId?: string
  title: string
  description: string
  questions: QuizQuestion[]
  timeLimit?: number // in seconds
  passingScore: number // percentage
  createdAt?: Date
}

export interface QuizQuestion {
  id: string
  question: string
  options: string[]
  correctAnswer: number // index of correct option
  explanation?: string
  difficulty: 'easy' | 'medium' | 'hard'
  points: number
}

export interface QuizAnswer {
  questionId: string
  selectedAnswer: number
  isCorrect: boolean
  timeSpent: number
}

export interface QuizResult {
  quizId: string
  score: number // percentage
  totalQuestions: number
  correctAnswers: number
  incorrectAnswers: number
  timeSpent: number // in seconds
  passed: boolean
  answers: QuizAnswer[]
  completedAt?: Date
}

export interface QuizHistory {
  quizId: string
  score: number
  passed: boolean
  completedAt: Date
  timeSpent: number
}

export interface StudySession {
  id: string
  subjectId: string
  startTime: Date
  endTime?: Date
  plannedDuration: number
  actualDuration?: number
  status: 'active' | 'completed' | 'paused'
  topics: string[]
  notes?: string
}

export interface Progress {
  sessionsCompleted: number
  totalStudyTime: number
  streakCount: number
  lastActivity: Date
  weeklyGoal: number
  weeklyProgress: number
}
</file>

<file path="examklar-tdd/src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="examklar-tdd/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="examklar-tdd/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="examklar-tdd/src/test-setup.ts">
import '@testing-library/jest-dom'
import { beforeEach } from 'vitest'
import { cleanup } from '@testing-library/react'

beforeEach(() => {
  cleanup()
})
</file>

<file path="examklar-tdd/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="examklar-tdd/tests/components/ui/Button.test.tsx">
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { describe, it, expect, vi } from 'vitest'
import { Button } from '../../../src/components/ui/Button'

describe('Button Component - TDD', () => {
  it('should render with provided text', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument()
  })
  
  it('should call onClick handler when clicked', async () => {
    const user = userEvent.setup()
    const handleClick = vi.fn()
    
    render(<Button onClick={handleClick}>Click me</Button>)
    
    await user.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })
  
  it('should apply primary variant styles by default', () => {
    render(<Button>Primary Button</Button>)
    const button = screen.getByRole('button')
    expect(button).toHaveClass('bg-blue-600')
  })
  
  it('should apply secondary variant styles when specified', () => {
    render(<Button variant="secondary">Secondary Button</Button>)
    const button = screen.getByRole('button')
    expect(button).toHaveClass('bg-gray-200')
  })
  
  it('should apply outline variant styles when specified', () => {
    render(<Button variant="outline">Outline Button</Button>)
    const button = screen.getByRole('button')
    expect(button).toHaveClass('border')
    expect(button).toHaveClass('border-gray-300')
  })
  
  it('should apply correct size classes', () => {
    const { rerender } = render(<Button size="sm">Small</Button>)
    expect(screen.getByRole('button')).toHaveClass('h-8', 'px-3', 'text-xs')
    
    rerender(<Button size="md">Medium</Button>)
    expect(screen.getByRole('button')).toHaveClass('h-10', 'px-4', 'text-sm')
    
    rerender(<Button size="lg">Large</Button>)
    expect(screen.getByRole('button')).toHaveClass('h-12', 'px-6', 'text-base')
  })
  
  it('should be disabled when disabled prop is true', () => {
    render(<Button disabled>Disabled Button</Button>)
    const button = screen.getByRole('button')
    expect(button).toBeDisabled()
    expect(button).toHaveClass('disabled:opacity-50', 'disabled:cursor-not-allowed')
  })
  
  it('should not call onClick when disabled', async () => {
    const user = userEvent.setup()
    const handleClick = vi.fn()
    
    render(<Button onClick={handleClick} disabled>Disabled Button</Button>)
    
    await user.click(screen.getByRole('button'))
    expect(handleClick).not.toHaveBeenCalled()
  })
  
  it('should forward ref correctly', () => {
    const ref = vi.fn()
    render(<Button ref={ref}>Button with ref</Button>)
    expect(ref).toHaveBeenCalled()
  })
})
</file>

<file path="examklar-tdd/tests/components/ui/Input.test.tsx">
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { describe, it, expect, vi } from 'vitest'
import { Input } from '../../../src/components/ui/Input'

describe('Input Component - TDD', () => {
  it('should render with placeholder text', () => {
    render(<Input placeholder="Enter your name" />)
    expect(screen.getByPlaceholderText('Enter your name')).toBeInTheDocument()
  })
  
  it('should render with label when provided', () => {
    render(<Input label="Username" />)
    expect(screen.getByLabelText('Username')).toBeInTheDocument()
    expect(screen.getByText('Username')).toBeInTheDocument()
  })
  
  it('should call onChange handler when value changes', async () => {
    const user = userEvent.setup()
    const handleChange = vi.fn()
    
    render(<Input onChange={handleChange} />)
    
    const input = screen.getByRole('textbox')
    await user.type(input, 'test')
    
    expect(handleChange).toHaveBeenCalledTimes(4) // One for each character
  })
  
  it('should display current value', () => {
    render(<Input value="test value" readOnly />)
    expect(screen.getByDisplayValue('test value')).toBeInTheDocument()
  })
  
  it('should show error state and message', () => {
    render(<Input error="This field is required" />)
    
    const input = screen.getByRole('textbox')
    expect(input).toHaveClass('border-red-500')
    expect(screen.getByText('This field is required')).toBeInTheDocument()
  })
  
  it('should show success state', () => {
    render(<Input success />)
    
    const input = screen.getByRole('textbox')
    expect(input).toHaveClass('border-green-500')
  })
  
  it('should be disabled when disabled prop is true', () => {
    render(<Input disabled />)
    
    const input = screen.getByRole('textbox')
    expect(input).toBeDisabled()
    expect(input).toHaveClass('disabled:opacity-50', 'disabled:cursor-not-allowed')
  })
  
  it('should apply different sizes correctly', () => {
    const { rerender } = render(<Input size="sm" />)
    expect(screen.getByRole('textbox')).toHaveClass('h-8', 'text-xs')
    
    rerender(<Input size="md" />)
    expect(screen.getByRole('textbox')).toHaveClass('h-10', 'text-sm')
    
    rerender(<Input size="lg" />)
    expect(screen.getByRole('textbox')).toHaveClass('h-12', 'text-base')
  })
  
  it('should render as different input types', () => {
    const { rerender } = render(<Input type="email" data-testid="email-input" />)
    expect(screen.getByRole('textbox')).toHaveAttribute('type', 'email')
    
    rerender(<Input type="password" data-testid="password-input" />)
    const passwordInput = screen.getByTestId('password-input')
    expect(passwordInput).toHaveAttribute('type', 'password')
    
    rerender(<Input type="number" data-testid="number-input" />)
    expect(screen.getByRole('spinbutton')).toHaveAttribute('type', 'number')
  })
  
  it('should show required indicator when required', () => {
    render(<Input label="Email" required />)
    expect(screen.getByText('*')).toBeInTheDocument()
  })
  
  it('should show help text when provided', () => {
    render(<Input helpText="Enter a valid email address" />)
    expect(screen.getByText('Enter a valid email address')).toBeInTheDocument()
  })
  
  it('should forward ref correctly', () => {
    const ref = vi.fn()
    render(<Input ref={ref} />)
    expect(ref).toHaveBeenCalled()
  })
  
  it('should have proper accessibility attributes', () => {
    render(
      <Input 
        label="Email"
        required 
        error="Invalid email"
        helpText="Enter your email address"
      />
    )
    
    const input = screen.getByRole('textbox')
    expect(input).toHaveAttribute('aria-required', 'true')
    expect(input).toHaveAttribute('aria-invalid', 'true')
    expect(input).toHaveAttribute('aria-describedby')
  })
  
  it('should not call onChange when disabled', async () => {
    const user = userEvent.setup()
    const handleChange = vi.fn()
    
    render(<Input onChange={handleChange} disabled />)
    
    const input = screen.getByRole('textbox')
    await user.type(input, 'test')
    
    expect(handleChange).not.toHaveBeenCalled()
  })
})
</file>

<file path="examklar-tdd/tests/components/SubjectCard.test.tsx">
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { describe, it, expect, vi } from 'vitest'
import { SubjectCard } from '../../src/components/SubjectCard'

describe('SubjectCard - TDD', () => {
  const mockSubject = {
    id: '1',
    name: 'Mathematics',
    description: 'Advanced Calculus and Linear Algebra',
    emoji: 'üìä',
    examDate: new Date('2025-08-01'),
    estimatedHours: 40,
    createdAt: new Date('2025-01-01')
  }
  
  it('should display subject information', () => {
    render(<SubjectCard subject={mockSubject} />)
    
    expect(screen.getByText('Mathematics')).toBeInTheDocument()
    expect(screen.getByText('üìä')).toBeInTheDocument()
    expect(screen.getByText('40 hours')).toBeInTheDocument()
    expect(screen.getByText('Advanced Calculus and Linear Algebra')).toBeInTheDocument()
  })
  
  it('should display formatted exam date', () => {
    render(<SubjectCard subject={mockSubject} />)
    
    expect(screen.getByText(/Aug 1, 2025/)).toBeInTheDocument()
  })
  
  it('should call onSelect when clicked', async () => {
    const user = userEvent.setup()
    const handleSelect = vi.fn()
    
    render(<SubjectCard subject={mockSubject} onSelect={handleSelect} />)
    
    await user.click(screen.getByRole('button'))
    expect(handleSelect).toHaveBeenCalledWith(mockSubject)
  })
  
  it('should show progress bar when progress provided', () => {
    render(<SubjectCard subject={mockSubject} progress={65} />)
    
    const progressBar = screen.getByRole('progressbar')
    expect(progressBar).toBeInTheDocument()
    expect(progressBar).toHaveAttribute('aria-valuenow', '65')
  })
  
  it('should not show progress bar when no progress provided', () => {
    render(<SubjectCard subject={mockSubject} />)
    
    expect(screen.queryByRole('progressbar')).not.toBeInTheDocument()
  })
  
  it('should display days until exam', () => {
    const futureDate = new Date()
    futureDate.setDate(futureDate.getDate() + 30)
    
    const subjectWithFutureExam = {
      ...mockSubject,
      examDate: futureDate
    }
    
    render(<SubjectCard subject={subjectWithFutureExam} />)
    
    expect(screen.getByText(/days left/)).toBeInTheDocument()
  })
  
  it('should show overdue status for past exam dates', () => {
    const pastDate = new Date()
    pastDate.setDate(pastDate.getDate() - 5)
    
    const subjectWithPastExam = {
      ...mockSubject,
      examDate: pastDate
    }
    
    render(<SubjectCard subject={subjectWithPastExam} />)
    
    expect(screen.getByText(/overdue/i)).toBeInTheDocument()
  })
  
  it('should apply different styles based on priority', () => {
    const urgentSubject = {
      ...mockSubject,
      examDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days from now
    }
    
    render(<SubjectCard subject={urgentSubject} />)
    
    const card = screen.getByRole('button')
    expect(card).toHaveClass('border-red-200') // Urgent styling
  })
  
  it('should be keyboard accessible', async () => {
    const user = userEvent.setup()
    const handleSelect = vi.fn()
    
    render(<SubjectCard subject={mockSubject} onSelect={handleSelect} />)
    
    const card = screen.getByRole('button')
    card.focus()
    
    await user.keyboard('{Enter}')
    expect(handleSelect).toHaveBeenCalledWith(mockSubject)
  })
  
  it('should have proper ARIA attributes', () => {
    render(<SubjectCard subject={mockSubject} progress={75} />)
    
    const card = screen.getByRole('button')
    expect(card).toHaveAttribute('aria-label')
    
    const progressBar = screen.getByRole('progressbar')
    expect(progressBar).toHaveAttribute('aria-label')
  })
  
  it('should display estimated study time correctly', () => {
    render(<SubjectCard subject={mockSubject} />)
    
    expect(screen.getByText('40 hours')).toBeInTheDocument()
  })
  
  it('should handle missing optional props gracefully', () => {
    const minimalSubject = {
      id: '2',
      name: 'Physics',
      description: '',
      emoji: '‚öõÔ∏è',
      examDate: new Date('2025-09-01'),
      estimatedHours: 30,
      createdAt: new Date('2025-01-01')
    }
    
    expect(() => {
      render(<SubjectCard subject={minimalSubject} />)
    }).not.toThrow()
    
    expect(screen.getByText('Physics')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/FlashcardsPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import '@testing-library/jest-dom'
import FlashcardsPage from '../../src/pages/FlashcardsPage'
import Layout from '../../src/components/layout/Layout'

describe('FlashcardsPage - TDD', () => {
  it('should render Flashcards heading', () => {
    render(
      <Layout>
        <FlashcardsPage />
      </Layout>
    )
    expect(screen.getByText('Flashcards')).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    render(
      <Layout>
        <FlashcardsPage />
      </Layout>
    )
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/NotFoundPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import '@testing-library/jest-dom'
import NotFoundPage from '../../src/pages/NotFoundPage'
import Layout from '../../src/components/layout/Layout'

describe('NotFoundPage - TDD', () => {
  it('should render Page Not Found message', () => {
    render(
      <Layout>
        <NotFoundPage />
      </Layout>
    )
    expect(screen.getByText('Page Not Found')).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    render(
      <Layout>
        <NotFoundPage />
      </Layout>
    )
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/QuizPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import '@testing-library/jest-dom'
import QuizPage from '../../src/pages/QuizPage'
import Layout from '../../src/components/layout/Layout'

describe('QuizPage - TDD', () => {
  it('should render Quiz heading', () => {
    render(
      <Layout>
        <QuizPage />
      </Layout>
    )
    expect(screen.getByText('Quiz')).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    render(
      <Layout>
        <QuizPage />
      </Layout>
    )
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/stores/examStore.test.ts">
import { renderHook, act } from '@testing-library/react'
import { describe, it, expect, beforeEach } from 'vitest'
import { useExamStore } from '../../src/stores/examStore'

describe('ExamStore - TDD', () => {
  beforeEach(() => {
    // Reset store state before each test
    useExamStore.getState().reset()
  })
  
  it('should initialize with default state', () => {
    const { result } = renderHook(() => useExamStore())
    
    expect(result.current.user).toBeNull()
    expect(result.current.subjects).toEqual([])
    expect(result.current.currentSubject).toBeNull()
    expect(result.current.studyPlan).toBeNull()
  })
  
  it('should set user correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const testUser = {
      id: 'user-1',
      name: 'John Doe',
      email: 'john@example.com',
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.setUser(testUser)
    })
    
    expect(result.current.user).toEqual(testUser)
  })
  
  it('should add subject correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const testSubject = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus and Linear Algebra',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.addSubject(testSubject)
    })
    
    expect(result.current.subjects).toHaveLength(1)
    expect(result.current.subjects[0]).toEqual(testSubject)
  })
  
  it('should add multiple subjects correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const subject1 = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    const subject2 = {
      id: 'subject-2',
      name: 'Physics',
      description: 'Quantum Mechanics',
      emoji: '‚öõÔ∏è',
      examDate: new Date('2025-09-01'),
      estimatedHours: 35,
      createdAt: new Date('2025-01-02')
    }
    
    act(() => {
      result.current.addSubject(subject1)
      result.current.addSubject(subject2)
    })
    
    expect(result.current.subjects).toHaveLength(2)
    expect(result.current.subjects[0]).toEqual(subject1)
    expect(result.current.subjects[1]).toEqual(subject2)
  })
  
  it('should set current subject correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const testSubject = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.addSubject(testSubject)
      result.current.setCurrentSubject(testSubject)
    })
    
    expect(result.current.currentSubject).toEqual(testSubject)
  })
  
  it('should update study plan correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const testStudyPlan = {
      id: 'plan-1',
      subjectId: 'subject-1',
      totalDays: 30,
      dailyGoalMinutes: 60,
      weeklyGoals: [],
      milestones: [],
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.updateStudyPlan(testStudyPlan)
    })
    
    expect(result.current.studyPlan).toEqual(testStudyPlan)
  })
  
  it('should remove subject correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const subject1 = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    const subject2 = {
      id: 'subject-2',
      name: 'Physics',
      description: 'Quantum Mechanics',
      emoji: '‚öõÔ∏è',
      examDate: new Date('2025-09-01'),
      estimatedHours: 35,
      createdAt: new Date('2025-01-02')
    }
    
    act(() => {
      result.current.addSubject(subject1)
      result.current.addSubject(subject2)
      result.current.removeSubject('subject-1')
    })
    
    expect(result.current.subjects).toHaveLength(1)
    expect(result.current.subjects[0]).toEqual(subject2)
  })
  
  it('should clear current subject when removed', () => {
    const { result } = renderHook(() => useExamStore())
    const testSubject = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.addSubject(testSubject)
      result.current.setCurrentSubject(testSubject)
      result.current.removeSubject('subject-1')
    })
    
    expect(result.current.subjects).toHaveLength(0)
    expect(result.current.currentSubject).toBeNull()
  })
  
  it('should get upcoming deadlines sorted by date', () => {
    const { result } = renderHook(() => useExamStore())
    const subject1 = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-09-01'), // Later date
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    const subject2 = {
      id: 'subject-2',
      name: 'Physics',
      description: 'Quantum Mechanics',
      emoji: '‚öõÔ∏è',
      examDate: new Date('2025-08-01'), // Earlier date
      estimatedHours: 35,
      createdAt: new Date('2025-01-02')
    }
    
    act(() => {
      result.current.addSubject(subject1)
      result.current.addSubject(subject2)
    })
    
    const upcomingDeadlines = result.current.getUpcomingDeadlines()
    expect(upcomingDeadlines).toHaveLength(2)
    expect(upcomingDeadlines[0]).toEqual(subject2) // Earlier date first
    expect(upcomingDeadlines[1]).toEqual(subject1) // Later date second
  })
  
  it('should reset store to initial state', () => {
    const { result } = renderHook(() => useExamStore())
    const testUser = { id: 'user-1', name: 'John', email: 'john@example.com', createdAt: new Date() }
    const testSubject = {
      id: 'subject-1',
      name: 'Mathematics',
      description: 'Advanced Calculus',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40,
      createdAt: new Date('2025-01-01')
    }
    
    act(() => {
      result.current.setUser(testUser)
      result.current.addSubject(testSubject)
      result.current.setCurrentSubject(testSubject)
    })
    
    // Verify state is populated
    expect(result.current.user).not.toBeNull()
    expect(result.current.subjects).toHaveLength(1)
    expect(result.current.currentSubject).not.toBeNull()
    
    act(() => {
      result.current.reset()
    })
    
    // Verify state is reset
    expect(result.current.user).toBeNull()
    expect(result.current.subjects).toEqual([])
    expect(result.current.currentSubject).toBeNull()
    expect(result.current.studyPlan).toBeNull()
  })
})
</file>

<file path="examklar-tdd/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="examklar-tdd/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="examklar-tdd/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="examklar-tdd/package.json">
{
  "name": "examklar-tdd",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "vitest",
    "test:watch": "vitest --watch",
    "test:coverage": "vitest --coverage",
    "test:ui": "vitest --ui"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "autoprefixer": "^10.4.21",
    "framer-motion": "^12.18.1",
    "postcss": "^8.5.6",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.2",
    "tailwindcss": "^4.1.10",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^24.0.3",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@typescript-eslint/eslint-plugin": "^8.34.1",
    "@vitejs/plugin-react": "^4.4.1",
    "@vitest/coverage-v8": "^3.2.4",
    "class-variance-authority": "^0.7.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "jsdom": "^26.1.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5",
    "vitest": "^3.2.4"
  }
}
</file>

<file path="examklar-tdd/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="examklar-tdd/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="examklar-tdd/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
</file>

<file path="examklar-tdd/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="examklar-tdd/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="examklar-tdd/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="examklar-tdd/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="examklar-tdd/vitest.config.ts">
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test-setup.ts',
    coverage: {
      reporter: ['text', 'json', 'html'],
      threshold: {
        global: {
          branches: 90,
          functions: 90,
          lines: 90,
          statements: 90
        }
      }
    }
  },
})
</file>

<file path="Plan/EXAMKLAR_TDD_MASTER_PLAN.md">
# üß™ EXAMKLAR: TDD-FIRST REACT MASTER PLAN

**Version:** 3.0 - TDD-FIRST CLEAN SLATE  
**Date:** June 22, 2025  
**Mission:** Build ExamKlar as a production-ready React SPA using Test-Driven Development from absolute zero  
**Status:** BULLETPROOF TDD BLUEPRINT - QUALITY GUARANTEED  

---

## üéØ EXECUTIVE SUMMARY

**TDD-FIRST APPROACH:** Build ExamKlar as a modern React application from scratch, with tests written before implementation code, ensuring zero regressions and bulletproof quality.

**Core Vision:**
- üìö **AI-Powered Learning Platform**: Upload materials, get personalized study plans
- üß† **Smart Study Tools**: Flashcards, quizzes, progress tracking  
- üéØ **Exam Preparation**: Timeline-based learning with adaptive scheduling
- üíé **Premium UX**: Luxury design that feels professional and motivating
- üß™ **Quality Assurance**: >90% test coverage with TDD methodology

**Technical Foundation:**
- ‚öõÔ∏è **React 18** with TypeScript for type safety
- üß™ **Vitest** + **Testing Library** for comprehensive TDD workflow
- üé® **Tailwind CSS** for rapid, consistent styling
- üóÇÔ∏è **Zustand** for simple, powerful state management
- üõ£Ô∏è **React Router** for seamless navigation
- üì¶ **Vite** for lightning-fast development

---

## üß™ TDD METHODOLOGY

### The Red-Green-Refactor Cycle

```
üî¥ RED: Write a failing test
   ‚Üì
üü¢ GREEN: Write minimal code to pass
   ‚Üì
üîµ REFACTOR: Improve code quality
   ‚Üì
üîÑ REPEAT: Continue the cycle
```

### TDD Benefits for AI Development
- **Regression Prevention**: Tests catch when AI introduces bugs
- **Clear Specifications**: Tests serve as executable documentation
- **Confidence**: Every feature is proven to work
- **Maintainability**: Refactoring is safe with test coverage
- **Quality**: Forces good architecture and separation of concerns

---

## üèóÔ∏è TDD-DRIVEN ARCHITECTURE

### Test-First Directory Structure

```
examklar/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/          # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Basic UI primitives
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forms/          # Form components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ layout/         # Layout components
‚îÇ   ‚îú‚îÄ‚îÄ pages/              # Route components
‚îÇ   ‚îú‚îÄ‚îÄ stores/             # Zustand state stores
‚îÇ   ‚îú‚îÄ‚îÄ hooks/              # Custom React hooks
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # Pure utility functions
‚îÇ   ‚îî‚îÄ‚îÄ types/              # TypeScript type definitions
‚îú‚îÄ‚îÄ tests/                  # Test files mirror src structure
‚îÇ   ‚îú‚îÄ‚îÄ components/         # Component tests
‚îÇ   ‚îú‚îÄ‚îÄ pages/              # Page tests
‚îÇ   ‚îú‚îÄ‚îÄ stores/             # Store tests
‚îÇ   ‚îú‚îÄ‚îÄ hooks/              # Hook tests
‚îÇ   ‚îî‚îÄ‚îÄ utils/              # Utility tests
‚îú‚îÄ‚îÄ __mocks__/              # Mock implementations
‚îú‚îÄ‚îÄ test-utils/             # Testing utilities
‚îî‚îÄ‚îÄ vitest.config.ts        # Test configuration
```

### Test Categories

```typescript
// 1. UNIT TESTS - Individual functions/components
describe('Button Component', () => {
  it('should render with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
});

// 2. INTEGRATION TESTS - Component interactions
describe('StudySession Integration', () => {
  it('should start timer when study session begins', () => {
    // Test timer + session interaction
  });
});

// 3. E2E TESTS - User journeys
describe('Onboarding Flow', () => {
  it('should complete full onboarding journey', () => {
    // Test complete user flow
  });
});
```

---

## üß™ IMPLEMENTATION PHASES - TDD FIRST

### PHASE 1: TDD FOUNDATION SETUP (Week 1)

#### Day 1: Project Setup + Test Infrastructure

**üî¥ RED PHASE: Write failing tests for project structure**

```bash
# Create new React project with Vite + TypeScript
npm create vite@latest examklar -- --template react-ts
cd examklar

# Install testing dependencies FIRST
npm install -D vitest @testing-library/react @testing-library/jest-dom
npm install -D @testing-library/user-event jsdom
npm install -D @types/node

# Install core dependencies
npm install zustand react-router-dom

# Install UI/Styling dependencies  
npm install tailwindcss postcss autoprefixer
npm install @headlessui/react @heroicons/react
npm install framer-motion

# Install development dependencies
npm install -D eslint-plugin-react-hooks @typescript-eslint/eslint-plugin

# Initialize Tailwind CSS
npx tailwindcss init -p
```

**Configure Test Environment:**

```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test-setup.ts',
    coverage: {
      reporter: ['text', 'json', 'html'],
      threshold: {
        global: {
          branches: 90,
          functions: 90,
          lines: 90,
          statements: 90
        }
      }
    }
  },
})

// src/test-setup.ts
import '@testing-library/jest-dom'
import { beforeEach } from 'vitest'
import { cleanup } from '@testing-library/react'

beforeEach(() => {
  cleanup()
})
```

**üß™ Test-First Examples:**

```typescript
// tests/components/ui/Button.test.tsx - WRITE THIS FIRST!
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { Button } from '../../../src/components/ui/Button'

describe('Button Component', () => {
  it('should render with provided text', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument()
  })
  
  it('should call onClick handler when clicked', async () => {
    const handleClick = vi.fn()
    render(<Button onClick={handleClick}>Click me</Button>)
    
    await userEvent.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })
  
  it('should apply variant styles correctly', () => {
    render(<Button variant="primary">Primary</Button>)
    expect(screen.getByRole('button')).toHaveClass('bg-blue-600')
  })
  
  it('should be disabled when disabled prop is true', () => {
    render(<Button disabled>Disabled</Button>)
    expect(screen.getByRole('button')).toBeDisabled()
  })
})
```

**üü¢ GREEN PHASE: Implement Button to pass tests**

```typescript
// src/components/ui/Button.tsx - IMPLEMENT AFTER TESTS
import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed',
  {
    variants: {
      variant: {
        primary: 'bg-blue-600 text-white hover:bg-blue-700',
        secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
        outline: 'border border-gray-300 hover:bg-gray-50'
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4 text-sm',
        lg: 'h-12 px-6 text-base'
      }
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md'
    }
  }
)

export interface ButtonProps 
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={buttonVariants({ variant, size, className })}
        ref={ref}
        {...props}
      />
    )
  }
)
```

#### Day 2: State Management TDD

**üî¥ RED: Write failing tests for Zustand store**

```typescript
// tests/stores/examStore.test.ts - WRITE FIRST!
import { renderHook, act } from '@testing-library/react'
import { useExamStore } from '../../src/stores/examStore'

describe('ExamStore', () => {
  beforeEach(() => {
    // Reset store state before each test
    useExamStore.getState().reset()
  })
  
  it('should initialize with default state', () => {
    const { result } = renderHook(() => useExamStore())
    
    expect(result.current.user).toBeNull()
    expect(result.current.subjects).toEqual([])
    expect(result.current.currentSubject).toBeNull()
  })
  
  it('should add subject correctly', () => {
    const { result } = renderHook(() => useExamStore())
    const subject = {
      id: '1',
      name: 'Mathematics',
      description: 'Calculus and Algebra',
      emoji: 'üìä',
      examDate: new Date('2025-08-01'),
      estimatedHours: 40
    }
    
    act(() => {
      result.current.addSubject(subject)
    })
    
    expect(result.current.subjects).toHaveLength(1)
    expect(result.current.subjects[0]).toEqual(subject)
  })
  
  it('should set current subject', () => {
    const { result } = renderHook(() => useExamStore())
    const subject = { id: '1', name: 'Math' /* ... */ }
    
    act(() => {
      result.current.addSubject(subject)
      result.current.setCurrentSubject(subject)
    })
    
    expect(result.current.currentSubject).toEqual(subject)
  })
})
```

**üü¢ GREEN: Implement store to pass tests**

```typescript
// src/stores/examStore.ts - IMPLEMENT AFTER TESTS
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'

interface Subject {
  id: string
  name: string
  description: string
  emoji: string
  examDate: Date
  estimatedHours: number
}

interface ExamStore {
  user: User | null
  subjects: Subject[]
  currentSubject: Subject | null
  
  addSubject: (subject: Subject) => void
  setCurrentSubject: (subject: Subject) => void
  reset: () => void
}

const initialState = {
  user: null,
  subjects: [],
  currentSubject: null
}

export const useExamStore = create<ExamStore>()(
  devtools(
    persist(
      (set) => ({
        ...initialState,
        
        addSubject: (subject) => set((state) => ({
          subjects: [...state.subjects, subject]
        })),
        
        setCurrentSubject: (subject) => set({ currentSubject: subject }),
        
        reset: () => set(initialState)
      }),
      { name: 'examklar-storage' }
    )
  )
)
```

#### Day 3-5: Core Components TDD

**Systematic TDD for each component:**

1. **üî¥ Write failing test**
2. **üü¢ Implement minimal code to pass**
3. **üîµ Refactor for quality**
4. **üîÑ Repeat for next feature**

**Component Test Examples:**

```typescript
// tests/components/SubjectCard.test.tsx
describe('SubjectCard', () => {
  const mockSubject = {
    id: '1',
    name: 'Mathematics',
    emoji: 'üìä',
    examDate: new Date('2025-08-01'),
    estimatedHours: 40
  }
  
  it('should display subject information', () => {
    render(<SubjectCard subject={mockSubject} />)
    
    expect(screen.getByText('Mathematics')).toBeInTheDocument()
    expect(screen.getByText('üìä')).toBeInTheDocument()
    expect(screen.getByText('40 hours')).toBeInTheDocument()
  })
  
  it('should call onSelect when clicked', async () => {
    const handleSelect = vi.fn()
    render(<SubjectCard subject={mockSubject} onSelect={handleSelect} />)
    
    await userEvent.click(screen.getByRole('button'))
    expect(handleSelect).toHaveBeenCalledWith(mockSubject)
  })
  
  it('should show progress bar when progress provided', () => {
    render(<SubjectCard subject={mockSubject} progress={65} />)
    expect(screen.getByRole('progressbar')).toBeInTheDocument()
  })
})
```

#### Day 6-7: Routing and Layout TDD

**üî¥ RED: Route testing**

```typescript
// tests/App.test.tsx
import { render, screen } from '@testing-library/react'
import { MemoryRouter } from 'react-router-dom'
import App from '../src/App'

describe('App Routing', () => {
  it('should render onboarding page on root route', () => {
    render(
      <MemoryRouter initialEntries={['/']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Welcome to ExamKlar')).toBeInTheDocument()
  })
  
  it('should render dashboard on /dashboard route', () => {
    render(
      <MemoryRouter initialEntries={['/dashboard']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Dashboard')).toBeInTheDocument()
  })
})
```

### PHASE 2: FEATURE DEVELOPMENT TDD (Week 2)

#### Day 8-9: Onboarding Flow TDD

**üî¥ RED: Integration tests for onboarding**

```typescript
// tests/pages/Onboarding.integration.test.tsx
describe('Onboarding Integration', () => {
  it('should complete full onboarding flow', async () => {
    render(<OnboardingPage />)
    
    // Step 1: Welcome
    expect(screen.getByText('Welcome to ExamKlar')).toBeInTheDocument()
    await userEvent.click(screen.getByText('Get Started'))
    
    // Step 2: Subject selection
    expect(screen.getByText('Add Your Subject')).toBeInTheDocument()
    await userEvent.type(screen.getByLabelText('Subject Name'), 'Mathematics')
    await userEvent.click(screen.getByText('Next'))
    
    // Step 3: Content upload
    expect(screen.getByText('Upload Materials')).toBeInTheDocument()
    // Test file upload functionality
    
    // Verify final state
    expect(useExamStore.getState().subjects).toHaveLength(1)
  })
})
```

#### Day 10-14: Study Features TDD

**Study Timer Component:**

```typescript
// tests/components/StudyTimer.test.tsx
describe('StudyTimer', () => {
  it('should start timer when play button clicked', async () => {
    render(<StudyTimer />)
    
    await userEvent.click(screen.getByLabelText('Start timer'))
    
    expect(screen.getByText('00:01')).toBeInTheDocument()
  })
  
  it('should pause timer when pause button clicked', async () => {
    render(<StudyTimer />)
    
    await userEvent.click(screen.getByLabelText('Start timer'))
    await userEvent.click(screen.getByLabelText('Pause timer'))
    
    expect(screen.getByLabelText('Start timer')).toBeInTheDocument()
  })
})
```

### PHASE 3: ADVANCED FEATURES TDD (Week 3)

#### Day 15-17: Flashcard System TDD

**üî¥ RED: Flashcard interaction tests**

```typescript
// tests/components/FlashcardDeck.test.tsx
describe('FlashcardDeck', () => {
  const mockCards = [
    { id: '1', front: 'What is 2+2?', back: '4' },
    { id: '2', front: 'What is 3+3?', back: '6' }
  ]
  
  it('should show card front initially', () => {
    render(<FlashcardDeck cards={mockCards} />)
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
  })
  
  it('should flip card when clicked', async () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    await userEvent.click(screen.getByText('What is 2+2?'))
    expect(screen.getByText('4')).toBeInTheDocument()
  })
  
  it('should advance to next card', async () => {
    render(<FlashcardDeck cards={mockCards} />)
    
    await userEvent.click(screen.getByText('Next'))
    expect(screen.getByText('What is 3+3?')).toBeInTheDocument()
  })
})
```

#### Day 18-21: Quiz System TDD

**üî¥ RED: Quiz logic tests**

```typescript
// tests/components/QuizEngine.test.tsx
describe('QuizEngine', () => {
  const mockQuiz = {
    id: '1',
    questions: [
      {
        id: '1',
        question: 'What is 2+2?',
        options: ['3', '4', '5', '6'],
        correctAnswer: 1
      }
    ]
  }
  
  it('should display first question', () => {
    render(<QuizEngine quiz={mockQuiz} />)
    expect(screen.getByText('What is 2+2?')).toBeInTheDocument()
  })
  
  it('should track correct answers', async () => {
    const onComplete = vi.fn()
    render(<QuizEngine quiz={mockQuiz} onComplete={onComplete} />)
    
    await userEvent.click(screen.getByText('4'))
    await userEvent.click(screen.getByText('Submit'))
    
    expect(onComplete).toHaveBeenCalledWith({
      score: 100,
      correctAnswers: 1,
      totalQuestions: 1
    })
  })
})
```

### PHASE 4: QUALITY ASSURANCE & DEPLOYMENT (Week 4)

#### Day 22-24: Performance & Coverage

**üß™ Test Coverage Requirements:**
- Unit Tests: >95% coverage
- Integration Tests: All user flows
- E2E Tests: Critical paths

```bash
# Coverage commands
npm run test:coverage
npm run test:unit
npm run test:integration
npm run test:e2e
```

#### Day 25-28: Production Deployment

**üî¥ RED: Deployment tests**

```typescript
// tests/deployment.test.ts
describe('Production Build', () => {
  it('should build without errors', async () => {
    const buildResult = await runBuildCommand()
    expect(buildResult.exitCode).toBe(0)
  })
  
  it('should pass all performance audits', async () => {
    const auditResult = await runLighthouseAudit()
    expect(auditResult.performance).toBeGreaterThan(90)
  })
})
```

---

## üß™ TDD WORKFLOW EXAMPLES

### Daily TDD Routine

```bash
# 1. Pull latest changes
git pull origin main

# 2. Check test status
npm test

# 3. Start TDD cycle for new feature
# üî¥ RED: Write failing test
npm test -- --watch feature.test.ts

# 4. üü¢ GREEN: Implement minimal code
# Edit source files until tests pass

# 5. üîµ REFACTOR: Improve code quality
# Refactor with confidence - tests protect you

# 6. Update context
python3 Contextsystem/update_context.py "Completed TDD cycle for [feature]"

# 7. Commit changes
git add .
git commit -m "feat: add [feature] with tests"
```

### Test Categories by Phase

**PHASE 1 - Foundation:**
- [ ] Button component tests
- [ ] Input component tests
- [ ] Store state tests
- [ ] Routing tests

**PHASE 2 - Features:**
- [ ] Onboarding flow tests
- [ ] Dashboard integration tests
- [ ] Study session tests

**PHASE 3 - Advanced:**
- [ ] Flashcard system tests
- [ ] Quiz engine tests
- [ ] AI integration tests

**PHASE 4 - Production:**
- [ ] Performance tests
- [ ] Accessibility tests
- [ ] Security tests

---

## üß™ QUALITY METRICS

### Test Coverage Targets
- **Unit Tests**: >95% line coverage
- **Integration Tests**: All component interactions
- **E2E Tests**: Complete user journeys

### Performance Targets (with tests)
- **First Contentful Paint**: <1.5s (tested)
- **Largest Contentful Paint**: <2.5s (tested)
- **Test Suite Runtime**: <30s (optimized)

### Accessibility Targets (with tests)
- **WCAG 2.1 AA**: 100% compliance (automated tests)
- **Keyboard Navigation**: Full support (tested)
- **Screen Reader**: Complete compatibility (tested)

---

## üöÄ TDD DEPLOYMENT STRATEGY

### Continuous Integration with TDD

```yaml
# .github/workflows/tdd-ci.yml
name: TDD Continuous Integration

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Install dependencies
      - run: npm ci
      
      # Run TDD test suite
      - run: npm run test:unit
      - run: npm run test:integration
      - run: npm run test:e2e
      
      # Verify coverage thresholds
      - run: npm run test:coverage
      
      # Build verification
      - run: npm run build
      
      # Performance testing
      - run: npm run test:performance
```

---

## üéØ IMMEDIATE TDD NEXT STEPS

### Start Right Now with TDD:

```bash
# 1. Initialize clean project
mkdir examklar-tdd && cd examklar-tdd
npm create vite@latest . -- --template react-ts

# 2. Setup testing FIRST
npm install -D vitest @testing-library/react @testing-library/jest-dom
npm install -D @testing-library/user-event jsdom

# 3. Write your first failing test
# tests/components/Button.test.tsx

# 4. Run tests (they should fail)
npm test

# 5. Implement code to make tests pass
# src/components/Button.tsx

# 6. Update context
python3 Contextsystem/update_context.py "Completed first TDD cycle - Button component"
```

### First Hour TDD Checklist:
- [ ] ‚úÖ Vitest configured and running
- [ ] ‚úÖ First failing test written
- [ ] ‚úÖ First component implemented to pass test
- [ ] ‚úÖ Test coverage configured (>90% threshold)
- [ ] ‚úÖ Context system updated
- [ ] ‚úÖ TDD workflow established

---

## üéâ CONCLUSION

**This TDD-first approach eliminates ALL quality problems:**

‚úÖ **Zero Regressions** - Tests catch every breaking change  
‚úÖ **Bulletproof Quality** - >95% test coverage guaranteed  
‚úÖ **AI-Safe Architecture** - Tests guide AI to correct implementations  
‚úÖ **Refactoring Confidence** - Change code safely with test protection  
‚úÖ **Clear Specifications** - Tests serve as executable documentation  
‚úÖ **Production Ready** - Quality built-in from day one  

**Guaranteed Results:**
- üõ°Ô∏è Rock-solid quality with comprehensive test suite
- ‚ö° Lightning-fast development with TDD confidence
- üéØ Zero regressions with automated testing
- üöÄ Production deployment with quality assurance
- üìà Maintainable codebase for future growth

**Ready to build ExamKlar the TDD way? Let's start with Phase 1, Day 1 - Foundation Setup.**

üß™ **Test-first. Quality-guaranteed. Bulletproof results.**
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/ui/Button.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/ui/Button.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../../prettify.css" />
    <link rel="stylesheet" href="../../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/components/ui</a> Button.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>34/34</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>34/34</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
&nbsp;
/**
 * Button component variants using class-variance-authority
 * Provides consistent styling across the application
 */
const buttonVariants = cva(
  // Base styles applied to all buttons
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed',
  {
    variants: {
      variant: {
        primary: 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800',
        secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 active:bg-gray-400',
        outline: 'border border-gray-300 bg-transparent hover:bg-gray-50 active:bg-gray-100'
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4 text-sm',
        lg: 'h-12 px-6 text-base'
      }
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md'
    }
  }
)
&nbsp;
/**
 * Button component props extending HTML button attributes
 * with custom variant and size options
 */
export interface ButtonProps 
  extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;,
    VariantProps&lt;typeof buttonVariants&gt; {
  /** Additional CSS classes to apply */
  className?: string
}
&nbsp;
/**
 * Button component with multiple variants and sizes
 * 
 * @example
 * &lt;Button variant="primary" size="md" onClick={handleClick}&gt;
 *   Click me
 * &lt;/Button&gt;
 */
export const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;(
  ({ className, variant, size, ...props }, ref) =&gt; {
    return (
      &lt;button
        className={buttonVariants({ variant, size, className })}
        ref={ref}
        {...props}
      /&gt;
    )
  }
)
&nbsp;
Button.displayName = 'Button'
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../../sorter.js"></script>
        <script src="../../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/ui/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/ui</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../../prettify.css" />
    <link rel="stylesheet" href="../../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../../index.html">All files</a> examklar-tdd/src/components/ui</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>112/112</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>14/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>112/112</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="Button.tsx"><a href="Button.tsx.html">Button.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="34" class="abs high">34/34</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="34" class="abs high">34/34</td>
	</tr>

<tr>
	<td class="file high" data-value="Input.tsx"><a href="Input.tsx.html">Input.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="78" class="abs high">78/78</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="13" class="abs high">13/13</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="78" class="abs high">78/78</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../../sorter.js"></script>
        <script src="../../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/components/ui/Input.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/components/ui/Input.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../../prettify.css" />
    <link rel="stylesheet" href="../../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/components/ui</a> Input.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>78/78</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>13/13</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>78/78</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
&nbsp;
/**
 * Input component variants using class-variance-authority
 * Provides consistent styling and behavior across the application
 */
const inputVariants = cva(
  // Base styles applied to all inputs
  'w-full rounded-md border px-3 py-2 text-sm transition-colors placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed',
  {
    variants: {
      variant: {
        default: 'border-gray-300 focus:border-blue-500',
        error: 'border-red-500 focus:border-red-500 focus:ring-red-500',
        success: 'border-green-500 focus:border-green-500 focus:ring-green-500'
      },
      size: {
        sm: 'h-8 text-xs px-2',
        md: 'h-10 text-sm px-3',
        lg: 'h-12 text-base px-4'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'md'
    }
  }
)
&nbsp;
/**
 * Input component props extending HTML input attributes
 * with custom styling and validation options
 */
export interface InputProps 
  extends Omit&lt;React.InputHTMLAttributes&lt;HTMLInputElement&gt;, 'size'&gt;,
    VariantProps&lt;typeof inputVariants&gt; {
  /** Label text for the input */
  label?: string
  /** Error message to display */
  error?: string
  /** Success state indicator */
  success?: boolean
  /** Help text to display below the input */
  helpText?: string
  /** Additional CSS classes to apply */
  className?: string
}
&nbsp;
/**
 * Input component with label, validation states, and help text
 * 
 * @example
 * &lt;Input 
 *   label="Email"
 *   type="email"
 *   required
 *   error="Please enter a valid email"
 *   helpText="We'll never share your email"
 * /&gt;
 */
export const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;(
  ({ 
    className, 
    variant, 
    size, 
    label, 
    error, 
    success, 
    helpText, 
    required,
    id,
    ...props 
  }, ref) =&gt; {
    // Generate unique ID - call hook unconditionally
    const generatedId = React.useId()
    const inputId = id || generatedId
    
    // Determine variant based on error/success state
    const computedVariant = error ? 'error' : success ? 'success' : variant || 'default'
    
    // Generate describedBy ID for accessibility
    const describedBy = [
      error &amp;&amp; `${inputId}-error`,
      helpText &amp;&amp; `${inputId}-help`
    ].filter(Boolean).join(' ') || undefined
&nbsp;
    return (
      &lt;div className="space-y-1"&gt;
        {/* Label */}
        {label &amp;&amp; (
          &lt;label 
            htmlFor={inputId}
            className="block text-sm font-medium text-gray-700"
          &gt;
            {label}
            {required &amp;&amp; &lt;span className="text-red-500 ml-1"&gt;*&lt;/span&gt;}
          &lt;/label&gt;
        )}
        
        {/* Input */}
        &lt;input
          ref={ref}
          id={inputId}
          className={inputVariants({ variant: computedVariant, size, className })}
          aria-required={required}
          aria-invalid={!!error}
          aria-describedby={describedBy}
          {...props}
        /&gt;
        
        {/* Error Message */}
        {error &amp;&amp; (
          &lt;p 
            id={`${inputId}-error`}
            className="text-sm text-red-600"
            role="alert"
          &gt;
            {error}
          &lt;/p&gt;
        )}
        
        {/* Help Text */}
        {helpText &amp;&amp; !error &amp;&amp; (
          &lt;p 
            id={`${inputId}-help`}
            className="text-sm text-gray-500"
          &gt;
            {helpText}
          &lt;/p&gt;
        )}
      &lt;/div&gt;
    )
  }
)
&nbsp;
Input.displayName = 'Input'
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../../sorter.js"></script>
        <script src="../../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/stores/examStore.ts.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/stores/examStore.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/stores</a> examStore.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.67% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>82/98</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">89.65% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>26/29</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">76.92% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>10/13</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.67% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/98</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import type { User, Subject, StudyPlan, Progress } from '../types'
&nbsp;
/**
 * ExamKlar application state store
 * Manages user data, subjects, study plans, and progress tracking
 */
interface ExamStore {
  // State
  user: User | null
  subjects: Subject[]
  currentSubject: Subject | null
  studyPlan: StudyPlan | null
  progress: Progress | null
  
  // Actions
  setUser: (user: User) =&gt; void
  addSubject: (subject: Subject) =&gt; void
  removeSubject: (subjectId: string) =&gt; void
  setCurrentSubject: (subject: Subject) =&gt; void
  updateStudyPlan: (plan: StudyPlan) =&gt; void
  updateProgress: (progress: Progress) =&gt; void
  
  // Computed getters
  getUpcomingDeadlines: () =&gt; Subject[]
  getCurrentProgress: () =&gt; number
  getTodaysGoal: () =&gt; number
  
  // Utility
  reset: () =&gt; void
}
&nbsp;
const initialState = {
  user: null,
  subjects: [],
  currentSubject: null,
  studyPlan: null,
  progress: null
}
&nbsp;
/**
 * ExamKlar Zustand store with persistence and devtools
 */
export const useExamStore = create&lt;ExamStore&gt;()(
  devtools(
    persist(
      (set, get) =&gt; ({
        ...initialState,
        
        // User management
        setUser: (user) =&gt; set({ user }, false, 'setUser'),
        
        // Subject management
        addSubject: (subject) =&gt; set((state) =&gt; ({
          subjects: [...state.subjects, subject]
        }), false, 'addSubject'),
        
        removeSubject: (subjectId) =&gt; set((state) =&gt; {
          const updatedSubjects = state.subjects.filter(s =&gt; s.id !== subjectId)
          const currentSubject = state.currentSubject?.id === subjectId 
            ? null 
            : state.currentSubject
            
          return {
            subjects: updatedSubjects,
            currentSubject
          }
        }, false, 'removeSubject'),
        
        setCurrentSubject: (subject) =&gt; set({ currentSubject: subject }, false, 'setCurrentSubject'),
        
        // Study plan management
        updateStudyPlan: (plan) =&gt; set({ studyPlan: plan }, false, 'updateStudyPlan'),
        
        // Progress management
        updateProgress: <span class="fstat-no" title="function not covered" >(progress) =&gt; set({ progress }, false, 'updateProgress'),</span>
        
        // Computed getters
        getUpcomingDeadlines: () =&gt; {
          const state = get()
          const now = new Date()
          
          return state.subjects
            .filter(subject =&gt; subject.examDate &gt; now)
            .sort((a, b) =&gt; a.examDate.getTime() - b.examDate.getTime())
        },
        
        getCurrentProgress: <span class="fstat-no" title="function not covered" >() =&gt; {</span>
<span class="cstat-no" title="statement not covered" >          const state = get()</span>
          // Calculate current progress based on study sessions and goals
          // This is a simplified implementation
<span class="cstat-no" title="statement not covered" >          return state.progress?.weeklyProgress || 0</span>
<span class="cstat-no" title="statement not covered" >        },</span>
        
        getTodaysGoal: <span class="fstat-no" title="function not covered" >() =&gt; {</span>
<span class="cstat-no" title="statement not covered" >          const state = get()</span>
<span class="cstat-no" title="statement not covered" >          return state.studyPlan?.dailyGoalMinutes || 30</span>
<span class="cstat-no" title="statement not covered" >        },</span>
        
        // Utility functions
        reset: () =&gt; set(initialState, false, 'reset')
      }),
      {
        name: 'examklar-storage',
        version: 1,
        // Serialize/deserialize dates properly
        partialize: (state) =&gt; ({
          ...state,
          user: state.user ? {
            ...state.user,
            createdAt: state.user.createdAt.toISOString()
          } : null,
          subjects: state.subjects.map(subject =&gt; ({
            ...subject,
            examDate: subject.examDate.toISOString(),
            createdAt: subject.createdAt.toISOString()
          })),
          currentSubject: state.currentSubject ? {
            ...state.currentSubject,
            examDate: state.currentSubject.examDate.toISOString(),
            createdAt: state.currentSubject.createdAt.toISOString()
          } : null,
          studyPlan: state.studyPlan ? {
            ...state.studyPlan,
            createdAt: state.studyPlan.createdAt.toISOString()
          } : null
        }),
        onRehydrateStorage: () =&gt; (state) =&gt; {
          if (state) {
            // Rehydrate dates from strings
            if (state.user) <span class="branch-0 cbranch-no" title="branch not covered" >{</span>
<span class="cstat-no" title="statement not covered" >              state.user.createdAt = new Date(state.user.createdAt)</span>
<span class="cstat-no" title="statement not covered" >            }</span>
            
            state.subjects = state.subjects.map(subject =&gt; ({
<span class="cstat-no" title="statement not covered" >              ...subject,</span>
<span class="cstat-no" title="statement not covered" >              examDate: new Date(subject.examDate),</span>
<span class="cstat-no" title="statement not covered" >              createdAt: new Date(subject.createdAt)</span>
            }))
            
            if (state.currentSubject) <span class="branch-0 cbranch-no" title="branch not covered" >{</span>
<span class="cstat-no" title="statement not covered" >              state.currentSubject.examDate = new Date(state.currentSubject.examDate)</span>
<span class="cstat-no" title="statement not covered" >              state.currentSubject.createdAt = new Date(state.currentSubject.createdAt)</span>
<span class="cstat-no" title="statement not covered" >            }</span>
            
            if (state.studyPlan) <span class="branch-0 cbranch-no" title="branch not covered" >{</span>
<span class="cstat-no" title="statement not covered" >              state.studyPlan.createdAt = new Date(state.studyPlan.createdAt)</span>
<span class="cstat-no" title="statement not covered" >            }</span>
          }
        }
      }
    ),
    {
      name: 'examklar-store'
    }
  )
)
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/stores/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/stores</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> examklar-tdd/src/stores</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.67% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>82/98</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">89.65% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>26/29</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">76.92% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>10/13</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.67% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/98</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="examStore.ts"><a href="examStore.ts.html">examStore.ts</a></td>
	<td data-value="83.67" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 83%"></div><div class="cover-empty" style="width: 17%"></div></div>
	</td>
	<td data-value="83.67" class="pct high">83.67%</td>
	<td data-value="98" class="abs high">82/98</td>
	<td data-value="89.65" class="pct high">89.65%</td>
	<td data-value="29" class="abs high">26/29</td>
	<td data-value="76.92" class="pct medium">76.92%</td>
	<td data-value="13" class="abs medium">10/13</td>
	<td data-value="83.67" class="pct high">83.67%</td>
	<td data-value="98" class="abs high">82/98</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/types/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/types</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> examklar-tdd/src/types</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file empty" data-value="index.ts"><a href="index.ts.html">index.ts</a></td>
	<td data-value="0" class="pic empty">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="0" class="abs empty">0/0</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="1" class="abs empty">1/1</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="1" class="abs empty">1/1</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="0" class="abs empty">0/0</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/types/index.ts.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/types/index.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../../prettify.css" />
    <link rel="stylesheet" href="../../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../../index.html">All files</a> / <a href="index.html">examklar-tdd/src/types</a> index.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">/**
 * Core type definitions for ExamKlar application
 */
&nbsp;
export interface User {
  id: string
  name: string
  email: string
  createdAt: Date
}
&nbsp;
export interface Subject {
  id: string
  name: string
  description: string
  emoji: string
  examDate: Date
  estimatedHours: number
  createdAt: Date
}
&nbsp;
export interface WeeklyGoal {
  week: number
  targetHours: number
  targetTopics: string[]
  milestones: string[]
}
&nbsp;
export interface Milestone {
  id: string
  title: string
  description: string
  targetDate: Date
  completed: boolean
  completedAt?: Date
}
&nbsp;
export interface StudyPlan {
  id: string
  subjectId: string
  totalDays: number
  dailyGoalMinutes: number
  weeklyGoals: WeeklyGoal[]
  milestones: Milestone[]
  createdAt: Date
}
&nbsp;
export interface Content {
  id: string
  subjectId: string
  title: string
  type: 'document' | 'video' | 'article' | 'notes'
  content: string
  processingStatus: 'pending' | 'processed' | 'failed'
  extractedKeyPoints: string[]
  estimatedReadTime: number
  createdAt: Date
}
&nbsp;
export interface FlashcardDeck {
  id: string
  subjectId: string
  name: string
  description: string
  cards: Flashcard[]
  createdAt: Date
}
&nbsp;
export interface Flashcard {
  id: string
  front: string
  back: string
  difficulty: 'easy' | 'medium' | 'hard'
  lastReviewed?: Date
  nextReview?: Date
  repetitions: number
  easinessFactor: number
}
&nbsp;
export interface Quiz {
  id: string
  subjectId: string
  title: string
  description: string
  questions: QuizQuestion[]
  timeLimit?: number
  createdAt: Date
}
&nbsp;
export interface QuizQuestion {
  id: string
  question: string
  type: 'multiple-choice' | 'true-false' | 'short-answer'
  options?: string[]
  correctAnswer: number | string
  explanation?: string
}
&nbsp;
export interface StudySession {
  id: string
  subjectId: string
  startTime: Date
  endTime?: Date
  plannedDuration: number
  actualDuration?: number
  status: 'active' | 'completed' | 'paused'
  topics: string[]
  notes?: string
}
&nbsp;
export interface Progress {
  sessionsCompleted: number
  totalStudyTime: number
  streakCount: number
  lastActivity: Date
  weeklyGoal: number
  weeklyProgress: number
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../../sorter.js"></script>
        <script src="../../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/App.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/App.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../prettify.css" />
    <link rel="stylesheet" href="../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../index.html">All files</a> / <a href="index.html">examklar-tdd/src</a> App.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>22/22</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>22/22</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { Routes, Route } from 'react-router-dom'
import Layout from './components/layout/Layout'
import OnboardingPage from './pages/OnboardingPage'
import DashboardPage from './pages/DashboardPage'
import StudyPage from './pages/StudyPage'
import FlashcardsPage from './pages/FlashcardsPage'
import QuizPage from './pages/QuizPage'
import NotFoundPage from './pages/NotFoundPage'
&nbsp;
function App() {
  return (
    &lt;Layout&gt;
      &lt;Routes&gt;
        &lt;Route path="/" element={&lt;OnboardingPage /&gt;} /&gt;
        &lt;Route path="/dashboard" element={&lt;DashboardPage /&gt;} /&gt;
        &lt;Route path="/study" element={&lt;StudyPage /&gt;} /&gt;
        &lt;Route path="/flashcards" element={&lt;FlashcardsPage /&gt;} /&gt;
        &lt;Route path="/quiz" element={&lt;QuizPage /&gt;} /&gt;
        &lt;Route path="*" element={&lt;NotFoundPage /&gt;} /&gt;
      &lt;/Routes&gt;
    &lt;/Layout&gt;
  )
}
&nbsp;
export default App
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../sorter.js"></script>
        <script src="../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../prettify.css" />
    <link rel="stylesheet" href="../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../index.html">All files</a> examklar-tdd/src</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">70.96% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>22/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">70.96% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>22/31</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="App.tsx"><a href="App.tsx.html">App.tsx</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="22" class="abs high">22/22</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="22" class="abs high">22/22</td>
	</tr>

<tr>
	<td class="file low" data-value="main.tsx"><a href="main.tsx.html">main.tsx</a></td>
	<td data-value="0" class="pic low">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="9" class="abs low">0/9</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="9" class="abs low">0/9</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../sorter.js"></script>
        <script src="../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/src/main.tsx.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/src/main.tsx</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../../prettify.css" />
    <link rel="stylesheet" href="../../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../../index.html">All files</a> / <a href="index.html">examklar-tdd/src</a> main.tsx</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/9</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a></td><td class="line-coverage quiet"><span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js"><span class="cstat-no" title="statement not covered" >import { StrictMode } from 'react'<span class="fstat-no" title="function not covered" ><span class="branch-0 cbranch-no" title="branch not covered" ></span></span></span>
<span class="cstat-no" title="statement not covered" >import { createRoot } from 'react-dom/client'</span>
<span class="cstat-no" title="statement not covered" >import './index.css'</span>
<span class="cstat-no" title="statement not covered" >import App from './App.tsx'</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >createRoot(document.getElementById('root')!).render(</span>
<span class="cstat-no" title="statement not covered" >  &lt;StrictMode&gt;</span>
<span class="cstat-no" title="statement not covered" >    &lt;App /&gt;</span>
<span class="cstat-no" title="statement not covered" >  &lt;/StrictMode&gt;,</span>
<span class="cstat-no" title="statement not covered" >)</span>
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../../sorter.js"></script>
        <script src="../../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> examklar-tdd</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/29</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/29</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file low" data-value="postcss.config.js"><a href="postcss.config.js.html">postcss.config.js</a></td>
	<td data-value="0" class="pic low">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="6" class="abs low">0/6</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="6" class="abs low">0/6</td>
	</tr>

<tr>
	<td class="file low" data-value="tailwind.config.js"><a href="tailwind.config.js.html">tailwind.config.js</a></td>
	<td data-value="0" class="pic low">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="23" class="abs low">0/23</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="1" class="abs low">0/1</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="23" class="abs low">0/23</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/postcss.config.js.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/postcss.config.js</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">examklar-tdd</a> postcss.config.js</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/6</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a></td><td class="line-coverage quiet"><span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js"><span class="cstat-no" title="statement not covered" >export default {<span class="fstat-no" title="function not covered" ><span class="branch-0 cbranch-no" title="branch not covered" ></span></span></span>
<span class="cstat-no" title="statement not covered" >  plugins: {</span>
<span class="cstat-no" title="statement not covered" >    tailwindcss: {},</span>
<span class="cstat-no" title="statement not covered" >    autoprefixer: {},</span>
<span class="cstat-no" title="statement not covered" >  },</span>
<span class="cstat-no" title="statement not covered" >}</span>
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/examklar-tdd/tailwind.config.js.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for examklar-tdd/tailwind.config.js</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">examklar-tdd</a> tailwind.config.js</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>0/23</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">0% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>0/23</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a></td><td class="line-coverage quiet"><span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js"><span class="cstat-no" title="statement not covered" >/** @type {import('tailwindcss').Config} */<span class="fstat-no" title="function not covered" ><span class="branch-0 cbranch-no" title="branch not covered" ></span></span></span>
<span class="cstat-no" title="statement not covered" >export default {</span>
<span class="cstat-no" title="statement not covered" >  content: [</span>
<span class="cstat-no" title="statement not covered" >    "./index.html",</span>
<span class="cstat-no" title="statement not covered" >    "./src/**/*.{js,ts,jsx,tsx}",</span>
<span class="cstat-no" title="statement not covered" >  ],</span>
<span class="cstat-no" title="statement not covered" >  theme: {</span>
<span class="cstat-no" title="statement not covered" >    extend: {</span>
<span class="cstat-no" title="statement not covered" >      colors: {</span>
<span class="cstat-no" title="statement not covered" >        primary: {</span>
<span class="cstat-no" title="statement not covered" >          50: '#eff6ff',</span>
<span class="cstat-no" title="statement not covered" >          500: '#3b82f6',</span>
<span class="cstat-no" title="statement not covered" >          600: '#2563eb',</span>
<span class="cstat-no" title="statement not covered" >          700: '#1d4ed8',</span>
<span class="cstat-no" title="statement not covered" >        }</span>
<span class="cstat-no" title="statement not covered" >      },</span>
<span class="cstat-no" title="statement not covered" >      fontFamily: {</span>
<span class="cstat-no" title="statement not covered" >        sans: ['Inter', 'sans-serif'],</span>
<span class="cstat-no" title="statement not covered" >      },</span>
<span class="cstat-no" title="statement not covered" >    },</span>
<span class="cstat-no" title="statement not covered" >  },</span>
<span class="cstat-no" title="statement not covered" >  plugins: [],</span>
<span class="cstat-no" title="statement not covered" >}</span>
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/coverage/coverage-final.json">
{"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/postcss.config.js": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/postcss.config.js","all":true,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":16}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":12}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":20}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":21}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":4}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":1}}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":79},"end":{"line":6,"column":1}},"locations":[{"start":{"line":1,"column":79},"end":{"line":6,"column":1}}]}},"b":{"0":[0]},"fnMap":{"0":{"name":"(empty-report)","decl":{"start":{"line":1,"column":79},"end":{"line":6,"column":1}},"loc":{"start":{"line":1,"column":79},"end":{"line":6,"column":1}},"line":1}},"f":{"0":0}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/tailwind.config.js": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/tailwind.config.js","all":true,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":43}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":16}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":12}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":19}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":4}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":10}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":13}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":15}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":18}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":24}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":25}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":25}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":9}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":8}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":19}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":38}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":8}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":6}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":4}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":14}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":1}}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":411},"end":{"line":23,"column":1}},"locations":[{"start":{"line":1,"column":411},"end":{"line":23,"column":1}}]}},"b":{"0":[0]},"fnMap":{"0":{"name":"(empty-report)","decl":{"start":{"line":1,"column":411},"end":{"line":23,"column":1}},"loc":{"start":{"line":1,"column":411},"end":{"line":23,"column":1}},"line":1}},"f":{"0":0}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/App.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/App.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":39}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":47}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":16}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":10}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":12}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":14}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":55}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":63}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":55}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":65}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":53}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":15}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":13}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":1}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":18}}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"9":10,"10":10,"11":10,"12":10,"13":10,"14":10,"15":10,"16":10,"17":10,"18":10,"19":10,"20":10,"22":10,"24":1},"branchMap":{"0":{"type":"branch","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":23,"column":1}},"locations":[{"start":{"line":10,"column":0},"end":{"line":23,"column":1}}]}},"b":{"0":[10]},"fnMap":{"0":{"name":"App","decl":{"start":{"line":10,"column":0},"end":{"line":23,"column":1}},"loc":{"start":{"line":10,"column":0},"end":{"line":23,"column":1}},"line":10}},"f":{"0":10}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/main.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/main.tsx","all":true,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":34}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":20}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":52}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":14}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":11}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":16}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":1}}},"s":{"0":0,"1":0,"2":0,"3":0,"5":0,"6":0,"7":0,"8":0,"9":0},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":203},"end":{"line":10,"column":-148}},"locations":[{"start":{"line":1,"column":203},"end":{"line":10,"column":-148}}]}},"b":{"0":[0]},"fnMap":{"0":{"name":"(empty-report)","decl":{"start":{"line":1,"column":203},"end":{"line":10,"column":-148}},"loc":{"start":{"line":1,"column":203},"end":{"line":10,"column":-148}},"line":1}},"f":{"0":0}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/SubjectCard.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/SubjectCard.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":44}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":43}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":20}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":19}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":18}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":4}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":1}},"31":{"start":{"line":32,"column":0},"end":{"line":32,"column":54}},"32":{"start":{"line":33,"column":0},"end":{"line":33,"column":26}},"33":{"start":{"line":34,"column":0},"end":{"line":34,"column":55}},"34":{"start":{"line":35,"column":0},"end":{"line":35,"column":49}},"35":{"start":{"line":36,"column":0},"end":{"line":36,"column":1}},"40":{"start":{"line":41,"column":0},"end":{"line":41,"column":55}},"41":{"start":{"line":42,"column":0},"end":{"line":42,"column":64}},"42":{"start":{"line":43,"column":0},"end":{"line":43,"column":64}},"43":{"start":{"line":44,"column":0},"end":{"line":44,"column":69}},"44":{"start":{"line":45,"column":0},"end":{"line":45,"column":45}},"45":{"start":{"line":46,"column":0},"end":{"line":46,"column":1}},"57":{"start":{"line":58,"column":0},"end":{"line":58,"column":57}},"58":{"start":{"line":59,"column":0},"end":{"line":59,"column":10}},"59":{"start":{"line":60,"column":0},"end":{"line":60,"column":11}},"60":{"start":{"line":61,"column":0},"end":{"line":61,"column":11}},"61":{"start":{"line":62,"column":0},"end":{"line":62,"column":16}},"62":{"start":{"line":63,"column":0},"end":{"line":63,"column":7}},"63":{"start":{"line":64,"column":0},"end":{"line":64,"column":53}},"64":{"start":{"line":65,"column":0},"end":{"line":65,"column":48}},"66":{"start":{"line":67,"column":0},"end":{"line":67,"column":29}},"67":{"start":{"line":68,"column":0},"end":{"line":68,"column":23}},"68":{"start":{"line":69,"column":0},"end":{"line":69,"column":3}},"70":{"start":{"line":71,"column":0},"end":{"line":71,"column":57}},"71":{"start":{"line":72,"column":0},"end":{"line":72,"column":53}},"72":{"start":{"line":73,"column":0},"end":{"line":73,"column":28}},"73":{"start":{"line":74,"column":0},"end":{"line":74,"column":25}},"74":{"start":{"line":75,"column":0},"end":{"line":75,"column":5}},"75":{"start":{"line":76,"column":0},"end":{"line":76,"column":3}},"77":{"start":{"line":78,"column":0},"end":{"line":78,"column":194}},"79":{"start":{"line":80,"column":0},"end":{"line":80,"column":10}},"80":{"start":{"line":81,"column":0},"end":{"line":81,"column":11}},"81":{"start":{"line":82,"column":0},"end":{"line":82,"column":192}},"82":{"start":{"line":83,"column":0},"end":{"line":83,"column":27}},"83":{"start":{"line":84,"column":0},"end":{"line":84,"column":31}},"84":{"start":{"line":85,"column":0},"end":{"line":85,"column":32}},"85":{"start":{"line":86,"column":0},"end":{"line":86,"column":19}},"86":{"start":{"line":87,"column":0},"end":{"line":87,"column":18}},"89":{"start":{"line":90,"column":0},"end":{"line":90,"column":61}},"90":{"start":{"line":91,"column":0},"end":{"line":91,"column":53}},"91":{"start":{"line":92,"column":0},"end":{"line":92,"column":85}},"92":{"start":{"line":93,"column":0},"end":{"line":93,"column":27}},"93":{"start":{"line":94,"column":0},"end":{"line":94,"column":17}},"94":{"start":{"line":95,"column":0},"end":{"line":95,"column":15}},"95":{"start":{"line":96,"column":0},"end":{"line":96,"column":64}},"96":{"start":{"line":97,"column":0},"end":{"line":97,"column":28}},"97":{"start":{"line":98,"column":0},"end":{"line":98,"column":17}},"98":{"start":{"line":99,"column":0},"end":{"line":99,"column":37}},"99":{"start":{"line":100,"column":0},"end":{"line":100,"column":56}},"100":{"start":{"line":101,"column":0},"end":{"line":101,"column":37}},"101":{"start":{"line":102,"column":0},"end":{"line":102,"column":18}},"103":{"start":{"line":104,"column":0},"end":{"line":104,"column":16}},"104":{"start":{"line":105,"column":0},"end":{"line":105,"column":14}},"107":{"start":{"line":108,"column":0},"end":{"line":108,"column":49}},"108":{"start":{"line":109,"column":0},"end":{"line":109,"column":27}},"109":{"start":{"line":110,"column":0},"end":{"line":110,"column":92}},"111":{"start":{"line":112,"column":0},"end":{"line":112,"column":19}},"113":{"start":{"line":114,"column":0},"end":{"line":114,"column":52}},"114":{"start":{"line":115,"column":0},"end":{"line":115,"column":34}},"115":{"start":{"line":116,"column":0},"end":{"line":116,"column":19}},"117":{"start":{"line":118,"column":0},"end":{"line":118,"column":14}},"118":{"start":{"line":119,"column":0},"end":{"line":119,"column":12}},"121":{"start":{"line":122,"column":0},"end":{"line":122,"column":84}},"122":{"start":{"line":123,"column":0},"end":{"line":123,"column":57}},"123":{"start":{"line":124,"column":0},"end":{"line":124,"column":51}},"124":{"start":{"line":125,"column":0},"end":{"line":125,"column":12}},"127":{"start":{"line":128,"column":0},"end":{"line":128,"column":34}},"128":{"start":{"line":129,"column":0},"end":{"line":129,"column":30}},"129":{"start":{"line":130,"column":0},"end":{"line":130,"column":66}},"130":{"start":{"line":131,"column":0},"end":{"line":131,"column":67}},"131":{"start":{"line":132,"column":0},"end":{"line":132,"column":82}},"132":{"start":{"line":133,"column":0},"end":{"line":133,"column":16}},"133":{"start":{"line":134,"column":0},"end":{"line":134,"column":63}},"134":{"start":{"line":135,"column":0},"end":{"line":135,"column":16}},"135":{"start":{"line":136,"column":0},"end":{"line":136,"column":82}},"136":{"start":{"line":137,"column":0},"end":{"line":137,"column":75}},"137":{"start":{"line":138,"column":0},"end":{"line":138,"column":32}},"138":{"start":{"line":139,"column":0},"end":{"line":139,"column":38}},"139":{"start":{"line":140,"column":0},"end":{"line":140,"column":31}},"140":{"start":{"line":141,"column":0},"end":{"line":141,"column":33}},"141":{"start":{"line":142,"column":0},"end":{"line":142,"column":66}},"142":{"start":{"line":143,"column":0},"end":{"line":143,"column":14}},"143":{"start":{"line":144,"column":0},"end":{"line":144,"column":16}},"144":{"start":{"line":145,"column":0},"end":{"line":145,"column":14}},"146":{"start":{"line":147,"column":0},"end":{"line":147,"column":13}},"148":{"start":{"line":149,"column":0},"end":{"line":149,"column":1}}},"s":{"0":1,"20":1,"21":24,"22":24,"23":24,"24":24,"25":24,"26":24,"31":1,"32":12,"33":12,"34":12,"35":12,"40":1,"41":12,"42":12,"43":12,"44":9,"45":9,"57":1,"58":12,"59":12,"60":12,"61":12,"62":12,"63":12,"64":12,"66":12,"67":1,"68":1,"70":12,"71":1,"72":1,"73":1,"74":1,"75":1,"77":12,"79":12,"80":12,"81":12,"82":12,"83":12,"84":12,"85":12,"86":12,"89":12,"90":12,"91":12,"92":12,"93":12,"94":12,"95":12,"96":12,"97":12,"98":12,"99":11,"100":11,"101":11,"103":12,"104":12,"107":12,"108":12,"109":1,"111":1,"113":11,"114":11,"115":11,"117":12,"118":12,"121":12,"122":12,"123":12,"124":12,"127":12,"128":2,"129":2,"130":2,"131":2,"132":2,"133":2,"134":2,"135":2,"136":2,"137":2,"138":2,"139":2,"140":2,"141":2,"142":2,"143":2,"144":2,"146":12,"148":12},"branchMap":{"0":{"type":"branch","line":21,"loc":{"start":{"line":21,"column":19},"end":{"line":27,"column":1}},"locations":[{"start":{"line":21,"column":19},"end":{"line":27,"column":1}}]},"1":{"type":"branch","line":32,"loc":{"start":{"line":32,"column":25},"end":{"line":36,"column":1}},"locations":[{"start":{"line":32,"column":25},"end":{"line":36,"column":1}}]},"2":{"type":"branch","line":41,"loc":{"start":{"line":41,"column":24},"end":{"line":46,"column":1}},"locations":[{"start":{"line":41,"column":24},"end":{"line":46,"column":1}}]},"3":{"type":"branch","line":42,"loc":{"start":{"line":42,"column":20},"end":{"line":42,"column":64}},"locations":[{"start":{"line":42,"column":20},"end":{"line":42,"column":64}}]},"4":{"type":"branch","line":42,"loc":{"start":{"line":42,"column":27},"end":{"line":43,"column":28}},"locations":[{"start":{"line":42,"column":27},"end":{"line":43,"column":28}}]},"5":{"type":"branch","line":43,"loc":{"start":{"line":43,"column":21},"end":{"line":43,"column":64}},"locations":[{"start":{"line":43,"column":21},"end":{"line":43,"column":64}}]},"6":{"type":"branch","line":43,"loc":{"start":{"line":43,"column":28},"end":{"line":44,"column":29}},"locations":[{"start":{"line":43,"column":28},"end":{"line":44,"column":29}}]},"7":{"type":"branch","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":69}},"locations":[{"start":{"line":44,"column":22},"end":{"line":44,"column":69}}]},"8":{"type":"branch","line":44,"loc":{"start":{"line":44,"column":29},"end":{"line":46,"column":1}},"locations":[{"start":{"line":44,"column":29},"end":{"line":46,"column":1}}]},"9":{"type":"branch","line":58,"loc":{"start":{"line":58,"column":55},"end":{"line":149,"column":1}},"locations":[{"start":{"line":58,"column":55},"end":{"line":149,"column":1}}]},"10":{"type":"branch","line":78,"loc":{"start":{"line":78,"column":151},"end":{"line":78,"column":190}},"locations":[{"start":{"line":78,"column":151},"end":{"line":78,"column":190}}]},"11":{"type":"branch","line":78,"loc":{"start":{"line":78,"column":174},"end":{"line":78,"column":192}},"locations":[{"start":{"line":78,"column":174},"end":{"line":78,"column":192}}]},"12":{"type":"branch","line":99,"loc":{"start":{"line":99,"column":21},"end":{"line":102,"column":18}},"locations":[{"start":{"line":99,"column":21},"end":{"line":102,"column":18}}]},"13":{"type":"branch","line":109,"loc":{"start":{"line":109,"column":22},"end":{"line":112,"column":19}},"locations":[{"start":{"line":109,"column":22},"end":{"line":112,"column":19}}]},"14":{"type":"branch","line":112,"loc":{"start":{"line":112,"column":12},"end":{"line":116,"column":19}},"locations":[{"start":{"line":112,"column":12},"end":{"line":116,"column":19}}]},"15":{"type":"branch","line":128,"loc":{"start":{"line":128,"column":20},"end":{"line":145,"column":14}},"locations":[{"start":{"line":128,"column":20},"end":{"line":145,"column":14}}]},"16":{"type":"branch","line":67,"loc":{"start":{"line":67,"column":22},"end":{"line":69,"column":3}},"locations":[{"start":{"line":67,"column":22},"end":{"line":69,"column":3}}]},"17":{"type":"branch","line":71,"loc":{"start":{"line":71,"column":24},"end":{"line":76,"column":3}},"locations":[{"start":{"line":71,"column":24},"end":{"line":76,"column":3}}]},"18":{"type":"branch","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":52}},"locations":[{"start":{"line":72,"column":22},"end":{"line":72,"column":52}}]}},"b":{"0":[24],"1":[12],"2":[12],"3":[1],"4":[11],"5":[1],"6":[10],"7":[1],"8":[9],"9":[12],"10":[2],"11":[10],"12":[11],"13":[1],"14":[11],"15":[2],"16":[1],"17":[1],"18":[0]},"fnMap":{"0":{"name":"formatDate","decl":{"start":{"line":21,"column":19},"end":{"line":27,"column":1}},"loc":{"start":{"line":21,"column":19},"end":{"line":27,"column":1}},"line":21},"1":{"name":"getDaysUntilExam","decl":{"start":{"line":32,"column":25},"end":{"line":36,"column":1}},"loc":{"start":{"line":32,"column":25},"end":{"line":36,"column":1}},"line":32},"2":{"name":"getUrgencyStyle","decl":{"start":{"line":41,"column":24},"end":{"line":46,"column":1}},"loc":{"start":{"line":41,"column":24},"end":{"line":46,"column":1}},"line":41},"3":{"name":"SubjectCard","decl":{"start":{"line":58,"column":55},"end":{"line":149,"column":1}},"loc":{"start":{"line":58,"column":55},"end":{"line":149,"column":1}},"line":58},"4":{"name":"handleClick","decl":{"start":{"line":67,"column":22},"end":{"line":69,"column":3}},"loc":{"start":{"line":67,"column":22},"end":{"line":69,"column":3}},"line":67},"5":{"name":"handleKeyDown","decl":{"start":{"line":71,"column":24},"end":{"line":76,"column":3}},"loc":{"start":{"line":71,"column":24},"end":{"line":76,"column":3}},"line":71}},"f":{"0":24,"1":12,"2":12,"3":12,"4":1,"5":1}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/layout/Layout.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/layout/Layout.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":38}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":47}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":10}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":60}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":64}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":47}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":75}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":18}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":16}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":14}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":12}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":41}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":64}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":20}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":14}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":13}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":10}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":1}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":21}}},"s":{"0":1,"6":1,"7":29,"8":29,"9":29,"10":29,"11":29,"12":29,"13":29,"14":29,"15":29,"16":29,"17":29,"19":29,"20":29,"21":29,"22":29,"23":29,"24":29,"26":29,"28":1},"branchMap":{"0":{"type":"branch","line":7,"loc":{"start":{"line":7,"column":15},"end":{"line":27,"column":1}},"locations":[{"start":{"line":7,"column":15},"end":{"line":27,"column":1}}]}},"b":{"0":[29]},"fnMap":{"0":{"name":"Layout","decl":{"start":{"line":7,"column":15},"end":{"line":27,"column":1}},"loc":{"start":{"line":7,"column":15},"end":{"line":27,"column":1}},"line":7}},"f":{"0":29}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/ui/Button.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/ui/Button.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":245}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":3}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":15}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":16}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":79}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":84}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":92}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":8}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":13}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":32}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":7}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":6}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":22}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":16}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":5}},"27":{"start":{"line":28,"column":0},"end":{"line":28,"column":3}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":1}},"49":{"start":{"line":50,"column":0},"end":{"line":50,"column":71}},"50":{"start":{"line":51,"column":0},"end":{"line":51,"column":52}},"51":{"start":{"line":52,"column":0},"end":{"line":52,"column":12}},"52":{"start":{"line":53,"column":0},"end":{"line":53,"column":13}},"53":{"start":{"line":54,"column":0},"end":{"line":54,"column":64}},"54":{"start":{"line":55,"column":0},"end":{"line":55,"column":17}},"55":{"start":{"line":56,"column":0},"end":{"line":56,"column":18}},"56":{"start":{"line":57,"column":0},"end":{"line":57,"column":8}},"58":{"start":{"line":59,"column":0},"end":{"line":59,"column":3}},"59":{"start":{"line":60,"column":0},"end":{"line":60,"column":1}},"61":{"start":{"line":62,"column":0},"end":{"line":62,"column":29}}},"s":{"0":1,"1":1,"7":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"49":1,"50":1,"51":11,"52":11,"53":11,"54":11,"55":11,"56":11,"58":11,"59":1,"61":1},"branchMap":{"0":{"type":"branch","line":51,"loc":{"start":{"line":51,"column":2},"end":{"line":59,"column":3}},"locations":[{"start":{"line":51,"column":2},"end":{"line":59,"column":3}}]}},"b":{"0":[11]},"fnMap":{},"f":{}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/ui/Input.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/components/ui/Input.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":211}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":3}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":15}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":16}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":57}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":72}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":79}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":8}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":13}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":32}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":7}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":6}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":22}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":16}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":5}},"27":{"start":{"line":28,"column":0},"end":{"line":28,"column":3}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":1}},"61":{"start":{"line":62,"column":0},"end":{"line":62,"column":68}},"62":{"start":{"line":63,"column":0},"end":{"line":63,"column":5}},"63":{"start":{"line":64,"column":0},"end":{"line":64,"column":15}},"64":{"start":{"line":65,"column":0},"end":{"line":65,"column":13}},"65":{"start":{"line":66,"column":0},"end":{"line":66,"column":10}},"66":{"start":{"line":67,"column":0},"end":{"line":67,"column":11}},"67":{"start":{"line":68,"column":0},"end":{"line":68,"column":11}},"68":{"start":{"line":69,"column":0},"end":{"line":69,"column":13}},"69":{"start":{"line":70,"column":0},"end":{"line":70,"column":14}},"70":{"start":{"line":71,"column":0},"end":{"line":71,"column":13}},"71":{"start":{"line":72,"column":0},"end":{"line":72,"column":7}},"72":{"start":{"line":73,"column":0},"end":{"line":73,"column":13}},"73":{"start":{"line":74,"column":0},"end":{"line":74,"column":14}},"75":{"start":{"line":76,"column":0},"end":{"line":76,"column":37}},"76":{"start":{"line":77,"column":0},"end":{"line":77,"column":37}},"79":{"start":{"line":80,"column":0},"end":{"line":80,"column":88}},"82":{"start":{"line":83,"column":0},"end":{"line":83,"column":25}},"83":{"start":{"line":84,"column":0},"end":{"line":84,"column":34}},"84":{"start":{"line":85,"column":0},"end":{"line":85,"column":35}},"85":{"start":{"line":86,"column":0},"end":{"line":86,"column":44}},"87":{"start":{"line":88,"column":0},"end":{"line":88,"column":12}},"88":{"start":{"line":89,"column":0},"end":{"line":89,"column":33}},"90":{"start":{"line":91,"column":0},"end":{"line":91,"column":19}},"91":{"start":{"line":92,"column":0},"end":{"line":92,"column":17}},"92":{"start":{"line":93,"column":0},"end":{"line":93,"column":29}},"93":{"start":{"line":94,"column":0},"end":{"line":94,"column":63}},"95":{"start":{"line":96,"column":0},"end":{"line":96,"column":19}},"96":{"start":{"line":97,"column":0},"end":{"line":97,"column":70}},"97":{"start":{"line":98,"column":0},"end":{"line":98,"column":18}},"101":{"start":{"line":102,"column":0},"end":{"line":102,"column":14}},"102":{"start":{"line":103,"column":0},"end":{"line":103,"column":19}},"103":{"start":{"line":104,"column":0},"end":{"line":104,"column":22}},"104":{"start":{"line":105,"column":0},"end":{"line":105,"column":82}},"105":{"start":{"line":106,"column":0},"end":{"line":106,"column":34}},"106":{"start":{"line":107,"column":0},"end":{"line":107,"column":32}},"107":{"start":{"line":108,"column":0},"end":{"line":108,"column":40}},"108":{"start":{"line":109,"column":0},"end":{"line":109,"column":20}},"109":{"start":{"line":110,"column":0},"end":{"line":110,"column":10}},"112":{"start":{"line":113,"column":0},"end":{"line":113,"column":19}},"113":{"start":{"line":114,"column":0},"end":{"line":114,"column":13}},"114":{"start":{"line":115,"column":0},"end":{"line":115,"column":35}},"115":{"start":{"line":116,"column":0},"end":{"line":116,"column":44}},"116":{"start":{"line":117,"column":0},"end":{"line":117,"column":24}},"118":{"start":{"line":119,"column":0},"end":{"line":119,"column":19}},"119":{"start":{"line":120,"column":0},"end":{"line":120,"column":14}},"123":{"start":{"line":124,"column":0},"end":{"line":124,"column":32}},"124":{"start":{"line":125,"column":0},"end":{"line":125,"column":13}},"125":{"start":{"line":126,"column":0},"end":{"line":126,"column":34}},"126":{"start":{"line":127,"column":0},"end":{"line":127,"column":45}},"128":{"start":{"line":129,"column":0},"end":{"line":129,"column":22}},"129":{"start":{"line":130,"column":0},"end":{"line":130,"column":14}},"131":{"start":{"line":132,"column":0},"end":{"line":132,"column":12}},"133":{"start":{"line":134,"column":0},"end":{"line":134,"column":3}},"134":{"start":{"line":135,"column":0},"end":{"line":135,"column":1}},"136":{"start":{"line":137,"column":0},"end":{"line":137,"column":27}}},"s":{"0":1,"1":1,"7":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"61":1,"62":1,"63":18,"64":18,"65":18,"66":18,"67":18,"68":18,"69":18,"70":18,"71":18,"72":18,"73":18,"75":18,"76":18,"79":18,"82":18,"83":18,"84":18,"85":18,"87":18,"88":18,"90":18,"91":3,"92":3,"93":3,"95":3,"96":3,"97":3,"101":18,"102":18,"103":18,"104":18,"105":18,"106":18,"107":18,"108":18,"109":18,"112":18,"113":2,"114":2,"115":2,"116":2,"118":2,"119":2,"123":18,"124":1,"125":1,"126":1,"128":1,"129":1,"131":18,"133":18,"134":1,"136":1},"branchMap":{"0":{"type":"branch","line":63,"loc":{"start":{"line":63,"column":2},"end":{"line":134,"column":3}},"locations":[{"start":{"line":63,"column":2},"end":{"line":134,"column":3}}]},"1":{"type":"branch","line":80,"loc":{"start":{"line":80,"column":28},"end":{"line":80,"column":46}},"locations":[{"start":{"line":80,"column":28},"end":{"line":80,"column":46}}]},"2":{"type":"branch","line":80,"loc":{"start":{"line":80,"column":36},"end":{"line":80,"column":88}},"locations":[{"start":{"line":80,"column":36},"end":{"line":80,"column":88}}]},"3":{"type":"branch","line":80,"loc":{"start":{"line":80,"column":46},"end":{"line":80,"column":68}},"locations":[{"start":{"line":80,"column":46},"end":{"line":80,"column":68}}]},"4":{"type":"branch","line":80,"loc":{"start":{"line":80,"column":56},"end":{"line":80,"column":88}},"locations":[{"start":{"line":80,"column":56},"end":{"line":80,"column":88}}]},"5":{"type":"branch","line":84,"loc":{"start":{"line":84,"column":6},"end":{"line":84,"column":34}},"locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":34}}]},"6":{"type":"branch","line":85,"loc":{"start":{"line":85,"column":6},"end":{"line":85,"column":35}},"locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":35}}]},"7":{"type":"branch","line":86,"loc":{"start":{"line":86,"column":30},"end":{"line":86,"column":44}},"locations":[{"start":{"line":86,"column":30},"end":{"line":86,"column":44}}]},"8":{"type":"branch","line":91,"loc":{"start":{"line":91,"column":9},"end":{"line":98,"column":18}},"locations":[{"start":{"line":91,"column":9},"end":{"line":98,"column":18}}]},"9":{"type":"branch","line":97,"loc":{"start":{"line":97,"column":13},"end":{"line":97,"column":70}},"locations":[{"start":{"line":97,"column":13},"end":{"line":97,"column":70}}]},"10":{"type":"branch","line":113,"loc":{"start":{"line":113,"column":9},"end":{"line":120,"column":14}},"locations":[{"start":{"line":113,"column":9},"end":{"line":120,"column":14}}]},"11":{"type":"branch","line":124,"loc":{"start":{"line":124,"column":9},"end":{"line":124,"column":32}},"locations":[{"start":{"line":124,"column":9},"end":{"line":124,"column":32}}]},"12":{"type":"branch","line":124,"loc":{"start":{"line":124,"column":22},"end":{"line":130,"column":14}},"locations":[{"start":{"line":124,"column":22},"end":{"line":130,"column":14}}]}},"b":{"0":[18],"1":[2],"2":[16],"3":[1],"4":[15],"5":[2],"6":[2],"7":[15],"8":[3],"9":[2],"10":[2],"11":[2],"12":[1]},"fnMap":{},"f":{}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/DashboardPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/DashboardPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":76}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":72}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":70}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":14}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":56}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":72}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":71}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":14}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":56}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":71}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":70}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":14}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":12}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":28}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":70}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":78}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":12}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":10}},"27":{"start":{"line":28,"column":0},"end":{"line":28,"column":1}},"29":{"start":{"line":30,"column":0},"end":{"line":30,"column":28}}},"s":{"0":1,"1":10,"2":10,"3":10,"5":10,"6":10,"7":10,"8":10,"9":10,"10":10,"11":10,"12":10,"13":10,"14":10,"15":10,"16":10,"17":10,"18":10,"19":10,"21":10,"22":10,"23":10,"24":10,"25":10,"27":10,"29":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":22},"end":{"line":28,"column":1}},"locations":[{"start":{"line":1,"column":22},"end":{"line":28,"column":1}}]}},"b":{"0":[10]},"fnMap":{"0":{"name":"DashboardPage","decl":{"start":{"line":1,"column":22},"end":{"line":28,"column":1}},"loc":{"start":{"line":1,"column":22},"end":{"line":28,"column":1}},"line":1}},"f":{"0":10}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/FlashcardsPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/FlashcardsPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":30}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":75}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":68}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":15}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":39}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":14}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":14}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":96}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":63}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":67}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":17}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":41}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":16}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":16}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":92}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":19}},"27":{"start":{"line":28,"column":0},"end":{"line":28,"column":14}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":12}},"29":{"start":{"line":30,"column":0},"end":{"line":30,"column":10}},"31":{"start":{"line":32,"column":0},"end":{"line":32,"column":1}},"33":{"start":{"line":34,"column":0},"end":{"line":34,"column":29}}},"s":{"0":1,"1":3,"2":3,"3":3,"5":3,"6":3,"7":3,"8":3,"10":3,"11":3,"13":3,"14":3,"15":3,"16":3,"17":3,"19":3,"20":3,"22":3,"23":3,"24":3,"26":3,"27":3,"28":3,"29":3,"31":3,"33":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":23},"end":{"line":32,"column":1}},"locations":[{"start":{"line":1,"column":23},"end":{"line":32,"column":1}}]}},"b":{"0":[3]},"fnMap":{"0":{"name":"FlashcardsPage","decl":{"start":{"line":1,"column":23},"end":{"line":32,"column":1}},"loc":{"start":{"line":1,"column":23},"end":{"line":32,"column":1}},"line":1}},"f":{"0":3}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/NotFoundPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/NotFoundPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":28}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":71}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":12}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":12}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":10}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":1}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":27}}},"s":{"0":1,"1":3,"2":3,"3":3,"5":3,"6":3,"7":3,"9":3,"10":3,"11":3,"13":3,"15":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":21},"end":{"line":14,"column":1}},"locations":[{"start":{"line":1,"column":21},"end":{"line":14,"column":1}}]}},"b":{"0":[3]},"fnMap":{"0":{"name":"NotFoundPage","decl":{"start":{"line":1,"column":21},"end":{"line":14,"column":1}},"loc":{"start":{"line":1,"column":21},"end":{"line":14,"column":1}},"line":1}},"f":{"0":3}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/OnboardingPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/OnboardingPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":30}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":10}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":74}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":12}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":12}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":10}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":1}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":29}}},"s":{"0":1,"1":6,"2":6,"3":6,"5":6,"6":6,"8":6,"9":6,"10":6,"12":6,"13":6,"14":6,"16":6,"18":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":23},"end":{"line":17,"column":1}},"locations":[{"start":{"line":1,"column":23},"end":{"line":17,"column":1}}]}},"b":{"0":[6]},"fnMap":{"0":{"name":"OnboardingPage","decl":{"start":{"line":1,"column":23},"end":{"line":17,"column":1}},"loc":{"start":{"line":1,"column":23},"end":{"line":17,"column":1}},"line":1}},"f":{"0":6}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/QuizPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/QuizPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":24}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":75}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":68}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":15}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":39}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":14}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":14}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":51}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":65}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":15}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":44}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":14}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":37}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":135}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":21}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":135}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":21}},"29":{"start":{"line":30,"column":0},"end":{"line":30,"column":135}},"31":{"start":{"line":32,"column":0},"end":{"line":32,"column":21}},"32":{"start":{"line":33,"column":0},"end":{"line":33,"column":135}},"34":{"start":{"line":35,"column":0},"end":{"line":35,"column":21}},"35":{"start":{"line":36,"column":0},"end":{"line":36,"column":16}},"36":{"start":{"line":37,"column":0},"end":{"line":37,"column":14}},"37":{"start":{"line":38,"column":0},"end":{"line":38,"column":12}},"38":{"start":{"line":39,"column":0},"end":{"line":39,"column":10}},"40":{"start":{"line":41,"column":0},"end":{"line":41,"column":1}},"42":{"start":{"line":43,"column":0},"end":{"line":43,"column":23}}},"s":{"0":1,"1":3,"2":3,"3":3,"5":3,"6":3,"7":3,"8":3,"10":3,"11":3,"13":3,"14":3,"15":3,"16":3,"18":3,"19":3,"21":3,"22":3,"23":3,"25":3,"26":3,"28":3,"29":3,"31":3,"32":3,"34":3,"35":3,"36":3,"37":3,"38":3,"40":3,"42":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":41,"column":1}},"locations":[{"start":{"line":1,"column":17},"end":{"line":41,"column":1}}]}},"b":{"0":[3]},"fnMap":{"0":{"name":"QuizPage","decl":{"start":{"line":1,"column":17},"end":{"line":41,"column":1}},"loc":{"start":{"line":1,"column":17},"end":{"line":41,"column":1}},"line":1}},"f":{"0":3}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/StudyPage.tsx": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/pages/StudyPage.tsx","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":10}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":11}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":75}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":68}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":15}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":39}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":14}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":14}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":63}},"16":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"17":{"start":{"line":18,"column":0},"end":{"line":18,"column":77}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":16}},"20":{"start":{"line":21,"column":0},"end":{"line":21,"column":54}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":81}},"22":{"start":{"line":23,"column":0},"end":{"line":23,"column":57}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":16}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":14}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":12}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":10}},"28":{"start":{"line":29,"column":0},"end":{"line":29,"column":1}},"30":{"start":{"line":31,"column":0},"end":{"line":31,"column":24}}},"s":{"0":1,"1":4,"2":4,"3":4,"5":4,"6":4,"7":4,"8":4,"10":4,"11":4,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":4,"21":4,"22":4,"23":4,"24":4,"25":4,"26":4,"28":4,"30":1},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":18},"end":{"line":29,"column":1}},"locations":[{"start":{"line":1,"column":18},"end":{"line":29,"column":1}}]}},"b":{"0":[4]},"fnMap":{"0":{"name":"StudyPage","decl":{"start":{"line":1,"column":18},"end":{"line":29,"column":1}},"loc":{"start":{"line":1,"column":18},"end":{"line":29,"column":1}},"line":1}},"f":{"0":4}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/stores/examStore.ts": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/stores/examStore.ts","all":false,"statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":32}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":54}},"33":{"start":{"line":34,"column":0},"end":{"line":34,"column":22}},"34":{"start":{"line":35,"column":0},"end":{"line":35,"column":13}},"35":{"start":{"line":36,"column":0},"end":{"line":36,"column":15}},"36":{"start":{"line":37,"column":0},"end":{"line":37,"column":23}},"37":{"start":{"line":38,"column":0},"end":{"line":38,"column":18}},"38":{"start":{"line":39,"column":0},"end":{"line":39,"column":16}},"39":{"start":{"line":40,"column":0},"end":{"line":40,"column":1}},"44":{"start":{"line":45,"column":0},"end":{"line":45,"column":48}},"45":{"start":{"line":46,"column":0},"end":{"line":46,"column":11}},"46":{"start":{"line":47,"column":0},"end":{"line":47,"column":12}},"47":{"start":{"line":48,"column":0},"end":{"line":48,"column":22}},"48":{"start":{"line":49,"column":0},"end":{"line":49,"column":24}},"51":{"start":{"line":52,"column":0},"end":{"line":52,"column":59}},"54":{"start":{"line":55,"column":0},"end":{"line":55,"column":50}},"55":{"start":{"line":56,"column":0},"end":{"line":56,"column":48}},"56":{"start":{"line":57,"column":0},"end":{"line":57,"column":33}},"58":{"start":{"line":59,"column":0},"end":{"line":59,"column":54}},"59":{"start":{"line":60,"column":0},"end":{"line":60,"column":80}},"60":{"start":{"line":61,"column":0},"end":{"line":61,"column":72}},"61":{"start":{"line":62,"column":0},"end":{"line":62,"column":19}},"62":{"start":{"line":63,"column":0},"end":{"line":63,"column":34}},"64":{"start":{"line":65,"column":0},"end":{"line":65,"column":18}},"65":{"start":{"line":66,"column":0},"end":{"line":66,"column":38}},"66":{"start":{"line":67,"column":0},"end":{"line":67,"column":26}},"67":{"start":{"line":68,"column":0},"end":{"line":68,"column":11}},"68":{"start":{"line":69,"column":0},"end":{"line":69,"column":35}},"70":{"start":{"line":71,"column":0},"end":{"line":71,"column":101}},"73":{"start":{"line":74,"column":0},"end":{"line":74,"column":86}},"76":{"start":{"line":77,"column":0},"end":{"line":77,"column":81}},"79":{"start":{"line":80,"column":0},"end":{"line":80,"column":37}},"80":{"start":{"line":81,"column":0},"end":{"line":81,"column":29}},"81":{"start":{"line":82,"column":0},"end":{"line":82,"column":32}},"83":{"start":{"line":84,"column":0},"end":{"line":84,"column":31}},"84":{"start":{"line":85,"column":0},"end":{"line":85,"column":54}},"85":{"start":{"line":86,"column":0},"end":{"line":86,"column":72}},"86":{"start":{"line":87,"column":0},"end":{"line":87,"column":10}},"88":{"start":{"line":89,"column":0},"end":{"line":89,"column":35}},"89":{"start":{"line":90,"column":0},"end":{"line":90,"column":29}},"92":{"start":{"line":93,"column":0},"end":{"line":93,"column":52}},"93":{"start":{"line":94,"column":0},"end":{"line":94,"column":10}},"95":{"start":{"line":96,"column":0},"end":{"line":96,"column":30}},"96":{"start":{"line":97,"column":0},"end":{"line":97,"column":29}},"97":{"start":{"line":98,"column":0},"end":{"line":98,"column":56}},"98":{"start":{"line":99,"column":0},"end":{"line":99,"column":10}},"101":{"start":{"line":102,"column":0},"end":{"line":102,"column":54}},"102":{"start":{"line":103,"column":0},"end":{"line":103,"column":9}},"103":{"start":{"line":104,"column":0},"end":{"line":104,"column":7}},"104":{"start":{"line":105,"column":0},"end":{"line":105,"column":33}},"105":{"start":{"line":106,"column":0},"end":{"line":106,"column":19}},"107":{"start":{"line":108,"column":0},"end":{"line":108,"column":33}},"108":{"start":{"line":109,"column":0},"end":{"line":109,"column":19}},"109":{"start":{"line":110,"column":0},"end":{"line":110,"column":30}},"110":{"start":{"line":111,"column":0},"end":{"line":111,"column":26}},"111":{"start":{"line":112,"column":0},"end":{"line":112,"column":57}},"112":{"start":{"line":113,"column":0},"end":{"line":113,"column":19}},"113":{"start":{"line":114,"column":0},"end":{"line":114,"column":52}},"114":{"start":{"line":115,"column":0},"end":{"line":115,"column":23}},"115":{"start":{"line":116,"column":0},"end":{"line":116,"column":53}},"116":{"start":{"line":117,"column":0},"end":{"line":117,"column":54}},"117":{"start":{"line":118,"column":0},"end":{"line":118,"column":14}},"118":{"start":{"line":119,"column":0},"end":{"line":119,"column":50}},"119":{"start":{"line":120,"column":0},"end":{"line":120,"column":36}},"120":{"start":{"line":121,"column":0},"end":{"line":121,"column":66}},"121":{"start":{"line":122,"column":0},"end":{"line":122,"column":67}},"122":{"start":{"line":123,"column":0},"end":{"line":123,"column":19}},"123":{"start":{"line":124,"column":0},"end":{"line":124,"column":40}},"124":{"start":{"line":125,"column":0},"end":{"line":125,"column":31}},"125":{"start":{"line":126,"column":0},"end":{"line":126,"column":62}},"126":{"start":{"line":127,"column":0},"end":{"line":127,"column":18}},"127":{"start":{"line":128,"column":0},"end":{"line":128,"column":11}},"128":{"start":{"line":129,"column":0},"end":{"line":129,"column":46}},"129":{"start":{"line":130,"column":0},"end":{"line":130,"column":22}},"131":{"start":{"line":132,"column":0},"end":{"line":132,"column":29}},"132":{"start":{"line":133,"column":0},"end":{"line":133,"column":67}},"133":{"start":{"line":134,"column":0},"end":{"line":134,"column":13}},"135":{"start":{"line":136,"column":0},"end":{"line":136,"column":61}},"136":{"start":{"line":137,"column":0},"end":{"line":137,"column":25}},"137":{"start":{"line":138,"column":0},"end":{"line":138,"column":51}},"138":{"start":{"line":139,"column":0},"end":{"line":139,"column":52}},"139":{"start":{"line":140,"column":0},"end":{"line":140,"column":15}},"141":{"start":{"line":142,"column":0},"end":{"line":142,"column":39}},"142":{"start":{"line":143,"column":0},"end":{"line":143,"column":85}},"143":{"start":{"line":144,"column":0},"end":{"line":144,"column":87}},"144":{"start":{"line":145,"column":0},"end":{"line":145,"column":13}},"146":{"start":{"line":147,"column":0},"end":{"line":147,"column":34}},"147":{"start":{"line":148,"column":0},"end":{"line":148,"column":77}},"148":{"start":{"line":149,"column":0},"end":{"line":149,"column":13}},"149":{"start":{"line":150,"column":0},"end":{"line":150,"column":11}},"150":{"start":{"line":151,"column":0},"end":{"line":151,"column":9}},"151":{"start":{"line":152,"column":0},"end":{"line":152,"column":7}},"152":{"start":{"line":153,"column":0},"end":{"line":153,"column":6}},"153":{"start":{"line":154,"column":0},"end":{"line":154,"column":5}},"154":{"start":{"line":155,"column":0},"end":{"line":155,"column":28}},"155":{"start":{"line":156,"column":0},"end":{"line":156,"column":5}},"156":{"start":{"line":157,"column":0},"end":{"line":157,"column":3}},"157":{"start":{"line":158,"column":0},"end":{"line":158,"column":1}}},"s":{"0":1,"1":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"44":1,"45":1,"46":1,"47":1,"48":1,"51":1,"54":1,"55":10,"56":10,"58":1,"59":2,"60":2,"61":1,"62":1,"64":2,"65":2,"66":2,"67":2,"68":2,"70":1,"73":1,"76":1,"79":1,"80":1,"81":1,"83":1,"84":1,"85":1,"86":1,"88":1,"89":0,"92":0,"93":0,"95":1,"96":0,"97":0,"98":0,"101":1,"102":1,"103":1,"104":1,"105":1,"107":1,"108":29,"109":29,"110":4,"111":4,"112":29,"113":29,"114":17,"115":17,"116":17,"117":29,"118":29,"119":3,"120":3,"121":3,"122":29,"123":29,"124":1,"125":1,"126":29,"127":29,"128":1,"129":1,"131":1,"132":0,"133":0,"135":1,"136":0,"137":0,"138":0,"139":1,"141":1,"142":0,"143":0,"144":0,"146":1,"147":0,"148":0,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1},"branchMap":{"0":{"type":"branch","line":48,"loc":{"start":{"line":48,"column":6},"end":{"line":103,"column":9}},"locations":[{"start":{"line":48,"column":6},"end":{"line":103,"column":9}}]},"1":{"type":"branch","line":52,"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":59}},"locations":[{"start":{"line":52,"column":17},"end":{"line":52,"column":59}}]},"2":{"type":"branch","line":55,"loc":{"start":{"line":55,"column":20},"end":{"line":57,"column":33}},"locations":[{"start":{"line":55,"column":20},"end":{"line":57,"column":33}}]},"3":{"type":"branch","line":55,"loc":{"start":{"line":55,"column":37},"end":{"line":57,"column":12}},"locations":[{"start":{"line":55,"column":37},"end":{"line":57,"column":12}}]},"4":{"type":"branch","line":59,"loc":{"start":{"line":59,"column":23},"end":{"line":69,"column":35}},"locations":[{"start":{"line":59,"column":23},"end":{"line":69,"column":35}}]},"5":{"type":"branch","line":59,"loc":{"start":{"line":59,"column":42},"end":{"line":69,"column":11}},"locations":[{"start":{"line":59,"column":42},"end":{"line":69,"column":11}}]},"6":{"type":"branch","line":61,"loc":{"start":{"line":61,"column":39},"end":{"line":61,"column":62}},"locations":[{"start":{"line":61,"column":39},"end":{"line":61,"column":62}}]},"7":{"type":"branch","line":61,"loc":{"start":{"line":61,"column":62},"end":{"line":62,"column":19}},"locations":[{"start":{"line":61,"column":62},"end":{"line":62,"column":19}}]},"8":{"type":"branch","line":62,"loc":{"start":{"line":62,"column":14},"end":{"line":63,"column":34}},"locations":[{"start":{"line":62,"column":14},"end":{"line":63,"column":34}}]},"9":{"type":"branch","line":60,"loc":{"start":{"line":60,"column":56},"end":{"line":60,"column":79}},"locations":[{"start":{"line":60,"column":56},"end":{"line":60,"column":79}}]},"10":{"type":"branch","line":71,"loc":{"start":{"line":71,"column":27},"end":{"line":71,"column":101}},"locations":[{"start":{"line":71,"column":27},"end":{"line":71,"column":101}}]},"11":{"type":"branch","line":74,"loc":{"start":{"line":74,"column":25},"end":{"line":74,"column":86}},"locations":[{"start":{"line":74,"column":25},"end":{"line":74,"column":86}}]},"12":{"type":"branch","line":80,"loc":{"start":{"line":80,"column":30},"end":{"line":87,"column":10}},"locations":[{"start":{"line":80,"column":30},"end":{"line":87,"column":10}}]},"13":{"type":"branch","line":85,"loc":{"start":{"line":85,"column":20},"end":{"line":85,"column":53}},"locations":[{"start":{"line":85,"column":20},"end":{"line":85,"column":53}}]},"14":{"type":"branch","line":86,"loc":{"start":{"line":86,"column":18},"end":{"line":86,"column":71}},"locations":[{"start":{"line":86,"column":18},"end":{"line":86,"column":71}}]},"15":{"type":"branch","line":102,"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":54}},"locations":[{"start":{"line":102,"column":15},"end":{"line":102,"column":54}}]},"16":{"type":"branch","line":108,"loc":{"start":{"line":108,"column":20},"end":{"line":128,"column":11}},"locations":[{"start":{"line":108,"column":20},"end":{"line":128,"column":11}}]},"17":{"type":"branch","line":110,"loc":{"start":{"line":110,"column":22},"end":{"line":113,"column":14}},"locations":[{"start":{"line":110,"column":22},"end":{"line":113,"column":14}}]},"18":{"type":"branch","line":113,"loc":{"start":{"line":113,"column":10},"end":{"line":113,"column":19}},"locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":19}}]},"19":{"type":"branch","line":119,"loc":{"start":{"line":119,"column":32},"end":{"line":123,"column":14}},"locations":[{"start":{"line":119,"column":32},"end":{"line":123,"column":14}}]},"20":{"type":"branch","line":123,"loc":{"start":{"line":123,"column":10},"end":{"line":123,"column":19}},"locations":[{"start":{"line":123,"column":10},"end":{"line":123,"column":19}}]},"21":{"type":"branch","line":124,"loc":{"start":{"line":124,"column":27},"end":{"line":127,"column":14}},"locations":[{"start":{"line":124,"column":27},"end":{"line":127,"column":14}}]},"22":{"type":"branch","line":127,"loc":{"start":{"line":127,"column":10},"end":{"line":127,"column":18}},"locations":[{"start":{"line":127,"column":10},"end":{"line":127,"column":18}}]},"23":{"type":"branch","line":114,"loc":{"start":{"line":114,"column":39},"end":{"line":118,"column":12}},"locations":[{"start":{"line":114,"column":39},"end":{"line":118,"column":12}}]},"24":{"type":"branch","line":129,"loc":{"start":{"line":129,"column":28},"end":{"line":151,"column":9}},"locations":[{"start":{"line":129,"column":28},"end":{"line":151,"column":9}}]},"25":{"type":"branch","line":129,"loc":{"start":{"line":129,"column":34},"end":{"line":151,"column":9}},"locations":[{"start":{"line":129,"column":34},"end":{"line":151,"column":9}}]},"26":{"type":"branch","line":132,"loc":{"start":{"line":132,"column":28},"end":{"line":134,"column":13}},"locations":[{"start":{"line":132,"column":28},"end":{"line":134,"column":13}}]},"27":{"type":"branch","line":142,"loc":{"start":{"line":142,"column":38},"end":{"line":145,"column":13}},"locations":[{"start":{"line":142,"column":38},"end":{"line":145,"column":13}}]},"28":{"type":"branch","line":147,"loc":{"start":{"line":147,"column":33},"end":{"line":149,"column":13}},"locations":[{"start":{"line":147,"column":33},"end":{"line":149,"column":13}}]}},"b":{"0":[1],"1":[2],"2":[10],"3":[10],"4":[2],"5":[2],"6":[1],"7":[1],"8":[1],"9":[3],"10":[3],"11":[1],"12":[1],"13":[2],"14":[1],"15":[11],"16":[29],"17":[4],"18":[25],"19":[3],"20":[26],"21":[1],"22":[28],"23":[17],"24":[1],"25":[1],"26":[0],"27":[0],"28":[0]},"fnMap":{"0":{"name":"useExamStore.name","decl":{"start":{"line":48,"column":6},"end":{"line":103,"column":9}},"loc":{"start":{"line":48,"column":6},"end":{"line":103,"column":9}},"line":48},"1":{"name":"setUser","decl":{"start":{"line":52,"column":17},"end":{"line":52,"column":59}},"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":59}},"line":52},"2":{"name":"addSubject","decl":{"start":{"line":55,"column":20},"end":{"line":57,"column":33}},"loc":{"start":{"line":55,"column":20},"end":{"line":57,"column":33}},"line":55},"3":{"name":"removeSubject","decl":{"start":{"line":59,"column":23},"end":{"line":69,"column":35}},"loc":{"start":{"line":59,"column":23},"end":{"line":69,"column":35}},"line":59},"4":{"name":"setCurrentSubject","decl":{"start":{"line":71,"column":27},"end":{"line":71,"column":101}},"loc":{"start":{"line":71,"column":27},"end":{"line":71,"column":101}},"line":71},"5":{"name":"updateStudyPlan","decl":{"start":{"line":74,"column":25},"end":{"line":74,"column":86}},"loc":{"start":{"line":74,"column":25},"end":{"line":74,"column":86}},"line":74},"6":{"name":"updateProgress","decl":{"start":{"line":77,"column":24},"end":{"line":77,"column":81}},"loc":{"start":{"line":77,"column":24},"end":{"line":77,"column":81}},"line":77},"7":{"name":"getUpcomingDeadlines","decl":{"start":{"line":80,"column":30},"end":{"line":87,"column":10}},"loc":{"start":{"line":80,"column":30},"end":{"line":87,"column":10}},"line":80},"8":{"name":"getCurrentProgress","decl":{"start":{"line":89,"column":28},"end":{"line":94,"column":10}},"loc":{"start":{"line":89,"column":28},"end":{"line":94,"column":10}},"line":89},"9":{"name":"getTodaysGoal","decl":{"start":{"line":96,"column":23},"end":{"line":99,"column":10}},"loc":{"start":{"line":96,"column":23},"end":{"line":99,"column":10}},"line":96},"10":{"name":"reset","decl":{"start":{"line":102,"column":15},"end":{"line":102,"column":54}},"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":54}},"line":102},"11":{"name":"partialize","decl":{"start":{"line":108,"column":20},"end":{"line":128,"column":11}},"loc":{"start":{"line":108,"column":20},"end":{"line":128,"column":11}},"line":108},"12":{"name":"onRehydrateStorage","decl":{"start":{"line":129,"column":28},"end":{"line":151,"column":9}},"loc":{"start":{"line":129,"column":28},"end":{"line":151,"column":9}},"line":129}},"f":{"0":1,"1":2,"2":10,"3":2,"4":3,"5":1,"6":0,"7":1,"8":0,"9":0,"10":11,"11":29,"12":1}}
,"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/types/index.ts": {"path":"/Users/Yousef_1/Dokumenter/HjemmesideIT/EksamKlarReboot/examklar-tdd/src/types/index.ts","all":true,"statementMap":{},"s":{},"branchMap":{"0":{"type":"branch","line":1,"loc":{"start":{"line":1,"column":2154},"end":{"line":118,"column":1}},"locations":[{"start":{"line":1,"column":2154},"end":{"line":118,"column":1}}]}},"b":{"0":[1]},"fnMap":{"0":{"name":"(empty-report)","decl":{"start":{"line":1,"column":2154},"end":{"line":118,"column":1}},"loc":{"start":{"line":1,"column":2154},"end":{"line":118,"column":1}},"line":1}},"f":{"0":1}}
}
</file>

<file path="examklar-tdd/coverage/index.html">
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for All files</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1>All files</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">89.61% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>466/520</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">90.54% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>67/74</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80.64% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>25/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">89.61% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>466/520</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file low" data-value="examklar-tdd"><a href="examklar-tdd/index.html">examklar-tdd</a></td>
	<td data-value="0" class="pic low">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="29" class="abs low">0/29</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="2" class="abs low">0/2</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="2" class="abs low">0/2</td>
	<td data-value="0" class="pct low">0%</td>
	<td data-value="29" class="abs low">0/29</td>
	</tr>

<tr>
	<td class="file medium" data-value="examklar-tdd/src"><a href="examklar-tdd/src/index.html">examklar-tdd/src</a></td>
	<td data-value="70.96" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 70%"></div><div class="cover-empty" style="width: 30%"></div></div>
	</td>
	<td data-value="70.96" class="pct medium">70.96%</td>
	<td data-value="31" class="abs medium">22/31</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="2" class="abs medium">1/2</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="2" class="abs medium">1/2</td>
	<td data-value="70.96" class="pct medium">70.96%</td>
	<td data-value="31" class="abs medium">22/31</td>
	</tr>

<tr>
	<td class="file high" data-value="examklar-tdd/src/components"><a href="examklar-tdd/src/components/index.html">examklar-tdd/src/components</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="93" class="abs high">93/93</td>
	<td data-value="94.73" class="pct high">94.73%</td>
	<td data-value="19" class="abs high">18/19</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="93" class="abs high">93/93</td>
	</tr>

<tr>
	<td class="file high" data-value="examklar-tdd/src/components/layout"><a href="examklar-tdd/src/components/layout/index.html">examklar-tdd/src/components/layout</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="21" class="abs high">21/21</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="21" class="abs high">21/21</td>
	</tr>

<tr>
	<td class="file high" data-value="examklar-tdd/src/components/ui"><a href="examklar-tdd/src/components/ui/index.html">examklar-tdd/src/components/ui</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="112" class="abs high">112/112</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="14" class="abs high">14/14</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="112" class="abs high">112/112</td>
	</tr>

<tr>
	<td class="file high" data-value="examklar-tdd/src/pages"><a href="examklar-tdd/src/pages/index.html">examklar-tdd/src/pages</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="136" class="abs high">136/136</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="136" class="abs high">136/136</td>
	</tr>

<tr>
	<td class="file high" data-value="examklar-tdd/src/stores"><a href="examklar-tdd/src/stores/index.html">examklar-tdd/src/stores</a></td>
	<td data-value="83.67" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 83%"></div><div class="cover-empty" style="width: 17%"></div></div>
	</td>
	<td data-value="83.67" class="pct high">83.67%</td>
	<td data-value="98" class="abs high">82/98</td>
	<td data-value="89.65" class="pct high">89.65%</td>
	<td data-value="29" class="abs high">26/29</td>
	<td data-value="76.92" class="pct medium">76.92%</td>
	<td data-value="13" class="abs medium">10/13</td>
	<td data-value="83.67" class="pct high">83.67%</td>
	<td data-value="98" class="abs high">82/98</td>
	</tr>

<tr>
	<td class="file empty" data-value="examklar-tdd/src/types"><a href="examklar-tdd/src/types/index.html">examklar-tdd/src/types</a></td>
	<td data-value="0" class="pic empty">
	<div class="chart"><div class="cover-fill" style="width: 0%"></div><div class="cover-empty" style="width: 100%"></div></div>
	</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="0" class="abs empty">0/0</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="1" class="abs empty">1/1</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="1" class="abs empty">1/1</td>
	<td data-value="0" class="pct empty">0%</td>
	<td data-value="0" class="abs empty">0/0</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-06-22T19:00:26.106Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
</file>

<file path="examklar-tdd/src/components/ui/Button.tsx">
import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

/**
 * Button component variants using class-variance-authority
 * Provides consistent styling across the application
 */
const buttonVariants = cva(
  // Base styles applied to all buttons
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed',
  {
    variants: {
      variant: {
        primary: 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800',
        secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 active:bg-gray-400',
        outline: 'border border-gray-300 bg-transparent hover:bg-gray-50 active:bg-gray-100'
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4 text-sm',
        lg: 'h-12 px-6 text-base'
      }
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md'
    }
  }
)

/**
 * Button component props extending HTML button attributes
 * with custom variant and size options
 */
export interface ButtonProps 
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  /** Additional CSS classes to apply */
  className?: string
}

/**
 * Button component with multiple variants and sizes
 * 
 * @example
 * <Button variant="primary" size="md" onClick={handleClick}>
 *   Click me
 * </Button>
 */
export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={buttonVariants({ variant, size, className })}
        ref={ref}
        {...props}
      />
    )
  }
)

Button.displayName = 'Button'
</file>

<file path="examklar-tdd/src/pages/DashboardPage.tsx">
const DashboardPage = () => {
  return (
    <div className="py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Study Progress</h2>
          <p className="text-gray-600">Track your learning journey</p>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Upcoming Exams</h2>
          <p className="text-gray-600">Stay on top of your schedule</p>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
          <p className="text-gray-600">Start studying or reviewing</p>
        </div>
      </div>
      
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Study Overview</h2>
        <p className="text-gray-600">Overview of your current study status</p>
      </div>
    </div>
  )
}

export default DashboardPage
</file>

<file path="examklar-tdd/src/pages/OnboardingPage.tsx">
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useExamStore } from '../stores/examStore'
import { Button } from '../components/ui/Button'
import { Input } from '../components/ui/Input'

interface OnboardingData {
  subjectName: string
  examDate: string
  estimatedHours: string
}

const OnboardingPage = () => {
  const [currentStep, setCurrentStep] = useState(1)
  const [formData, setFormData] = useState<OnboardingData>({
    subjectName: '',
    examDate: '',
    estimatedHours: ''
  })
  const [errors, setErrors] = useState<Partial<OnboardingData>>({})
  
  const { addSubject, completeOnboarding } = useExamStore()
  const navigate = useNavigate()

  const validateStep2 = (): boolean => {
    const newErrors: Partial<OnboardingData> = {}
    
    if (!formData.subjectName.trim()) {
      newErrors.subjectName = 'Subject name is required'
    }
    
    if (!formData.examDate) {
      newErrors.examDate = 'Exam date is required'
    }
    
    if (!formData.estimatedHours || parseInt(formData.estimatedHours) <= 0) {
      newErrors.estimatedHours = 'Estimated hours must be a positive number'
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleNext = () => {
    if (currentStep === 2) {
      if (!validateStep2()) {
        return
      }
      
      // Add subject to store
      const subject = {
        id: crypto.randomUUID(),
        name: formData.subjectName,
        description: `Exam preparation for ${formData.subjectName}`,
        emoji: 'üìö',
        examDate: new Date(formData.examDate),
        estimatedHours: parseInt(formData.estimatedHours),
        createdAt: new Date()
      }
      
      addSubject(subject)
      // Complete onboarding when reaching step 3
      completeOnboarding()
    }
    
    setCurrentStep(currentStep + 1)
  }

  const handleBack = () => {
    setCurrentStep(currentStep - 1)
  }

  const handleGoToDashboard = () => {
    navigate('/dashboard')
  }

  const handleInputChange = (field: keyof OnboardingData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }))
    }
  }

  // Step 1: Welcome
  if (currentStep === 1) {
    return (
      <div className="text-center py-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          Welcome to ExamKlar
        </h1>
        <p className="text-xl text-gray-600 mb-8">
          Your AI-powered study companion
        </p>
        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto">
          <p className="text-gray-700 mb-6">
            Get started with your personalized exam preparation journey
          </p>
          <div className="mb-4">
            <span className="text-sm text-gray-500">Step 1 of 3</span>
          </div>
          <Button onClick={handleNext} className="w-full">
            Get Started
          </Button>
        </div>
      </div>
    )
  }

  // Step 2: Add Subject
  if (currentStep === 2) {
    return (
      <div className="text-center py-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          Add Your First Subject
        </h1>
        <p className="text-xl text-gray-600 mb-8">
          Tell us about your upcoming exam
        </p>
        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto">
          <div className="mb-4">
            <span className="text-sm text-gray-500">Step 2 of 3</span>
          </div>
          
          <div className="space-y-4">
            <div>
              <Input
                label="Subject Name"
                type="text"
                value={formData.subjectName}
                onChange={(e) => handleInputChange('subjectName', e.target.value)}
                error={errors.subjectName}
                placeholder="e.g., Mathematics, Physics, History"
              />
            </div>
            
            <div>
              <Input
                label="Exam Date"
                type="date"
                value={formData.examDate}
                onChange={(e) => handleInputChange('examDate', e.target.value)}
                error={errors.examDate}
              />
            </div>
            
            <div>
              <Input
                label="Estimated Hours"
                type="number"
                value={formData.estimatedHours}
                onChange={(e) => handleInputChange('estimatedHours', e.target.value)}
                error={errors.estimatedHours}
                placeholder="How many hours do you plan to study?"
                min="1"
              />
            </div>
          </div>
          
          <div className="flex gap-3 mt-6">
            <Button variant="secondary" onClick={handleBack} className="flex-1">
              Back
            </Button>
            <Button onClick={handleNext} className="flex-1">
              Next
            </Button>
          </div>
        </div>
      </div>
    )
  }

  // Step 3: Completion
  return (
    <div className="text-center py-12">
      <h1 className="text-4xl font-bold text-gray-900 mb-4">
        You're All Set!
      </h1>
      <p className="text-xl text-gray-600 mb-8">
        Your study plan is ready to go
      </p>
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto">
        <div className="mb-4">
          <span className="text-sm text-gray-500">Step 3 of 3</span>
        </div>
        
        <div className="mb-6">
          <div className="text-green-600 text-6xl mb-4">‚úì</div>
          <p className="text-gray-700">
            Great! We've created your first subject: <strong>{formData.subjectName}</strong>
          </p>
          <p className="text-sm text-gray-500 mt-2">
            Exam date: {new Date(formData.examDate).toLocaleDateString()}
          </p>
        </div>
        
        <Button onClick={handleGoToDashboard} className="w-full">
          Go to Dashboard
        </Button>
      </div>
    </div>
  )
}

export default OnboardingPage
</file>

<file path="examklar-tdd/src/pages/StudyPage.tsx">
const StudyPage = () => {
  return (
    <div className="py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Study Session
      </h1>
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Ready to start your study session?
          </h2>
          <p className="text-gray-600">
            Choose your subject and dive into focused learning
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-blue-50 rounded-lg p-6">
            <h3 className="text-lg font-medium text-blue-900 mb-2">Timer</h3>
            <p className="text-blue-700">25:00</p>
          </div>
          <div className="bg-green-50 rounded-lg p-6">
            <h3 className="text-lg font-medium text-green-900 mb-2">Progress</h3>
            <p className="text-green-700">0% Complete</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default StudyPage
</file>

<file path="examklar-tdd/tests/pages/DashboardPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import '@testing-library/jest-dom'
import DashboardPage from '../../src/pages/DashboardPage'
import Layout from '../../src/components/layout/Layout'

describe('DashboardPage - TDD', () => {
  it('should render Dashboard heading', () => {
    render(
      <Layout>
        <DashboardPage />
      </Layout>
    )
    expect(screen.getByText('Dashboard')).toBeInTheDocument()
  })
  
  it('should have a main heading with correct accessibility', () => {
    render(
      <Layout>
        <DashboardPage />
      </Layout>
    )
    expect(screen.getByRole('heading', { level: 1, name: /Dashboard/i })).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    render(
      <Layout>
        <DashboardPage />
      </Layout>
    )
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
  
  it('should display user progress overview', () => {
    render(
      <Layout>
        <DashboardPage />
      </Layout>
    )
    expect(screen.getByText(/progress/i)).toBeInTheDocument()
  })
  
  it('should show study overview section', () => {
    render(
      <Layout>
        <DashboardPage />
      </Layout>
    )
    expect(screen.getByText(/study overview/i)).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/OnboardingPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect, beforeEach } from 'vitest'
import '@testing-library/jest-dom'
import { BrowserRouter } from 'react-router-dom'
import OnboardingPage from '../../src/pages/OnboardingPage'
import Layout from '../../src/components/layout/Layout'
import { useExamStore } from '../../src/stores/examStore'

const renderOnboardingPage = () => {
  return render(
    <BrowserRouter>
      <Layout>
        <OnboardingPage />
      </Layout>
    </BrowserRouter>
  )
}

describe('OnboardingPage - TDD', () => {
  beforeEach(() => {
    // Reset store state before each test
    useExamStore.getState().reset()
  })

  it('should render welcome message', () => {
    renderOnboardingPage()
    expect(screen.getByText('Welcome to ExamKlar')).toBeInTheDocument()
  })
  
  it('should render subtitle about AI-powered study companion', () => {
    renderOnboardingPage()
    expect(screen.getByText(/AI-powered study companion/i)).toBeInTheDocument()
  })
  
  it('should have a main heading with correct accessibility', () => {
    renderOnboardingPage()
    expect(screen.getByRole('heading', { level: 1, name: /Welcome to ExamKlar/i })).toBeInTheDocument()
  })
  
  it('should render call-to-action content', () => {
    renderOnboardingPage()
    expect(screen.getByText(/personalized exam preparation/i)).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    renderOnboardingPage()
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/pages/StudyPage.test.tsx">
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import '@testing-library/jest-dom'
import StudyPage from '../../src/pages/StudyPage'
import Layout from '../../src/components/layout/Layout'

describe('StudyPage - TDD', () => {
  it('should render Study Session heading', () => {
    render(
      <Layout>
        <StudyPage />
      </Layout>
    )
    expect(screen.getByText('Study Session')).toBeInTheDocument()
  })
  
  it('should have a main heading with correct accessibility', () => {
    render(
      <Layout>
        <StudyPage />
      </Layout>
    )
    expect(screen.getByRole('heading', { level: 1, name: /Study Session/i })).toBeInTheDocument()
  })
  
  it('should have proper semantic structure', () => {
    render(
      <Layout>
        <StudyPage />
      </Layout>
    )
    expect(screen.getByRole('main')).toBeInTheDocument()
  })
})
</file>

<file path="examklar-tdd/tests/App.test.tsx">
import { render, screen } from '@testing-library/react'
import { MemoryRouter } from 'react-router-dom'
import { describe, it, expect } from 'vitest'
import App from '../src/App'

describe('App Routing - TDD', () => {
  it('should render onboarding page on root route', () => {
    render(
      <MemoryRouter initialEntries={['/']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Welcome to ExamKlar')).toBeInTheDocument()
  })
  
  it('should render dashboard on /dashboard route', () => {
    render(
      <MemoryRouter initialEntries={['/dashboard']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Dashboard')).toBeInTheDocument()
  })
  
  it('should render study page on /study route', () => {
    render(
      <MemoryRouter initialEntries={['/study']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Study Session')).toBeInTheDocument()
  })
  
  it('should render flashcards page on /flashcards route', () => {
    render(
      <MemoryRouter initialEntries={['/flashcards']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Flashcards')).toBeInTheDocument()
  })
  
  it('should render quiz page on /quiz route', () => {
    render(
      <MemoryRouter initialEntries={['/quiz']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Quiz')).toBeInTheDocument()
  })
  
  it('should render 404 page for unknown routes', () => {
    render(
      <MemoryRouter initialEntries={['/unknown-route']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByText('Page Not Found')).toBeInTheDocument()
  })
  
  it('should have proper navigation structure', () => {
    render(
      <MemoryRouter initialEntries={['/dashboard']}>
        <App />
      </MemoryRouter>
    )
    
    // Check for navigation elements
    expect(screen.getByRole('navigation')).toBeInTheDocument()
  })
  
  it('should maintain layout across different routes', () => {
    const { rerender } = render(
      <MemoryRouter initialEntries={['/dashboard']}>
        <App />
      </MemoryRouter>
    )
    
    expect(screen.getByRole('navigation')).toBeInTheDocument()
    
    rerender(
      <MemoryRouter initialEntries={['/study']}>
        <App />
      </MemoryRouter>
    )
    
    // Navigation should still be present
    expect(screen.getByRole('navigation')).toBeInTheDocument()
  })
  
  it('should handle protected routes when not authenticated', () => {
    render(
      <MemoryRouter initialEntries={['/dashboard']}>
        <App />
      </MemoryRouter>
    )
    
    // Should redirect to onboarding if not set up
    // This test will be implemented when we have auth state
    // Check that we have exactly one main element (from Layout)
    const mainElements = screen.getAllByRole('main')
    expect(mainElements).toHaveLength(1)
  })
})
</file>

<file path="examklar-tdd/src/App.tsx">
import { Routes, Route } from 'react-router-dom'
import Layout from './components/layout/Layout'
import OnboardingPage from './pages/OnboardingPage'
import DashboardPage from './pages/DashboardPage'
import StudyPage from './pages/StudyPage'
import FlashcardsPage from './pages/FlashcardsPage'
import QuizPage from './pages/QuizPage'
import NotFoundPage from './pages/NotFoundPage'

function App() {
  return (
    <Layout>
      <Routes>
        <Route path="/" element={<OnboardingPage />} />
        <Route path="/dashboard" element={<DashboardPage />} />
        <Route path="/study" element={<StudyPage />} />
        <Route path="/flashcards" element={<FlashcardsPage />} />
        <Route path="/quiz" element={<QuizPage />} />
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </Layout>
  )
}

export default App
</file>

<file path="Contextsystem/current-session.md">
# ExamKlar TDD Session Log

## Session Started
Session initialized for ExamKlar TDD development
[2025-06-22T19:05:29.468515] Created comprehensive TDD-first master plan and context system - Established bulletproof development methodology with test-driven approach, complete project structure, and quality assurance framework
[2025-06-22T19:30:08.857709] üß™ TDD CYCLE 1 COMPLETE: Created Button component with comprehensive test suite - 9/9 tests passing. Followed RED-GREEN-REFACTOR methodology: wrote failing tests first, implemented minimal code to pass, now ready for refactor phase
[2025-06-22T19:41:22.963159] üß™ TDD CYCLES 1-2 COMPLETE: Implemented Button component (9/9 tests) and ExamStore with full Zustand state management (10/10 tests). Total 19/19 tests passing with good coverage. TDD methodology working perfectly - RED-GREEN-REFACTOR cycles established
[2025-06-22T19:51:09.754627] üß™ TDD CYCLES 1-3 COMPLETE: Button (9/9), Input (14/14), ExamStore (10/10) - Total 33/33 tests passing! Input component with full validation, accessibility, and error handling. TDD methodology proven with 100% component coverage. Ready for next cycle
[2025-06-22T19:57:55.997304] üß™ TDD CYCLE 4 COMPLETE: SubjectCard component (12/12 tests) - Total 45/45 tests passing! Following master plan Day 3-5 completed. SubjectCard with progress tracking, urgency styling, accessibility, keyboard navigation. Ready for Day 6-7: Routing and Layout TDD
[2025-06-22T20:02:47.976074] üß™ TDD CYCLE 5 - GREEN PHASE: Started implementing App.tsx routing structure and Layout component to pass failing App.test.tsx routing tests. Created Layout component with navigation. Need to complete page components next.
[2025-06-22T20:04:06.783396] STOPPING non-TDD approach - starting proper TDD cycle for page components. Writing tests FIRST before implementation.
[2025-06-22T20:21:04.728928] ‚ö†Ô∏è PARTIAL SUCCESS + 1 BLOCKING ISSUE: Completed TDD cycles for all page components (OnboardingPage, DashboardPage, StudyPage, FlashcardsPage, QuizPage, NotFoundPage) - all 64 individual tests PASS. Layout component created. Only App.test.tsx fails due to import resolution issue with App.tsx - all other routing/page tests work perfectly. Need to fix App.tsx import issue to complete routing TDD cycle. Status: 64/64 individual tests pass, only 1 test suite blocked by import bug.
[2025-06-22T20:57:16.853937] üß™ TDD CYCLE COMPLETE: Fixed App.tsx routing structure - 73/73 tests passing! Corrected import paths in App.test.tsx and removed duplicate main elements from all page components. Layout component now provides single main role. Proper semantic HTML structure implemented following TDD methodology: RED (failing import/duplicate main tests) ‚Üí GREEN (fixed imports + page structure) ‚Üí REFACTOR (clean code). App.tsx and routing system fully working per master plan.
[2025-06-22T22:34:40.287063] üß™ TDD CYCLE 6 COMPLETE: Onboarding Integration Flow - 79/79 tests passing! Successfully implemented multi-step onboarding with subject creation, form validation, and state management following TDD methodology: RED (6 failing integration tests) ‚Üí GREEN (implemented OnboardingPage with 3-step flow, updated ExamStore) ‚Üí REFACTOR (fixed Router context in unit tests). Features: step navigation, form validation, subject creation, onboarding completion tracking. Ready for next TDD cycle per master plan.
</file>

<file path="Contextsystem/NEXT_ACTIONS.md">
# NEXT ACTIONS - ExamKlar TDD Project

## LAST ACTION COMPLETED
‚úÖ üß™ TDD CYCLE 6 COMPLETE: Onboarding Integration Flow - 79/79 tests passing! Successfully implemented multi-step onboarding with subject creation, form validation, and state management following TDD methodology: RED (6 failing integration tests) ‚Üí GREEN (implemented OnboardingPage with 3-step flow, updated ExamStore) ‚Üí REFACTOR (fixed Router context in unit tests). Features: step navigation, form validation, subject creation, onboarding completion tracking. Ready for next TDD cycle per master plan. (at 2025-06-22T22:34:40.287063)

## IMMEDIATE NEXT STEPS
1. Continue with TDD development workflow
2. **CRITICAL**: After your next action, run:
   ```bash
   python3 update_context.py "description of what you did"
   ```

## TDD WORKFLOW REMINDER
üß™ **RED-GREEN-REFACTOR**:
1. Write a failing test first
2. Write minimal code to make it pass
3. Refactor to improve code quality
4. Repeat

## MANDATORY RULE FOR ALL AIs
üö® **YOU MUST ALWAYS**:
1. After creating/modifying ANY file
2. After running ANY test
3. After ANY significant action
4. Run: `python3 update_context.py "what you just did"`

## Test Status Tracking
- **Unit Tests**: Run `npm test` to check current status
- **Coverage**: Aim for >90% coverage
- **TDD Cycle**: Always write tests before implementation

## Recovery Instructions
If you're a new AI taking over:
1. Read this file to see what was last done
2. Check current-session.md for full context
3. Continue with TDD workflow
4. **REMEMBER**: Update context after every action!

## Context Last Updated
2025-06-22T22:34:40.287063 - üß™ TDD CYCLE 6 COMPLETE: Onboarding Integration Flow - 79/79 tests passing! Successfully implemented multi-step onboarding with subject creation, form validation, and state management following TDD methodology: RED (6 failing integration tests) ‚Üí GREEN (implemented OnboardingPage with 3-step flow, updated ExamStore) ‚Üí REFACTOR (fixed Router context in unit tests). Features: step navigation, form validation, subject creation, onboarding completion tracking. Ready for next TDD cycle per master plan.
</file>

<file path="Contextsystem/project-status.json">
{
  "project_name": "ExamKlar - React TDD Project",
  "last_update": "2025-06-22T22:34:40.287063",
  "last_action": "\ud83e\uddea TDD CYCLE 6 COMPLETE: Onboarding Integration Flow - 79/79 tests passing! Successfully implemented multi-step onboarding with subject creation, form validation, and state management following TDD methodology: RED (6 failing integration tests) \u2192 GREEN (implemented OnboardingPage with 3-step flow, updated ExamStore) \u2192 REFACTOR (fixed Router context in unit tests). Features: step navigation, form validation, subject creation, onboarding completion tracking. Ready for next TDD cycle per master plan.",
  "status": "active",
  "context_system": "tdd-focused",
  "methodology": "test-driven-development",
  "instructions": "Always run 'python3 update_context.py \"action\"' after any action"
}
</file>

</files>

This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src
- Files matching these patterns are excluded: .qodo, .pytest_cache, __pycache__, venv, .env, lid.176.bin, node_modules/, /.pnp, .pnp.js, .yarn/cache, .yarn/unplugged, .yarn/build-state.yml, .yarn/install-state.gz, .pnp.*, /dist, /build, /out, /.vite, /.next/, /storybook-static, npm-debug.log*, yarn-debug.log*, yarn-error.log*, pnpm-debug.log*, lerna-debug.log*, *.log, .env.local, .env.development.local, .env.test.local, .env.production.local, .env*.local, .env*.production, .env*.development, /coverage, /nyc_output, /.nyc_output, /test-results/, /playwright-report/, /blob-report/, /playwright/.cache/, *.lcov, .coverage, junit.xml, .cache/, .parcel-cache/, .eslintcache, .stylelintcache, .rpt2_cache/, .rts2_cache_cjs/, .rts2_cache_es/, .rts2_cache_umd/, *.tsbuildinfo, .tscache, vite.config.js.timestamp-*, vite.config.ts.timestamp-*, .idea/, *.sublime-workspace, *.sublime-project, .project, .classpath, .c9/, *.launch, .settings/, *.tmproj, .tmtags, .vscode-test, .DS_Store, .DS_Store?, ._*, .Spotlight-V100, .Trashes, ehthumbs.db, Thumbs.db, Desktop.ini, .BIN/, .AppleDouble, .LSOverride, .DocumentRevisions-V100, .fseventsd, .TemporaryItems, .VolumeIcon.icns, .com.apple.timemachine.donotpresent, *.pid, *.seed, *.pid.lock, .firebase/, firebase-debug.log, firestore-debug.log, ui-debug.log, firebase-debug.*.log, .npm, .node_repl_history, *.tgz, .yarn-integrity, .nuxt, tmp/, temp/, *.suo, *.ntvs*, *.njsproj, *.sln, *.sw?, .local, .sentryclirc, *.vsix, *.sln.iml, .AppleDesktop, Network Trash Folder, Temporary Items, .apdisk, Thumbs.db:encryptable, ehthumbs_vista.db, *.stackdump, *.cab, *.msi, *.msix, *.msm, *.msp, *.lnk, *~, .fuse_hidden*, .directory, .Trash-*, .nfs*, cypress/videos/, cypress/screenshots/, cypress/downloads/, jest.config.js.map, .webpack/, web_modules/, package-lock.json, yarn.lock, pnpm-lock.yaml, .pnpm-debug.log, .serverless/, .fusebox/, .dynamodb/, .tern-port, .sonar/, .scannerwork/, sonar-scanner-*/, sonar-scanner-cli.zip
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  assets/
    react.svg
  components/
    layout/
      Layout.tsx
      Navigation.tsx
    ui/
      Badge.tsx
      Button.tsx
      Card.tsx
      Input.tsx
      Modal.tsx
      ProgressComponents.tsx
      Tooltip.tsx
    AchievementsList.tsx
    DeckManager.tsx
    Flashcard.tsx
    FlashcardDeck.tsx
    ProgressCharts.tsx
    Quiz.tsx
    QuizEngine.tsx
    QuizMinimal.tsx
    QuizTest.tsx
    StudyCalendar.tsx
    StudyProgressDashboard.tsx
    StudyTimer.tsx
    SubjectCard.tsx
  lib/
    utils.ts
  pages/
    DashboardPage.tsx
    FlashcardsPage.tsx
    KahootDesignDemo.tsx
    NotFoundPage.tsx
    OnboardingPage.tsx
    QuizPage.tsx
    StudyPage.tsx
  stores/
    achievementStore.ts
    examStore.ts
    flashcardStore.ts
  styles/
    gamified-design-system.css
    kahoot-design-system.css
  types/
    index.ts
  utils/
    buildUtils.ts
    dataBridge.ts
    performanceUtils.ts
  App.css
  App.tsx
  index.css
  main.tsx
  test-setup.ts
  vite-env.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/layout/Layout.tsx">
import { type ReactNode } from 'react'
import Navigation from './Navigation'
interface LayoutProps {
  children: ReactNode
}
const Layout = (
⋮----
{/* Skip Link for Accessibility - MUST be first focusable element */}
</file>

<file path="src/components/layout/Navigation.tsx">
import { Link, useLocation } from 'react-router-dom'
import { useState } from 'react'
import {
  HomeIcon,
  BookOpenIcon,
  RectangleStackIcon,
  QuestionMarkCircleIcon,
  Bars3Icon,
  XMarkIcon,
} from '@heroicons/react/24/outline'
⋮----
const getLinkClasses = (href: string, isMobile: boolean = false) =>
const toggleMobileMenu = () =>
⋮----
{/* Desktop Navigation */}
⋮----
className=
⋮----
{/* Mobile Menu Toggle */}
⋮----
{/* Mobile Navigation Menu */}
</file>

<file path="src/components/ui/Badge.tsx">
import React from 'react'
import { cn } from '../../lib/utils'
interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  size?: 'small' | 'medium' | 'large'
  achievement?: 'none' | 'gold' | 'silver' | 'bronze'
  pulse?: boolean
  icon?: string
  count?: number
  dot?: boolean
  outline?: boolean
}
</file>

<file path="src/components/ui/Button.tsx">
import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
/**
 * Button component variants using class-variance-authority
 * Provides consistent styling across the application
 */
⋮----
// Base styles applied to all buttons
⋮----
// Gamified variants
⋮----
// Gamified sizes
⋮----
/**
 * Button component props extending HTML button attributes
 * with custom variant and size options
 */
export interface ButtonProps 
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  /** Additional CSS classes to apply */
  className?: string
  /** Loading state - disables button and shows loading indicator */
  loading?: boolean
  /** Icon to display in button */
  icon?: string
  /** Position of icon relative to text */
  iconPosition?: 'left' | 'right'
}
⋮----
/** Additional CSS classes to apply */
⋮----
/** Loading state - disables button and shows loading indicator */
⋮----
/** Icon to display in button */
⋮----
/** Position of icon relative to text */
⋮----
/**
 * Button component with multiple variants and sizes
 * 
 * @example
 * <Button variant="primary" size="md" onClick={handleClick}>
 *   Click me
 * </Button>
 * 
 * @example
 * <Button variant="gamified-primary" size="gamified-large" icon="🚀" iconPosition="left">
 *   Start Learning
 * </Button>
 */
⋮----
const handleKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) =>
</file>

<file path="src/components/ui/Card.tsx">
import React from 'react'
import { cn } from '../../lib/utils'
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  interactive?: boolean
  elevation?: 'none' | 'low' | 'medium' | 'high'
  progress?: number
  achievement?: 'none' | 'completed' | 'locked' | 'in-progress'
}
⋮----
<div ref=
⋮----
<h3 ref=
⋮----
<p ref=
⋮----
// Compound component pattern
</file>

<file path="src/components/ui/Input.tsx">
import React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
/**
 * Input component variants using class-variance-authority
 * Provides consistent styling and behavior across the application
 */
⋮----
// Base styles applied to all inputs
⋮----
// Gamified variants
⋮----
// Gamified sizes
⋮----
/**
 * Input component props extending HTML input attributes
 * with custom styling and validation options
 */
export interface InputProps 
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,
    VariantProps<typeof inputVariants> {
  /** Label text for the input */
  label?: string
  /** Error message to display */
  error?: string
  /** Success state indicator */
  success?: boolean
  /** Help text to display below the input */
  helpText?: string
  /** Additional CSS classes to apply */
  className?: string
  /** Icon to display in input */
  icon?: string
  /** Position of icon relative to input */
  iconPosition?: 'left' | 'right'
}
⋮----
/** Label text for the input */
⋮----
/** Error message to display */
⋮----
/** Success state indicator */
⋮----
/** Help text to display below the input */
⋮----
/** Additional CSS classes to apply */
⋮----
/** Icon to display in input */
⋮----
/** Position of icon relative to input */
⋮----
/**
 * Input component with label, validation states, and help text
 * 
 * @example
 * <Input 
 *   label="Email"
 *   type="email"
 *   required
 *   error="Please enter a valid email"
 *   helpText="We'll never share your email"
 * />
 */
⋮----
// Generate unique ID - call hook unconditionally
⋮----
// Determine variant based on error/success state
⋮----
// Generate describedBy ID for accessibility
⋮----
className=
⋮----
{/* Label */}
⋮----
{/* Input with optional icon */}
⋮----
{/* Error Message */}
⋮----
{/* Help Text */}
</file>

<file path="src/components/ui/Modal.tsx">
import React, { useEffect } from 'react'
import { cn } from '../../lib/utils'
interface ModalProps extends React.HTMLAttributes<HTMLDivElement> {
  open: boolean
  onClose: () => void
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'achievement'
  size?: 'small' | 'medium' | 'large' | 'fullscreen'
  animated?: boolean
}
⋮----
// Handle Escape key
⋮----
const handleEscape = (event: KeyboardEvent) =>
⋮----
// Prevent body scroll when modal is open
⋮----
const handleOverlayClick = (e: React.MouseEvent) =>
⋮----
onClick=
⋮----
<div ref=
⋮----
<h2 ref=
⋮----
<p ref=
⋮----
// Compound component pattern
</file>

<file path="src/components/ui/ProgressComponents.tsx">
interface ProgressMetricCardProps {
  title: string
  value: string | number
  bgColor: string
  textColor: string
  subtitle?: string
  dataTestId?: string
}
/**
 * Reusable metric card component for displaying progress statistics
 */
⋮----
/**
 * Reusable progress bar component
 */
</file>

<file path="src/components/ui/Tooltip.tsx">
import React, { useState, useRef, useEffect } from 'react'
import { cn } from '../../lib/utils'
interface TooltipProps {
  content: string
  children: React.ReactElement
  position?: 'top' | 'bottom' | 'left' | 'right'
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'achievement'
  size?: 'small' | 'medium' | 'large'
  arrow?: boolean
  delay?: number
  className?: string
  'data-testid'?: string
}
⋮----
const showTooltipWithDelay = () =>
const hideTooltip = () =>
</file>

<file path="src/components/AchievementsList.tsx">
import React from 'react';
import { useAchievementStore, type Achievement } from '../stores/achievementStore';
interface AchievementItemProps {
  achievement: Achievement;
  isUnlocked: boolean;
}
⋮----
isUnlocked=
⋮----
// Group achievements by category
</file>

<file path="src/components/DeckManager.tsx">
import React, { useState, useMemo } from 'react'
import { useFlashcardStore } from '../stores/flashcardStore'
import type { FlashcardDeck } from '../types'
import { Button } from './ui/Button'
import { Input } from './ui/Input'
// 🟢 GREEN: Creating DeckManager component to make tests pass
interface CreateDeckFormData {
  name: string
  description: string
  subjectId: string
}
interface EditDeckData {
  name: string
  description: string
}
⋮----
// Filter and sort decks
⋮----
// Apply search filter
⋮----
// Apply subject filter
⋮----
// Apply sorting
⋮----
// Apply same filters to sorted results
⋮----
const handleCreateDeck = (e: React.FormEvent) =>
const handleEditDeck = (e: React.FormEvent) =>
const handleDeleteDeck = (deckId: string) =>
const handleExportDeck = (deckId: string) =>
const handleImportDeck = (e: React.FormEvent) =>
const startEditing = (deck: FlashcardDeck) =>
⋮----
{/* Statistics Section */}
⋮----
{/* Controls Section */}
⋮----
{/* Search and Filter Controls */}
⋮----
onChange=
⋮----
{/* Decks List */}
⋮----
{/* Create Deck Modal */}
⋮----
{/* Edit Deck Modal */}
⋮----
{/* Import Deck Modal */}
⋮----
{/* Export Data Modal */}
⋮----
{/* Delete Confirmation Modal */}
{/* Note: Using window.confirm for simplicity, but a custom modal would be better */}
</file>

<file path="src/components/Flashcard.tsx">
import React, { useState } from 'react'
import type { Flashcard as FlashcardType } from '../types'
export interface FlashcardProps {
  card: FlashcardType
  onFlip?: (cardId: string, showingBack: boolean) => void
  isFlipping?: boolean
}
⋮----
const handleFlip = () =>
const handleKeyDown = (event: React.KeyboardEvent) =>
const getDifficultyColor = (difficulty: string) =>
const formatDifficulty = (difficulty: string) =>
⋮----
{/* Card */}
⋮----
{/* Card Content */}
⋮----
{/* Back of card */}
⋮----
{/* Review stats */}
⋮----
{/* Front of card */}
⋮----
{/* Flip indicator */}
⋮----
{/* Card metadata */}
⋮----
{/* Difficulty badge */}
⋮----
{/* Tags */}
</file>

<file path="src/components/FlashcardDeck.tsx">
import React, { useState, useEffect, useRef, useCallback } from 'react'
import type { Flashcard as FlashcardType, FlashcardSession } from '../types'
import { Flashcard } from './Flashcard'
import { Button } from './ui/Button'
export interface FlashcardDeckProps {
  cards: FlashcardType[]
  onCardComplete?: (cardId: string, result: 'correct' | 'incorrect') => void
  onDeckComplete?: (session: Omit<FlashcardSession, 'id' | 'flashcardIds' | 'startedAt'>) => void
  autoAdvance?: boolean
  autoAdvanceDelay?: number
}
export const FlashcardDeck: React.FC<FlashcardDeckProps> = ({
  cards,
  onCardComplete,
  onDeckComplete,
  autoAdvance = false,
  autoAdvanceDelay = 3000
}) =>
⋮----
// Update shuffled cards when cards prop changes
⋮----
// Auto-advance functionality
⋮----
// Keyboard navigation
⋮----
const handleKeyDown = (event: KeyboardEvent) =>
⋮----
// Check if deck is complete
⋮----
const handleCardComplete = (result: 'correct' | 'incorrect') =>
const handleShuffle = () =>
// Calculate difficulty distribution
⋮----
{/* Progress and stats */}
⋮----
{/* Progress bar */}
⋮----
<span>Progress:
⋮----
{/* Difficulty distribution */}
⋮----
{/* Main flashcard */}
⋮----
{/* Controls */}
⋮----
{/* Navigation */}
⋮----
{/* Actions */}
⋮----
{/* Utility */}
</file>

<file path="src/components/ProgressCharts.tsx">
// 🟢 GREEN PHASE: Minimal implementation to make tests pass
import React from 'react'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  ArcElement,
  PointElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js'
import { Bar, Pie, Line } from 'react-chartjs-2'
// Register Chart.js components
⋮----
export interface ProgressChartsData {
  weeklyStudyHours: Array<{ day: string; hours: number }>
  subjectProgress: Array<{ subject: string; completed: number; total: number }>
  monthlyTrend: Array<{ month: string; hours: number }>
}
export interface ProgressChartsProps {
  data: ProgressChartsData
}
export const ProgressCharts: React.FC<ProgressChartsProps> = (
⋮----
// Provide default data if empty to ensure charts always render
⋮----
// Prepare chart data
⋮----
{/* Weekly Study Hours Chart */}
⋮----
{/* Subject Progress Chart */}
⋮----
{/* Monthly Trend Chart */}
</file>

<file path="src/components/Quiz.tsx">
import React, { useState, useEffect, useCallback } from 'react'
import type { Quiz as QuizType, QuizResult, QuizAnswer } from '../types'
import { Button } from './ui/Button'
interface QuizProps {
  quiz: QuizType
  onComplete?: (result: QuizResult) => void
}
type QuizMode = 'quiz' | 'complete' | 'review'
⋮----
timeSpent: 0 // Simplified for now
⋮----
// Timer logic
⋮----
const formatTime = (seconds: number): string =>
const handleAnswerSelect = (answerIndex: number) =>
const handleNext = () =>
const handleFinishConfirm = () =>
const handleKeyDown = (event: React.KeyboardEvent, optionIndex: number) =>
⋮----
{/* Header */}
⋮----
{/* Question */}
⋮----
{/* Answer Options */}
⋮----
{/* Navigation */}
⋮----
{/* Confirmation Dialog */}
⋮----
{/* Time's up message */}
</file>

<file path="src/components/QuizEngine.tsx">
import React, { useState, useMemo } from 'react'
import type { Quiz, QuizHistory, QuizResult } from '../types'
import { Button } from './ui/Button'
import { Input } from './ui/Input'
import { Quiz as QuizComponent } from './Quiz'
interface QuizEngineProps {
  quizzes: Quiz[]
  history?: QuizHistory[]
  onQuizComplete?: (result: QuizResult & { completedAt: Date }) => void
}
type DifficultyFilter = 'all' | 'easy' | 'medium' | 'hard'
type ViewMode = 'list' | 'quiz'
⋮----
// Calculate overall statistics
⋮----
// Filter and search quizzes
⋮----
// Search filter
⋮----
// Difficulty filter
⋮----
const handleStartQuiz = (quiz: Quiz) =>
const handleQuizComplete = (result: QuizResult) =>
const formatTime = (seconds: number): string =>
const getQuizHistory = (quizId: string) =>
const hasFailedAttempts = (quizId: string) =>
⋮----
{/* Statistics */}
⋮----
{/* Search and Filters */}
⋮----
onChange=
⋮----
{/* Recent Attempts */}
⋮----
{/* Quiz List */}
</file>

<file path="src/components/QuizMinimal.tsx">
export function QuizMinimal()
</file>

<file path="src/components/QuizTest.tsx">
import React from 'react'
export const Quiz: React.FC<
⋮----
console.log('Quiz data:', quiz) // Use the quiz parameter
</file>

<file path="src/components/StudyCalendar.tsx">
import { useState, memo } from 'react';
import { useExamStore } from '../stores/examStore';
import type { StudySession } from '../stores/examStore';
interface AddSessionFormData {
  subjectName: string;
  duration: number;
  topicsPlanned: string[];
  type: 'scheduled';
}
⋮----
// Combine all sessions for display
⋮----
// Calendar navigation
const navigatePrevious = () =>
const navigateNext = () =>
const goToToday = () =>
// Session handlers
const handleDateClick = (date: string) =>
const handleSessionClick = (session: StudySession) =>
const handleAddSession = (formData: AddSessionFormData) =>
⋮----
// Use the first subject if available, or create a default one
⋮----
const handleEditSession = () =>
const handleDeleteSession = () =>
const confirmDelete = () =>
// Format current month/year
⋮----
// Generate calendar days (simplified - just render a grid)
⋮----
e.stopPropagation();
handleSessionClick(session);
⋮----
// Check if calendar is empty
⋮----
{/* Screen Reader Announcements */}
⋮----
{/* Calendar Header */}
⋮----
{/* Empty State */}
⋮----
{/* Calendar Grid */}
⋮----
{/* Weekday Headers */}
⋮----
{/* Calendar Days */}
⋮----
{/* Add Session Modal */}
⋮----
{/* Edit Session Modal */}
⋮----
// Ensure all required fields are present
⋮----
{/* Session Details Popup */}
⋮----
{/* Delete Confirmation */}
⋮----
// Add Session Form Component
⋮----
const handleSubmit = (e: React.FormEvent) =>
⋮----
onChange=
⋮----
// Edit Session Form Component
⋮----
const [formData, setFormData] = useState({
    subjectName: session.subjectName,
    duration: session.duration,
    topics: (session.topicsStudied || session.topicsPlanned || []).join(', ')
  });
⋮----
e.preventDefault();
</file>

<file path="src/components/StudyProgressDashboard.tsx">
import { useExamStore } from '../stores/examStore'
import { useFlashcardStore } from '../stores/flashcardStore'
import { ProgressMetricCard, ProgressBar } from './ui/ProgressComponents'
import { ProgressCharts, type ProgressChartsData } from './ProgressCharts'
import { StudyCalendar } from './StudyCalendar'
/**
 * Utility functions for the dashboard
 */
const formatTime = (minutes: number): string =>
const calculateEfficiency = (totalMinutes: number, sessions: number): string =>
/**
 * StudyProgressDashboard Component
 * Displays comprehensive study analytics and progress tracking
 * Following TDD-first development approach with refactored reusable components
 */
⋮----
// V5 Gamification: Streak Counter Integration
⋮----
// Handle empty state
⋮----
{/* Study Calendar */}
⋮----
// Calculate metrics
⋮----
// Prepare chart data
⋮----
{/* Key Metrics Grid */}
⋮----
{/* Weekly Goal Progress */}
⋮----
{/* Two Column Layout */}
⋮----
{/* Upcoming Exams */}
⋮----

⋮----
{/* Flashcard Stats */}
⋮----
{/* Progress Charts */}
⋮----
{/* Study Calendar */}
</file>

<file path="src/components/StudyTimer.tsx">
import React, { useState, useEffect, useRef } from 'react'
import type { Subject } from '../types'
import { Button } from './ui/Button'
export interface StudySession {
  duration: number // in seconds
  startTime: Date
  endTime: Date
}
⋮----
duration: number // in seconds
⋮----
export interface StudyTimerProps {
  subject?: Subject
  onSessionEnd?: (session: StudySession) => void
}
⋮----
// Start timer
const handleStart = () =>
// Pause timer
const handlePause = () =>
⋮----
// If we have a valid session, call onSessionEnd
⋮----
// Reset timer
const handleReset = () =>
// Timer effect
⋮----
// Cleanup on unmount
⋮----
// Format time as HH:MM:SS
const formatTime = (totalSeconds: number): string =>
⋮----
{/* Subject display */}
⋮----
{/* Timer display */}
⋮----
{/* Control buttons */}
</file>

<file path="src/components/SubjectCard.tsx">
import React from 'react'
import type { Subject } from '../types'
/**
 * SubjectCard component props
 */
export interface SubjectCardProps {
  /** Subject data to display */
  subject: Subject
  /** Progress percentage (0-100) */
  progress?: number
  /** Callback when card is selected */
  onSelect?: (subject: Subject) => void
  /** Additional CSS classes */
  className?: string
}
⋮----
/** Subject data to display */
⋮----
/** Progress percentage (0-100) */
⋮----
/** Callback when card is selected */
⋮----
/** Additional CSS classes */
⋮----
/**
 * Format date to readable string
 */
const formatDate = (date: Date): string =>
/**
 * Calculate days until exam
 */
const getDaysUntilExam = (examDate: Date): number =>
/**
 * Get urgency styling based on days until exam
 */
const getUrgencyStyle = (daysLeft: number): string =>
⋮----
if (daysLeft < 0) return 'border-red-500 bg-red-50' // Overdue
if (daysLeft <= 7) return 'border-red-200 bg-red-25' // Urgent
if (daysLeft <= 30) return 'border-yellow-200 bg-yellow-25' // Soon
return 'border-gray-200 bg-white' // Normal
⋮----
/**
 * SubjectCard component displays subject information with progress and status
 * 
 * @example
 * <SubjectCard 
 *   subject={mathSubject}
 *   progress={75}
 *   onSelect={handleSubjectSelect}
 * />
 */
⋮----
const handleClick = () =>
const handleKeyDown = (event: React.KeyboardEvent) =>
⋮----
{/* Header with emoji and title */}
⋮----
{/* Status badge */}
⋮----
{/* Exam date and study time */}
⋮----
<span>Exam:
⋮----
{/* Progress bar */}
</file>

<file path="src/lib/utils.ts">
export function cn(...classes: (string | undefined | null | false)[]): string
</file>

<file path="src/pages/DashboardPage.tsx">
import StudyProgressDashboard from '../components/StudyProgressDashboard'
import AchievementsList from '../components/AchievementsList'
import { SubjectCard } from '../components/SubjectCard'
import { useExamStore } from '../stores/examStore'
⋮----
{/* Study Progress Analytics Dashboard */}
⋮----
{/* Achievements Section */}
⋮----
{/* Recent Sessions */}
⋮----
{/* Subject Cards */}
</file>

<file path="src/pages/FlashcardsPage.tsx">
import { useState } from 'react'
import { Button } from '../components/ui/Button'
import { Input } from '../components/ui/Input'
// Types
interface SortOption {
  value: string
  label: string
}
interface StatisticCardProps {
  title: string
  value: string | number
  bgColor: string
  textColor: string
  valueColor: string
}
// Constants
⋮----
// Components
const StatisticCard = (
const FlashcardsPage = () =>
⋮----
// Mock data for development
⋮----
{/* Deck Management Section */}
⋮----
{/* Search and Filter Controls */}
⋮----
{/* Search Input */}
⋮----
onChange=
⋮----
{/* Subject Filter */}
⋮----
{/* Sort Options */}
⋮----
{/* Create Deck Form */}
⋮----
// Create the deck and transition to card creation
⋮----
// Don't automatically show card form - let user click "Add Card" first
⋮----
{/* Card Creation Interface */}
⋮----
// Save the card and reset form
⋮----
{/* Study Deck Button */}
⋮----
// Start study session with the first card
⋮----
{/* Study Interface */}
⋮----
{/* Flashcard */}
⋮----
{/* Controls */}
⋮----
// Mark as Easy - keep study session active to show progress
⋮----
// Could advance to next card here, but for simplicity, just reset
⋮----
// Mark as Medium and finish study session
⋮----
onClick=
⋮----
// Mark as Hard and finish study session
⋮----
{/* Empty State */}
⋮----
{/* Statistics Section */}
</file>

<file path="src/pages/KahootDesignDemo.tsx">
import React from 'react'
⋮----
{/* Header */}
⋮----
{/* Color Palette Demo */}
⋮----
{/* Button Demo */}
⋮----
{/* Card Demo */}
⋮----
{/* Gradient Demo */}
⋮----
{/* Typography Demo */}
⋮----
{/* Footer */}
</file>

<file path="src/pages/NotFoundPage.tsx">
const NotFoundPage = () =>
</file>

<file path="src/pages/OnboardingPage.tsx">
import { useState, useEffect, useCallback } from 'react'
import { useNavigate } from 'react-router-dom'
import { useExamStore } from '../stores/examStore'
import { useFlashcardStore } from '../stores/flashcardStore'
import { Button } from '../components/ui/Button'
import { Input } from '../components/ui/Input'
import { dataBridge, type GenerationProgress } from '../utils/dataBridge'
import type { Subject } from '../types'
interface OnboardingData {
  subjectName: string
  examDate: string
  estimatedHours: string
}
⋮----
// Subscribe to progress updates
⋮----
// Generate content
⋮----
// Store generated content
⋮----
// Create flashcard decks in the flashcard store
⋮----
setCurrentStep(4) // Move to final completion step
⋮----
// Generate fallback content
⋮----
setCurrentStep(4) // Always proceed to completion with fallback content
⋮----
// Start content generation when entering step 3
⋮----
// Auto-start generation if we have form data
⋮----
const validateStep2 = (): boolean =>
const handleNext = async () =>
⋮----
// Add subject to store
⋮----
// Start DataBridge content generation
⋮----
// Move to completion step
⋮----
const handleBack = () =>
const handleGoToDashboard = () =>
const handleInputChange = (field: keyof OnboardingData, value: string) =>
⋮----
// Clear error when user starts typing
⋮----
// Step 1: Welcome
⋮----
{/* Motivational Element */}
⋮----
{/* Gamified Progress Indicator */}
⋮----
// Step 2: Add Subject
⋮----
{/* Form Validation Feedback */}
⋮----
// Step 3: DataBridge Content Generation
⋮----
{/* AI Thinking Animation */}
⋮----
{/* Progress Bar */}
⋮----
{/* Progress Message */}
⋮----
{/* Current Stage Indicator */}
⋮----
{/* Generated Content Display - Show as content is created */}
⋮----
// Step 4: Completion
⋮----
{/* Celebration Animation */}
⋮----
{/* Generated Content Summary or Fallback Content */}
</file>

<file path="src/pages/QuizPage.tsx">
import { useState } from 'react'
const QuizPage = () =>
⋮----
const handleStartQuiz = () =>
const handleNextQuestion = () =>
const handleReviewAnswers = () =>
⋮----
{/* Quiz Configuration */}
⋮----
{/* Quiz Questions */}
⋮----
{/* Quiz Results */}
⋮----
{/* Answer Review */}
</file>

<file path="src/pages/StudyPage.tsx">
import { useState, useRef } from 'react'
⋮----
const startSession = () =>
const startTimer = () =>
const stopTimer = () =>
const endSession = () =>
const formatTime = (seconds: number) =>
</file>

<file path="src/stores/achievementStore.ts">
import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
/**
 * Achievement System - V5 Gamification Engine
 * Manages user achievements, progress tracking, and motivation
 */
export interface Achievement {
  id: string
  title: string
  description: string
  icon: string
  criteria: {
    type: 'sessions' | 'study_time' | 'streak' | 'flashcards' | 'quiz_score'
    value: number
    operator: 'gte' | 'eq' | 'lte'
  }
  category: 'learning' | 'consistency' | 'mastery' | 'exploration'
  points: number
  unlocked?: boolean
}
export interface AchievementProgress {
  current: number
  required: number
  percentage: number
}
export interface ProgressData {
  sessionsCompleted: number
  totalStudyTime: number
  streakCount: number
  flashcardsReviewed: number
  averageQuizScore?: number
}
interface AchievementState {
  // Core state
  achievements: Achievement[]
  unlockedAchievements: string[]
  // Computed getters
  getTotalPoints: () => number
  getAchievementProgress: (achievementId: string) => AchievementProgress
  isAchievementUnlocked: (achievementId: string) => boolean
  // Actions
  unlockAchievement: (achievementId: string) => void
  checkAchievements: (progressData: ProgressData) => string[]
  resetAchievements: () => void
}
⋮----
// Core state
⋮----
// Computed getters
⋮----
// Actions
⋮----
// Predefined achievements based on V5 gamification plan
⋮----
value: 300, // 5 hours in minutes
⋮----
// Initial state
⋮----
// Computed getters
⋮----
// For now, return default progress structure
// This will be enhanced when we integrate with actual progress data
⋮----
// Actions
⋮----
return state // Already unlocked
⋮----
// Skip if already unlocked
⋮----
// Check if criteria is met
⋮----
// Check if criteria is met based on operator
⋮----
// Unlock all newly achieved
</file>

<file path="src/stores/examStore.ts">
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import type { User, Subject, StudyPlan, Progress, FlashcardDeck, Quiz } from '../types'
import { useAchievementStore, type ProgressData } from './achievementStore'
import type { GeneratedContent } from '../utils/dataBridge'
/**
 * Study Session types
 */
export interface StudySession {
  id: string
  subjectId: string
  subjectName: string
  date: string
  duration: number
  topicsStudied?: string[]
  topicsPlanned?: string[]
  completed: boolean
  type?: 'scheduled'
  createdAt: Date
}
interface ScheduledSession {
  id: string
  subjectId: string
  subjectName: string
  date: string
  duration: number
  topicsPlanned: string[]
  type: 'scheduled'
  createdAt: Date
}
/**
 * ExamKlar application state store
 * Manages user data, subjects, study plans, progress tracking, and study sessions
 */
interface ExamStore {
  // State
  user: User | null
  subjects: Subject[]
  currentSubject: Subject | null
  studyPlan: StudyPlan | null
  progress: Progress | null
  onboardingCompleted: boolean
  // Study Sessions
  studySessions: StudySession[]
  scheduledSessions: ScheduledSession[]
  // Streak Counter (V5 Gamification)
  streakCount: number
  longestStreak: number
  lastActivityDate: Date | null
  flashcardsReviewed: number
  recentAchievements: string[]
  // DataBridge Content Generation (V5 Onboarding)
  generatedContent: GeneratedContent | null
  // Actions
  setUser: (user: User) => void
  addSubject: (subject: Subject) => void
  removeSubject: (subjectId: string) => void
  setCurrentSubject: (subject: Subject) => void
  updateStudyPlan: (plan: StudyPlan) => void
  updateProgress: (progress: Progress) => void
  completeOnboarding: () => void
  // Study Session Actions
  addScheduledSession: (session: Omit<ScheduledSession, 'id' | 'createdAt'>) => void
  updateSession: (session: StudySession) => void
  deleteSession: (sessionId: string) => void
  completeSession: (sessionId: string, topicsStudied: string[]) => void
  // Streak Actions
  recordActivity: (activityDate?: Date) => void
  getStreakMessage: () => string
  // Achievement Integration (V5 Gamification)
  triggerAchievementCheck: () => string[]
  getProgressForAchievements: () => ProgressData
  getRecentAchievements: () => string[]
  clearRecentAchievements: () => void
  resetStore: () => void
  // DataBridge Actions
  storeGeneratedContent: (content: GeneratedContent) => void
  clearGeneratedContent: () => void
  getGeneratedContent: () => GeneratedContent | null
  // Computed getters
  getUpcomingDeadlines: () => Subject[]
  getCurrentProgress: () => number
  getTodaysGoal: () => number
  // Utility
  reset: () => void
}
⋮----
// State
⋮----
// Study Sessions
⋮----
// Streak Counter (V5 Gamification)
⋮----
// DataBridge Content Generation (V5 Onboarding)
⋮----
// Actions
⋮----
// Study Session Actions
⋮----
// Streak Actions
⋮----
// Achievement Integration (V5 Gamification)
⋮----
// DataBridge Actions
⋮----
// Computed getters
⋮----
// Utility
⋮----
/**
 * ExamKlar Zustand store with persistence and devtools
 */
⋮----
// User management
⋮----
// Subject management
⋮----
// Study plan management
⋮----
// Progress management
⋮----
// Computed getters
⋮----
// Calculate current progress based on study sessions and goals
// This is a simplified implementation
⋮----
// Onboarding management
⋮----
// DataBridge Content Generation (V5 Onboarding)
⋮----
// Study Session Management
⋮----
// Update in studySessions if it's a completed session
⋮----
// Update in scheduledSessions if it's a scheduled session
⋮----
// Convert StudySession back to ScheduledSession format
⋮----
// Automatically record activity when completing session (V5 Gamification)
⋮----
// If not already recorded activity today, update streak
⋮----
// Check if the last activity was yesterday (consecutive days)
⋮----
// Consecutive day - extend streak
⋮----
// Update progress state
⋮----
// Trigger achievement check after completing session
⋮----
// Streak management (V5 Gamification)
⋮----
// If already recorded activity today, don't change streak
⋮----
// Check if the last activity was yesterday (consecutive days)
⋮----
// Consecutive day - extend streak
⋮----
// If not consecutive, streak resets to 1 (already set above)
⋮----
// Update longest streak if current exceeds it
⋮----
// Trigger achievement check after recording activity
⋮----
// Achievement Integration Methods
⋮----
// Store recently unlocked achievements for notifications
⋮----
// Utility functions
⋮----
// Serialize/deserialize dates properly
⋮----
// Rehydrate dates from strings
</file>

<file path="src/stores/flashcardStore.ts">
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import type { FlashcardDeck, Flashcard } from '../types'
// 🟢 GREEN: Implementing the flashcard store to make tests pass
/**
 * Flashcard deck filter and sort options
 */
export interface DeckFilters {
  search?: string
  subjectId?: string
  difficulty?: 'easy' | 'medium' | 'hard'
  tags?: string[]
  dueForReview?: boolean
}
export interface DeckSortOptions {
  sortBy: 'name' | 'created' | 'modified' | 'cards'
  sortOrder: 'asc' | 'desc'
}
/**
 * Statistics and analytics interfaces
 */
export interface DeckStats {
  totalDecks: number
  totalCards: number
  cardsDueForReview: number
  difficultyDistribution: {
    easy: number
    medium: number
    hard: number
  }
  studyStreak: number
}
export interface DeckPerformanceMetrics {
  deckId: string
  averageAccuracy: number
  totalReviews: number
  lastStudied?: Date
  masteryLevel: number // 0-100
}
⋮----
masteryLevel: number // 0-100
⋮----
/**
 * Enhanced flashcard store interface
 */
interface FlashcardStore {
  // State
  decks: FlashcardDeck[]
  loading: boolean
  error: string | null
  // Deck CRUD Operations
  createDeck: (deck: Omit<FlashcardDeck, 'id' | 'createdAt'>) => FlashcardDeck
  updateDeck: (deckId: string, updates: Partial<Pick<FlashcardDeck, 'name' | 'description'>>) => void
  deleteDeck: (deckId: string) => void
  getDeckById: (deckId: string) => FlashcardDeck | undefined
  getDecksBySubject: (subjectId: string) => FlashcardDeck[]
  getDecks: () => FlashcardDeck[]
  // Card Management within Decks
  addCardToDeck: (deckId: string, card: Omit<Flashcard, 'id' | 'createdAt'>) => void
  updateCardInDeck: (deckId: string, cardId: string, updates: Partial<Flashcard>) => void
  removeCardFromDeck: (deckId: string, cardId: string) => void
  moveCardBetweenDecks: (cardId: string, fromDeckId: string, toDeckId: string) => void
  // Advanced Filtering and Sorting
  filterDecks: (filters: DeckFilters) => FlashcardDeck[]
  sortDecks: (options: DeckSortOptions) => FlashcardDeck[]
  filterCards: (deckId: string, filters: DeckFilters) => Flashcard[]
  getCardsDueForReview: () => Flashcard[]
  // Statistics and Analytics
  getStats: () => DeckStats
  getDeckPerformanceMetrics: (deckId: string) => DeckPerformanceMetrics
  // Import/Export Operations
  exportDeck: (deckId: string) => string
  importDeck: (jsonData: string) => FlashcardDeck
  validateDeckData: (data: unknown) => boolean
  // Utility
  reset: () => void
}
⋮----
// State
⋮----
// Deck CRUD Operations
⋮----
// Card Management within Decks
⋮----
// Advanced Filtering and Sorting
⋮----
// Statistics and Analytics
⋮----
// Import/Export Operations
⋮----
// Utility
⋮----
/**
 * Generate unique ID for decks and cards
 */
const generateId = (): string =>
/**
 * Enhanced flashcard store with comprehensive deck management
 */
⋮----
// Deck CRUD Operations
⋮----
// Card Management within Decks
⋮----
// Remove from source deck and add to target deck
⋮----
// Advanced Filtering and Sorting
⋮----
// Statistics and Analytics
⋮----
// Simple study streak calculation (placeholder)
const studyStreak = 7 // This would be calculated based on actual study sessions
⋮----
// Import/Export Operations
⋮----
// Validate each card
⋮----
// Utility
</file>

<file path="src/styles/gamified-design-system.css">
/* ===== GAMIFIED DESIGN SYSTEM ===== */
/* Modern, energetic, gamified design for young users */
⋮----
:root {
⋮----
/* ===== GAMIFIED COLOR PALETTE ===== */
/* Primary Gamified Colors - Vibrant and energetic */
⋮----
/* Neutral Colors */
⋮----
/* ===== GAMIFIED GRADIENTS ===== */
⋮----
/* ===== TYPOGRAPHY ===== */
⋮----
/* ===== SPACING & SIZING ===== */
--spacing-gamified-xs: 0.5rem;   /* 8px */
--spacing-gamified-sm: 0.75rem;  /* 12px */
--spacing-gamified-md: 1rem;     /* 16px */
--spacing-gamified-lg: 1.5rem;   /* 24px */
--spacing-gamified-xl: 2rem;     /* 32px */
--spacing-gamified-2xl: 3rem;    /* 48px */
--spacing-gamified-3xl: 4rem;    /* 64px */
/* ===== BORDER RADIUS ===== */
--radius-gamified-sm: 0.5rem;    /* 8px */
--radius-gamified-md: 0.75rem;   /* 12px */
--radius-gamified-lg: 1rem;      /* 16px */
--radius-gamified-xl: 1.5rem;    /* 24px */
--radius-gamified-2xl: 2rem;     /* 32px */
⋮----
/* ===== SHADOWS ===== */
⋮----
/* ===== ANIMATIONS ===== */
⋮----
/* ===== UTILITY CLASSES ===== */
/* Background Gradients */
.bg-gradient-gamified-primary {
.bg-gradient-gamified-warm {
.bg-gradient-gamified-cool {
.bg-gradient-gamified-success {
.bg-gradient-gamified-danger {
/* Solid Background Colors */
.bg-gamified-red { background-color: var(--gamified-red); }
.bg-gamified-blue { background-color: var(--gamified-blue); }
.bg-gamified-yellow { background-color: var(--gamified-yellow); }
.bg-gamified-green { background-color: var(--gamified-green); }
.bg-gamified-purple { background-color: var(--gamified-purple); }
/* Button Variants */
.btn-gamified-primary {
.btn-gamified-primary:hover {
.btn-gamified-secondary {
.btn-gamified-secondary:hover {
.btn-gamified-success {
.btn-gamified-success:hover {
.btn-gamified-danger {
.btn-gamified-danger:hover {
/* Button Sizes */
.btn-gamified-small {
.btn-gamified-large {
/* Button States */
.btn-gamified-loading {
.btn-gamified-loading:hover {
/* Rounded Corners */
.rounded-gamified {
/* Shadows */
.shadow-gamified {
/* Hover Effects */
.hover-lift {
.hover-lift:hover {
/* Typography */
.text-gamified-heading {
.text-gamified-body {
.font-gamified-bold {
.font-gamified-medium {
/* Card Styles */
.card-gamified {
.card-gamified:hover {
/* Progress Bars */
.progress-gamified {
.progress-gamified-fill {
/* Interactive Elements */
.interactive-gamified {
.interactive-gamified:hover {
.interactive-gamified:active {
/* Input Variants */
.input-gamified {
.input-gamified:focus {
.input-gamified-success {
.input-gamified-success:focus {
.input-gamified-error {
.input-gamified-error:focus {
/* Input Sizes */
.input-gamified-small {
.input-gamified-large {
/* Focus Effects */
.focus-gamified:focus {
/* Helper Text */
.text-gamified-helper {
/* Main Content Area */
.gamified-main-content {
/* ===== CARD COMPONENTS ===== */
/* Base Card Styles */
.card {
/* Card Variants */
.card-default {
.card-primary {
.card-secondary {
.card-success {
.card-warning {
.card-danger {
/* Interactive Card */
.card-interactive {
.card-interactive:hover {
.card-interactive:active {
/* Card Elevation */
.card-elevation-none {
.card-elevation-low {
.card-elevation-medium {
.card-elevation-high {
/* Achievement States */
.card-achievement-completed {
.card-achievement-locked {
.card-achievement-in-progress {
/* Achievement Badge */
.card-achievement-badge {
/* Progress Bar */
.card-progress {
.card-progress-bar {
/* Card Sub-components */
.card-header {
.card-title {
.card-description {
.card-content {
.card-footer {
/* ===== BADGE COMPONENTS ===== */
/* Base Badge Styles */
.badge {
/* Badge Variants */
.badge-default {
.badge-primary {
.badge-secondary {
.badge-success {
.badge-warning {
.badge-danger {
/* Badge Sizes */
.badge-small {
.badge-medium {
.badge-large {
/* Achievement Badges */
.badge-achievement-gold {
.badge-achievement-silver {
.badge-achievement-bronze {
/* Pulse Animation */
.badge-pulse {
⋮----
/* Dot Badge */
.badge-dot {
.badge-dot::after {
/* Outline Badge */
.badge-outline {
.badge-outline.badge-primary {
.badge-outline.badge-success {
.badge-outline.badge-warning {
.badge-outline.badge-danger {
/* Badge Icon */
.badge-icon {
/* Badge Count */
.badge-count {
/* ===== MODAL COMPONENTS ===== */
/* Modal Overlay */
.modal-overlay {
/* Base Modal Styles */
.modal {
/* Modal Variants */
.modal-default {
.modal-success {
.modal-warning {
.modal-danger {
.modal-achievement {
/* Modal Sizes */
.modal-small {
.modal-medium {
.modal-large {
.modal-fullscreen {
/* Modal Animation */
.modal-animated {
⋮----
/* Modal Close Button */
.modal-close-button {
.modal-close-button:hover {
.modal-close-button:active {
/* Modal Sub-components */
.modal-header {
.modal-title {
.modal-description {
.modal-content {
.modal-footer {
/* Achievement Modal Special Effects */
.modal-achievement::before {
⋮----
/* Responsive Design */
⋮----
.btn-gamified-primary,
⋮----
.card-header,
⋮----
/* ===== TOOLTIP COMPONENTS ===== */
/* Tooltip Container */
.tooltip-container {
/* Base Tooltip Styles */
.tooltip {
⋮----
/* Tooltip Positions */
.tooltip-top {
.tooltip-bottom {
.tooltip-left {
.tooltip-right {
/* Tooltip Variants */
.tooltip-default {
.tooltip-success {
.tooltip-warning {
.tooltip-danger {
.tooltip-achievement {
/* Tooltip Sizes */
.tooltip-small {
.tooltip-medium {
.tooltip-large {
/* Tooltip Arrow */
.tooltip-arrow .tooltip-arrow-element {
/* Arrow for top tooltip */
.tooltip-top.tooltip-arrow .tooltip-arrow-element {
.tooltip-top.tooltip-success.tooltip-arrow .tooltip-arrow-element {
.tooltip-top.tooltip-warning.tooltip-arrow .tooltip-arrow-element {
.tooltip-top.tooltip-danger.tooltip-arrow .tooltip-arrow-element {
.tooltip-top.tooltip-achievement.tooltip-arrow .tooltip-arrow-element {
/* Arrow for bottom tooltip */
.tooltip-bottom.tooltip-arrow .tooltip-arrow-element {
.tooltip-bottom.tooltip-success.tooltip-arrow .tooltip-arrow-element {
.tooltip-bottom.tooltip-warning.tooltip-arrow .tooltip-arrow-element {
.tooltip-bottom.tooltip-danger.tooltip-arrow .tooltip-arrow-element {
.tooltip-bottom.tooltip-achievement.tooltip-arrow .tooltip-arrow-element {
/* ===== ONBOARDING GAMIFIED STYLES - Phase 2 Week 3 Day 1-2 ===== */
/* Welcome Experience Enhancement */
.onboarding-gamified-welcome {
.onboarding-gamified-welcome::before {
⋮----
/* Welcome Animation Container */
.welcome-fade-in {
⋮----
/* Progress Indicator Gamified */
⋮----
.progress-gamified::before {
⋮----
/* Card Gamified Transition */
.card-gamified-transition {
.card-gamified-transition::before {
.card-gamified-transition:hover::before {
.card-gamified-transition:hover {
/* ===== CENTRALIZED GAMIFIED COMPONENTS ===== */
/* Welcome Section */
.section-gamified-welcome {
.section-gamified-welcome::before {
/* Animation Classes */
.animation-fade-in {
⋮----
.animation-slide-in {
⋮----
/* Progress Indicator */
.progress-gamified-indicator {
⋮----
.card-gamified-interactive {
.card-gamified-interactive:hover {
/* Form Section */
.section-gamified-form {
.section-gamified-form::before {
/* Enhanced Input */
.input-gamified-enhanced {
.input-gamified-enhanced:focus {
.input-gamified-enhanced:hover {
/* Alert Error */
.alert-gamified-error {
⋮----
.alert-gamified-error::before {
/* Celebration Section */
.section-gamified-celebration {
.section-gamified-celebration::before {
/* Celebration Animation */
.celebration-animation {
⋮----
.celebration-confetti {
⋮----
/* Motivational Elements */
[data-testid="welcome-motivation"] {
</file>

<file path="src/styles/kahoot-design-system.css">
/* ===== KAHOOT-STYLE DESIGN SYSTEM ===== */
/* Modern, energetic, gamified design for young users */
⋮----
:root {
⋮----
/* ===== KAHOOT COLOR PALETTE ===== */
/* Primary Kahoot Colors - Vibrant and energetic */
⋮----
/* Neutral Colors */
⋮----
/* ===== KAHOOT GRADIENTS ===== */
⋮----
/* ===== TYPOGRAPHY ===== */
⋮----
/* ===== SPACING & SIZING ===== */
--spacing-kahoot-xs: 0.5rem;   /* 8px */
--spacing-kahoot-sm: 0.75rem;  /* 12px */
--spacing-kahoot-md: 1rem;     /* 16px */
--spacing-kahoot-lg: 1.5rem;   /* 24px */
--spacing-kahoot-xl: 2rem;     /* 32px */
--spacing-kahoot-2xl: 3rem;    /* 48px */
--spacing-kahoot-3xl: 4rem;    /* 64px */
/* ===== BORDER RADIUS ===== */
--radius-kahoot-sm: 0.5rem;    /* 8px */
--radius-kahoot-md: 0.75rem;   /* 12px */
--radius-kahoot-lg: 1rem;      /* 16px */
--radius-kahoot-xl: 1.5rem;    /* 24px */
--radius-kahoot-2xl: 2rem;     /* 32px */
⋮----
/* ===== SHADOWS ===== */
⋮----
/* ===== ANIMATIONS ===== */
⋮----
/* ===== UTILITY CLASSES ===== */
/* Background Gradients */
.bg-gradient-kahoot-primary {
.bg-gradient-kahoot-warm {
.bg-gradient-kahoot-cool {
.bg-gradient-kahoot-success {
.bg-gradient-kahoot-danger {
/* Solid Background Colors */
.bg-kahoot-red { background-color: var(--kahoot-red); }
.bg-kahoot-blue { background-color: var(--kahoot-blue); }
.bg-kahoot-yellow { background-color: var(--kahoot-yellow); }
.bg-kahoot-green { background-color: var(--kahoot-green); }
.bg-kahoot-purple { background-color: var(--kahoot-purple); }
/* Button Variants */
.btn-kahoot-primary {
.btn-kahoot-primary:hover {
.btn-kahoot-secondary {
.btn-kahoot-secondary:hover {
.btn-kahoot-success {
.btn-kahoot-success:hover {
.btn-kahoot-danger {
.btn-kahoot-danger:hover {
/* Rounded Corners */
.rounded-kahoot {
/* Shadows */
.shadow-kahoot {
/* Hover Effects */
.hover-lift {
.hover-lift:hover {
/* Typography */
.text-kahoot-heading {
.text-kahoot-body {
.font-kahoot-bold {
.font-kahoot-medium {
/* Card Styles */
.card-kahoot {
.card-kahoot:hover {
/* Progress Bars */
.progress-kahoot {
.progress-kahoot-fill {
/* Interactive Elements */
.interactive-kahoot {
.interactive-kahoot:hover {
.interactive-kahoot:active {
/* Responsive Design */
⋮----
.btn-kahoot-primary,
</file>

<file path="src/types/index.ts">
/**
 * Core type definitions for ExamKlar application
 */
export interface User {
  id: string
  name: string
  email: string
  createdAt: Date
}
export interface Subject {
  id: string
  name: string
  description: string
  emoji: string
  examDate: Date
  estimatedHours: number
  createdAt: Date
}
export interface WeeklyGoal {
  week: number
  targetHours: number
  targetTopics: string[]
  milestones: string[]
}
export interface Milestone {
  id: string
  title: string
  description: string
  targetDate: Date
  completed: boolean
  completedAt?: Date
}
export interface StudyPlan {
  id: string
  subjectId: string
  totalDays: number
  dailyGoalMinutes: number
  weeklyGoals: WeeklyGoal[]
  milestones: Milestone[]
  createdAt: Date
}
export interface Content {
  id: string
  subjectId: string
  title: string
  type: 'document' | 'video' | 'article' | 'notes'
  content: string
  processingStatus: 'pending' | 'processed' | 'failed'
  extractedKeyPoints: string[]
  estimatedReadTime: number
  createdAt: Date
}
export interface FlashcardDeck {
  id: string
  subjectId: string
  name: string
  description: string
  cards: Flashcard[]
  createdAt: Date
}
export interface Flashcard {
  id: string
  front: string
  back: string
  difficulty: 'easy' | 'medium' | 'hard'
  tags: string[]
  lastReviewed: Date
  nextReview: Date
  correctStreak: number
  totalReviews: number
  subjectId?: string
  createdAt?: Date
}
export interface FlashcardSession {
  id: string
  flashcardIds: string[]
  startedAt: Date
  completedAt?: Date
  totalCards: number
  correctCards: number
  incorrectCards: number
  timeSpent: number // in seconds
}
⋮----
timeSpent: number // in seconds
⋮----
export interface Quiz {
  id: string
  subjectId?: string
  title: string
  description: string
  questions: QuizQuestion[]
  timeLimit?: number // in seconds
  passingScore: number // percentage
  createdAt?: Date
}
⋮----
timeLimit?: number // in seconds
passingScore: number // percentage
⋮----
export interface QuizQuestion {
  id: string
  question: string
  options: string[]
  correctAnswer: number // index of correct option
  explanation?: string
  difficulty: 'easy' | 'medium' | 'hard'
  points: number
}
⋮----
correctAnswer: number // index of correct option
⋮----
export interface QuizAnswer {
  questionId: string
  selectedAnswer: number
  isCorrect: boolean
  timeSpent: number
}
export interface QuizResult {
  quizId: string
  score: number // percentage
  totalQuestions: number
  correctAnswers: number
  incorrectAnswers: number
  timeSpent: number // in seconds
  passed: boolean
  answers: QuizAnswer[]
  completedAt?: Date
}
⋮----
score: number // percentage
⋮----
timeSpent: number // in seconds
⋮----
export interface QuizHistory {
  quizId: string
  score: number
  passed: boolean
  completedAt: Date
  timeSpent: number
}
export interface StudySession {
  id: string
  subjectId: string
  startTime: Date
  endTime?: Date
  plannedDuration: number
  actualDuration?: number
  status: 'active' | 'completed' | 'paused'
  topics: string[]
  notes?: string
}
export interface Progress {
  sessionsCompleted: number
  totalStudyTime: number
  streakCount: number
  lastActivity: Date
  weeklyGoal: number
  weeklyProgress: number
}
</file>

<file path="src/utils/buildUtils.ts">
import { exec } from 'child_process'
import { promisify } from 'util'
import fs from 'fs/promises'
import path from 'path'
⋮----
/**
 * Real build command implementation for production readiness
 */
export async function runActualBuild(): Promise<
/**
 * Analyze bundle size for production optimization
 */
export async function analyzeActualBundleSize(): Promise<
⋮----
// In a real implementation, this would parse build output or use bundler APIs
⋮----
// Try to read actual dist folder if it exists
⋮----
// Fallback to mock data if dist doesn't exist
⋮----
/**
 * Validate build output for production readiness
 */
export async function validateBuildOutput(): Promise<
⋮----
// Check if dist directory exists
⋮----
// Check for essential files
⋮----
// Check for source maps in production
⋮----
// Check bundle sizes
⋮----
if (bundleAnalysis.totalSize > 2000000) { // 2MB
⋮----
/**
 * Optimize build assets for production
 */
export async function optimizeBuildAssets(): Promise<
⋮----
// This would implement actual asset optimization
// For now, simulate the optimization process
⋮----
// Simulate savings calculation
totalSavings = 150000 // 150KB saved
</file>

<file path="src/utils/dataBridge.ts">
/**
 * DataBridge - Automatisk Indholdsgenerering
 * Advanced AI-powered content generation system for ExamKlar V5
 */
import type { FlashcardDeck, Flashcard, Quiz, QuizQuestion, StudyPlan, StudySession } from '../types'
export interface GeneratedContent {
  flashcardDecks: FlashcardDeck[]
  quizzes: Quiz[]
  studySchedule: StudySession[]
  studyPlan: StudyPlan
}
export interface OnboardingInput {
  subjectName: string
  examDate: Date
  estimatedHours: number
}
export interface GenerationProgress {
  stage: 'analyzing' | 'generating-flashcards' | 'generating-quizzes' | 'creating-schedule' | 'finalizing' | 'complete'
  progress: number
  message: string
}
/**
 * DataBridge AI Content Generation Engine
 */
export class DataBridge
⋮----
private constructor()
static getInstance(): DataBridge
/**
   * Subscribe to generation progress updates
   */
onProgressUpdate(callback: (progress: GenerationProgress) => void): () => void
private notifyProgress(progress: GenerationProgress)
/**
   * Generate comprehensive learning content based on subject and exam requirements
   */
async generateContent(input: OnboardingInput): Promise<GeneratedContent>
⋮----
// Check for invalid subject names that might cause generation issues
⋮----
// Stage 1: Analyzing subject requirements
⋮----
// Stage 2: Generating flashcards
⋮----
// Stage 3: Generating quizzes
⋮----
// Stage 4: Creating study schedule
⋮----
// Stage 5: Finalizing
⋮----
// Stage 6: Complete
⋮----
/**
   * Generate fallback content when AI generation fails
   */
async generateFallbackContent(input: OnboardingInput): Promise<GeneratedContent>
⋮----
plannedDuration: 60, // 1 hour sessions
⋮----
private async generateFlashcards(input: OnboardingInput): Promise<FlashcardDeck[]>
⋮----
// Generate subject-specific flashcards
⋮----
private async generateQuizzes(input: OnboardingInput): Promise<Quiz[]>
⋮----
timeLimit: 600, // 10 minutes
⋮----
private async generateStudySchedule(input: OnboardingInput): Promise<StudySession[]>
⋮----
const totalSessions = Math.floor(input.estimatedHours / 1.5) // 1.5 hour sessions
⋮----
plannedDuration: 90, // 1.5 hours
⋮----
private async generateStudyPlan(input: OnboardingInput): Promise<StudyPlan>
private getSubjectTopics(subjectName: string): string[]
⋮----
// Subject-specific topic generation
⋮----
// Generic topics for unknown subjects
⋮----
private delay(ms: number): Promise<void>
</file>

<file path="src/utils/performanceUtils.ts">
/**
 * Performance utilities for Phase 4 optimization
 */
/**
 * Debounce function for search inputs to reduce API calls
 */
export function debounce<T extends (...args: unknown[]) => void>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void
/**
 * Virtual scrolling implementation for large lists
 */
export interface VirtualScrollConfig {
  itemHeight: number
  containerHeight: number
  items: unknown[]
}
export function calculateVirtualScrollItems(
  config: VirtualScrollConfig,
  scrollTop: number
):
/**
 * Measure Web Vitals for performance monitoring
 */
export interface WebVitals {
  firstContentfulPaint: number
  largestContentfulPaint: number
  timeToInteractive: number
  cumulativeLayoutShift: number
}
export function measureWebVitals(): Promise<WebVitals>
⋮----
// In a real implementation, this would use web-vitals library
// For now, simulate realistic performance metrics
⋮----
/**
 * Optimize component re-renders using React.memo with custom comparison
 */
export function createMemoComponent<T extends Record<string, unknown>>(
  Component: React.ComponentType<T>,
  propsAreEqual?: (prevProps: T, nextProps: T) => boolean
): React.MemoExoticComponent<React.ComponentType<T>>
// Add React import for the memo function
import React from 'react'
/**
 * Service Worker utilities for caching and offline support
 */
export interface ServiceWorkerConfig {
  cacheName: string
  version: string
  staticAssets: string[]
  apiEndpoints: string[]
}
export function registerServiceWorker(config: ServiceWorkerConfig): Promise<boolean>
⋮----
// Simulate service worker registration with config
⋮----
/**
 * Memory leak detection and prevention
 */
export function detectMemoryLeaks():
⋮----
// Simulate memory usage analysis - using type assertion for Chrome-specific API
const memoryUsage = (performance as unknown as { memory?: { usedJSHeapSize: number } }).memory?.usedJSHeapSize || 10000000 // Fallback to 10MB
const leaksDetected = memoryUsage > 50000000 // 50MB threshold
⋮----
/**
 * Resource loading optimization
 */
export interface ResourceLoadingMetrics {
  totalResources: number
  loadTime: number
  failedResources: string[]
  criticalPath: string[]
}
export function analyzeResourceLoading(): Promise<ResourceLoadingMetrics>
⋮----
// Simulate resource loading analysis
⋮----
/**
 * Code splitting and lazy loading utilities
 */
export function createLazyComponent<T extends React.ComponentType<Record<string, unknown>>>(
  importFunc: () => Promise<{ default: T }>
): React.LazyExoticComponent<T>
/**
 * Performance monitoring hooks
 */
export function usePerformanceMonitor(componentName: string)
⋮----
if (renderTime > 16) { // More than one frame (60fps)
⋮----
/**
 * Image optimization utilities
 */
export interface ImageOptimizationConfig {
  quality: number
  format: 'webp' | 'jpeg' | 'png'
  sizes: number[]
}
export function optimizeImageLoading(
  src: string,
  config: ImageOptimizationConfig
): string
⋮----
// In a real implementation, this would generate optimized image URLs
// For now, return the original src with optimization parameters
</file>

<file path="src/App.css">
#root {
.logo {
.logo:hover {
.logo.react:hover {
⋮----
a:nth-of-type(2) .logo {
⋮----
.card {
.read-the-docs {
</file>

<file path="src/App.tsx">
import { Routes, Route } from 'react-router-dom'
import Layout from './components/layout/Layout'
import OnboardingPage from './pages/OnboardingPage'
import DashboardPage from './pages/DashboardPage'
import StudyPage from './pages/StudyPage'
import FlashcardsPage from './pages/FlashcardsPage'
import QuizPage from './pages/QuizPage'
import NotFoundPage from './pages/NotFoundPage'
import KahootDesignDemo from './pages/KahootDesignDemo'
function App()
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
:root {
a {
a:hover {
body {
#root {
h1 {
button {
button:hover {
button:focus,
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
⋮----
import App from './App.tsx'
</file>

<file path="src/test-setup.ts">
import { beforeEach } from 'vitest'
import { cleanup } from '@testing-library/react'
⋮----
// Mock window.location for React Router
⋮----
// Mock ResizeObserver for chart.js
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
constructor(cb: any)
observe()
unobserve()
disconnect()
⋮----
// Mock HTMLCanvasElement.getContext for Chart.js
// eslint-disable-next-line @typescript-eslint/no-explicit-any
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
/// <reference types="@testing-library/jest-dom" />
</file>

</files>
